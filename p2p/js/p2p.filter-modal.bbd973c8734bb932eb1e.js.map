{"version":3,"file":"p2p/js/p2p.filter-modal.bbd973c8734bb932eb1e.js","mappings":"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","sources":["webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.scss","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-search.scss","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal.scss","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.scss?b295","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-search.scss?6103","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal.scss?69a2","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-header.jsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-search.jsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.jsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal.jsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".filter-modal-no-result{display:flex;flex-direction:column;padding:50% 0.8rem;justify-content:center;align-content:center}.filter-modal-no-result__title{line-height:1.43;letter-spacing:normal;margin-bottom:0.8rem}.filter-modal-no-result__subtitle{letter-spacing:normal;margin:0}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.scss\"],\"names\":[],\"mappings\":\"AA8mBA,wBACI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CACvB,oBAAqB,CAErB,+BACI,gBAAiB,CACjB,qBAAsB,CACtB,oBAAqB,CACxB,kCAEG,qBAAsB,CACtB,QAAS\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-orange: #ff6444;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' left, 'right' right);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon.active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n.filter-modal-no-result {\\n    display: flex;\\n    flex-direction: column;\\n    padding: 50% 0.8rem;\\n    justify-content: center;\\n    align-content: center;\\n\\n    &__title {\\n        line-height: 1.43;\\n        letter-spacing: normal;\\n        margin-bottom: 0.8rem;\\n    }\\n    &__subtitle {\\n        letter-spacing: normal;\\n        margin: 0;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".filter-modal-search{border-bottom:1px solid var(--border-normal)}.filter-modal-search .dc-input{border:medium none currentColor;border:initial;height:5.2rem}@media (min-width: 320px) and (max-width: 767px){.filter-modal-search{margin:0.8rem 1.6rem 1rem;min-width:25rem}.filter-modal-search .dc-input{height:4rem}}@media (max-width: 320px){.filter-modal-search{width:14rem}}.filter-modal-search__cross-icon{cursor:pointer}.filter-modal-search__field{margin-bottom:0 !important}.filter-modal-search__field .dc-input{justify-content:center}.filter-modal-search__field .dc-input__container{border:none;padding:0;height:6rem}.filter-modal-search__field .dc-input__field{flex-grow:1;height:4rem;padding-right:3rem;margin-left:1.2rem;width:auto;width:initial}@media (min-width: 320px) and (max-width: 767px){.filter-modal-search__field .dc-input__field{padding:0 2.8rem 0 0.4rem}}.filter-modal-search__field .dc-input__leading-icon{cursor:pointer;margin-left:0.8rem;pointer-events:inherit;position:static;position:initial}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/modal-manager/modals/filter-modal/filter-modal-search.scss\"],\"names\":[],\"mappings\":\"AA8mBA,qBACI,4CAA6C,CADjD,+BAIQ,+BAAa,CAAb,cAAa,CACb,aAAc,CA9BlB,iDAyBJ,qBASQ,yBAA0B,CAC1B,eAAgB,CAVxB,+BAaY,WAAY,CACf,CAGL,0BAjBJ,qBAkBQ,WAAY,CAsCnB,CAnCG,iCACI,cAAe,CAClB,4BAGG,0BAA2B,CAD9B,sCAIO,sBAAuB,CAJ9B,iDAOW,WAAY,CACZ,SAAU,CACV,WAAY,CATvB,6CAYW,WAAY,CACZ,WAAY,CACZ,kBAAmB,CACnB,kBAAmB,CACnB,UAAO,CAAP,aAAY,CAlExB,iDAkDC,6CAmBe,yBAA0B,CAEjC,CArBR,oDAwBW,cAAe,CACf,kBAAmB,CACnB,sBAAqB,CACrB,eAAU,CAAV,gBAAe\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-orange: #ff6444;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' left, 'right' right);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon.active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n.filter-modal-search {\\n    border-bottom: 1px solid var(--border-normal);\\n\\n    .dc-input {\\n        border: unset;\\n        height: 5.2rem;\\n    }\\n\\n    @include mobile {\\n        margin: 0.8rem 1.6rem 1rem;\\n        min-width: 25rem;\\n\\n        .dc-input {\\n            height: 4rem;\\n        }\\n    }\\n\\n    @media (max-width: 320px) {\\n        width: 14rem;\\n    }\\n\\n    &__cross-icon {\\n        cursor: pointer;\\n    }\\n\\n    &__field {\\n        margin-bottom: 0 !important;\\n\\n        .dc-input {\\n            justify-content: center;\\n\\n            &__container {\\n                border: none;\\n                padding: 0;\\n                height: 6rem;\\n            }\\n            &__field {\\n                flex-grow: 1;\\n                height: 4rem;\\n                padding-right: 3rem;\\n                margin-left: 1.2rem;\\n                width: unset;\\n\\n                @include mobile {\\n                    padding: 0 2.8rem 0 0.4rem;\\n                }\\n            }\\n\\n            &__leading-icon {\\n                cursor: pointer;\\n                margin-left: 0.8rem;\\n                pointer-events: unset;\\n                position: unset;\\n            }\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".filter-modal__column{display:flex;flex-direction:column}@media (max-width: 450px){.filter-modal__column{width:80%}}.filter-modal__select{cursor:pointer}.filter-modal__arrow{min-width:1.8rem;min-height:1.8rem}.filter-modal__selected-payment-methods{max-width:350px;max-height:45px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (max-width: 450px){.filter-modal__selected-payment-methods{max-width:300px}}@media (max-width: 400px){.filter-modal__selected-payment-methods{max-width:250px}}.filter-modal__footer-button{display:flex;width:100%}.filter-modal__row{align-items:center;border-bottom:2px solid var(--general-section-5);display:flex;flex-direction:row;justify-content:space-between;min-height:8rem;padding:0 2.4rem}@media (max-width: 375px){.filter-modal__row{padding:0 0 0 1.5rem;justify-content:initial}}.filter-modal__toggle-label{margin:0}.filter-modal__checkbox-container{height:36rem}.dc-modal__container_payment-methods .dc-modal-header{border-bottom:2px solid var(--general-section-5);height:5.6rem}.dc-modal__container_payment-methods .dc-modal-header__title{padding:1.6rem 3.2rem}.dc-modal__container_payment-methods .dc-modal-body{padding:0;min-width:33rem}.dc-modal__container_payment-methods .dc-checkbox{min-height:4.9rem;padding:0 1.6rem}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/modal-manager/modals/filter-modal/filter-modal.scss\"],\"names\":[],\"mappings\":\"AA+mBI,sBACI,YAAa,CACb,qBAAsB,CACtB,0BAHJ,sBAIQ,SAAU,CAEjB,CAED,sBACI,cAAe,CAClB,qBAGG,gBAAiB,CACjB,iBAAkB,CACrB,wCAGG,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAChB,kBAAmB,CACnB,sBAAuB,CAEvB,0BAPJ,wCAQQ,eAAgB,CAKvB,CAHG,0BAVJ,wCAWQ,eAAgB,CAEvB,CAGG,6BACI,YAAa,CACb,UAAW,CACd,mBAID,kBAAmB,CACnB,gDAAiD,CACjD,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,eAAgB,CAChB,gBAAiB,CACjB,0BARJ,mBASQ,oBAAqB,CACrB,uBAAwB,CAE/B,CAED,4BACI,QAAS,CACZ,kCAGG,YAAa,CAChB,sDAKG,gDAAiD,CACjD,aAAc,CAHtB,6DAMY,qBAAsB,CANlC,oDAWQ,SAAU,CACV,eAAgB,CAZxB,kDAgBQ,iBAAkB,CAClB,gBAAiB\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-orange: #ff6444;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' left, 'right' right);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon.active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n.filter-modal {\\n    &__column {\\n        display: flex;\\n        flex-direction: column;\\n        @media (max-width: 450px) {\\n            width: 80%;\\n        }\\n    }\\n\\n    &__select {\\n        cursor: pointer;\\n    }\\n\\n    &__arrow {\\n        min-width: 1.8rem;\\n        min-height: 1.8rem;\\n    }\\n\\n    &__selected-payment-methods {\\n        max-width: 350px;\\n        max-height: 45px;\\n        overflow: hidden;\\n        white-space: nowrap;\\n        text-overflow: ellipsis;\\n\\n        @media (max-width: 450px) {\\n            max-width: 300px;\\n        }\\n        @media (max-width: 400px) {\\n            max-width: 250px;\\n        }\\n    }\\n\\n    &__footer {\\n        &-button {\\n            display: flex;\\n            width: 100%;\\n        }\\n    }\\n\\n    &__row {\\n        align-items: center;\\n        border-bottom: 2px solid var(--general-section-5);\\n        display: flex;\\n        flex-direction: row;\\n        justify-content: space-between;\\n        min-height: 8rem;\\n        padding: 0 2.4rem;\\n        @media (max-width: 375px) {\\n            padding: 0 0 0 1.5rem;\\n            justify-content: initial;\\n        }\\n    }\\n\\n    &__toggle-label {\\n        margin: 0;\\n    }\\n\\n    &__checkbox-container {\\n        height: 36rem;\\n    }\\n}\\n\\n.dc-modal__container_payment-methods {\\n    .dc-modal-header {\\n        border-bottom: 2px solid var(--general-section-5);\\n        height: 5.6rem;\\n\\n        &__title {\\n            padding: 1.6rem 3.2rem;\\n        }\\n    }\\n\\n    .dc-modal-body {\\n        padding: 0;\\n        min-width: 33rem;\\n    }\\n\\n    .dc-checkbox {\\n        min-height: 4.9rem;\\n        padding: 0 1.6rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[2].use[4]!./filter-modal-no-results.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[2].use[4]!./filter-modal-search.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[2].use[4]!./filter-modal.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import * as React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { localize, Localize } from 'Components/i18next';\nimport { useStores } from 'Stores';\nimport PageReturn from 'Components/page-return/page-return.jsx';\n\nconst FilterModalHeader = () => {\n    const { buy_sell_store, my_profile_store } = useStores();\n\n    if (buy_sell_store.show_filter_payment_methods) {\n        return (\n            <PageReturn\n                onClick={() => {\n                    buy_sell_store.setShowFilterPaymentMethods(false);\n                    my_profile_store.setSearchTerm('');\n                    my_profile_store.setSearchResults([]);\n                }}\n                page_title={localize('Payment methods')}\n            />\n        );\n    }\n\n    return <Localize i18n_default_text='Filter' />;\n};\n\nexport default observer(FilterModalHeader);\n","import React from 'react';\nimport { Field as FormField, Formik, Form } from 'formik';\nimport debounce from 'lodash.debounce';\nimport { Icon, Input } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport { observer } from 'mobx-react-lite';\nimport { localize } from 'Components/i18next';\nimport { useStores } from 'Stores';\nimport './filter-modal-search.scss';\n\nconst FilterModalSearch = () => {\n    const { buy_sell_store, my_profile_store } = useStores();\n\n    const returnedFunction = debounce(() => {\n        my_profile_store.getPaymentMethodsList();\n    }, 1000);\n\n    const onSearch = ({ search }) => {\n        my_profile_store.setSearchTerm(search.trim());\n\n        if (!search.trim()) {\n            my_profile_store.setSearchResults([]);\n            return;\n        }\n\n        buy_sell_store.setIsFilterModalLoading(true);\n        returnedFunction();\n    };\n\n    const onSearchClear = setFieldValue => {\n        setFieldValue('search', '');\n        my_profile_store.setSearchTerm('');\n        my_profile_store.setSearchResults([]);\n    };\n\n    const onSearchKeyUp = submitForm => {\n        clearTimeout(typing_timer);\n\n        const typing_timer = setTimeout(() => {\n            submitForm();\n        }, 1000);\n    };\n\n    return (\n        <div className='filter-modal-search'>\n            <Formik initialValues={{ search: '' }} onSubmit={onSearch}>\n                {({ submitForm, values: { search }, setFieldValue }) => (\n                    <Form>\n                        <FormField name='search'>\n                            {({ field }) => (\n                                <Input\n                                    {...field}\n                                    className='filter-modal-search__field'\n                                    data-lpignore='true'\n                                    leading_icon={<Icon className='filter-modal-search__field-icon' icon='IcSearch' />}\n                                    name='search'\n                                    onFocus={submitForm}\n                                    onKeyUp={() => onSearchKeyUp(submitForm)}\n                                    placeholder={isDesktop() ? localize('Search payment method') : localize('Search')}\n                                    trailing_icon={\n                                        search ? (\n                                            <Icon\n                                                className='filter-modal-search__cross-icon'\n                                                color='secondary'\n                                                icon='IcCloseCircle'\n                                                onClick={() => onSearchClear(setFieldValue)}\n                                            />\n                                        ) : null\n                                    }\n                                    type='text'\n                                />\n                            )}\n                        </FormField>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default observer(FilterModalSearch);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from 'Components/i18next';\nimport { Text } from '@deriv/components';\nimport './filter-modal-no-results.scss';\n\nconst FilterModalNoResults = ({ text }) => (\n    <div className='filter-modal-no-result'>\n        <Text as='h2' size='s' align='center' weight='bold' className='filter-modal-no-result__title'>\n            {localize('No results for \"{{text}}\".', { text, interpolation: { escapeValue: false } })}\n        </Text>\n        <Text as='p' size='s' align='center' className='filter-modal-no-result__subtitle'>\n            {localize('Check your spelling or use a different term.')}\n        </Text>\n    </div>\n);\n\nFilterModalNoResults.propTypes = {\n    text: PropTypes.string,\n};\n\nexport default FilterModalNoResults;\n","import * as React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Checkbox, Icon, Loading, Modal, Text, ThemedScrollbars, ToggleSwitch } from '@deriv/components';\nimport { localize, Localize } from 'Components/i18next';\nimport { useStores } from 'Stores';\nimport FilterModalHeader from './filter-modal-header.jsx';\nimport FilterModalSearch from './filter-modal-search.jsx';\nimport FilterModalNoResults from './filter-modal-no-results.jsx';\nimport { useModalManagerContext } from 'Components/modal-manager/modal-manager-context';\n\nconst FilterModal = () => {\n    const { buy_sell_store, my_profile_store } = useStores();\n    const { hideModal, is_modal_open } = useModalManagerContext();\n\n    const [selected_methods, setSelectedMethods] = React.useState([]);\n    const [selected_methods_text, setSelectedMethodsText] = React.useState([]);\n\n    const onChange = payment_method => {\n        if (!buy_sell_store.filter_payment_methods.includes(payment_method.value)) {\n            buy_sell_store.filter_payment_methods.push(payment_method.value);\n            setSelectedMethods(prev_selected_methods => [...prev_selected_methods, payment_method.value]);\n            setSelectedMethodsText(prev_selected_methods_text => [...prev_selected_methods_text, payment_method.text]);\n        } else {\n            buy_sell_store.filter_payment_methods = buy_sell_store.filter_payment_methods.filter(\n                payment_method_id => payment_method_id !== payment_method.value\n            );\n            setSelectedMethods(prev_selected_methods => prev_selected_methods.filter(i => i !== payment_method.value));\n            setSelectedMethodsText(prev_selected_methods_text =>\n                prev_selected_methods_text.filter(i => i !== payment_method.text)\n            );\n        }\n    };\n\n    const onClickClear = () => {\n        buy_sell_store.filter_payment_methods = [];\n        setSelectedMethods([]);\n        setSelectedMethodsText([]);\n        buy_sell_store.setSelectedPaymentMethodValue([]);\n        buy_sell_store.setSelectedPaymentMethodText([]);\n    };\n\n    const onBackdropClick = () => {\n        buy_sell_store.setShowFilterPaymentMethods(false);\n        hideModal();\n        my_profile_store.setSearchTerm('');\n        if (selected_methods_text.length && !buy_sell_store.selected_payment_method_value.length) {\n            onClickClear();\n        }\n    };\n\n    React.useEffect(() => {\n        buy_sell_store.setShowFilterPaymentMethods(false);\n        my_profile_store.getPaymentMethodsList();\n\n        if (buy_sell_store.selected_payment_method_value.length) {\n            setSelectedMethods(buy_sell_store.selected_payment_method_value);\n            setSelectedMethodsText(buy_sell_store.selected_payment_method_text);\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const FilterModalResult = observer(() => {\n        if (buy_sell_store.is_filter_modal_loading) return <Loading is_fullscreen={false} />;\n        else if (my_profile_store.search_term) {\n            if (!my_profile_store.search_results || my_profile_store.search_results.length > 0) {\n                return my_profile_store.search_results?.map((payment_method, key) => {\n                    return (\n                        <Checkbox\n                            key={key}\n                            label={payment_method.text}\n                            onChange={() => onChange(payment_method)}\n                            value={selected_methods.includes(payment_method.value)}\n                        />\n                    );\n                });\n            }\n            return <FilterModalNoResults text={my_profile_store.search_term} />;\n        }\n        return my_profile_store.payment_methods_list_items.map((payment_method, key) => {\n            return (\n                <Checkbox\n                    name='checkbox'\n                    key={key}\n                    label={payment_method.text}\n                    onChange={() => onChange(payment_method)}\n                    value={selected_methods.includes(payment_method.value)}\n                />\n            );\n        });\n    });\n\n    return (\n        <Modal\n            className={'payment-methods'}\n            has_close_icon\n            height={'56rem'}\n            title={<FilterModalHeader />}\n            is_open={is_modal_open}\n            toggleModal={onBackdropClick}\n            width='44rem'\n        >\n            <Modal.Body>\n                {buy_sell_store.show_filter_payment_methods ? (\n                    <React.Fragment>\n                        <FilterModalSearch />\n                        <div className='filter-modal__checkbox-container'>\n                            <ThemedScrollbars is_scrollbar_hidden>\n                                <FilterModalResult />\n                            </ThemedScrollbars>\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        <div\n                            className='filter-modal__row filter-modal__select'\n                            onClick={() => buy_sell_store.setShowFilterPaymentMethods(true)}\n                        >\n                            <div className='filter-modal__column'>\n                                <Text color='prominent' size='xs'>\n                                    <Localize i18n_default_text='Payment methods' />\n                                </Text>\n                                {selected_methods_text.length === my_profile_store.payment_methods_list_items.length ? (\n                                    <Text color='less-prominent' size='xs'>\n                                        <Localize i18n_default_text='All' />\n                                    </Text>\n                                ) : (\n                                    <Text\n                                        className='filter-modal__selected-payment-methods'\n                                        color='less-prominent'\n                                        size='xs'\n                                    >\n                                        {selected_methods_text.join(', ')}\n                                    </Text>\n                                )}\n                            </div>\n                            <Icon className='filter-modal__arrow' icon='IcChevronRight' size={18} />\n                        </div>\n                        <div className='filter-modal__row'>\n                            <div className='filter-modal__column'>\n                                <Text color='prominent' size='xs'>\n                                    <Localize i18n_default_text='Matching ads' />\n                                </Text>\n                                <Text color='less-prominent' size='xs'>\n                                    <Localize i18n_default_text='Ads that match your Deriv P2P balance and limit.' />\n                                </Text>\n                            </div>\n                            <ToggleSwitch\n                                id='toggle-filter-modal'\n                                classNameButton='filter-modal__toggle-button'\n                                classNameLabel='filter-modal__toggle-label'\n                                handleToggle={() =>\n                                    buy_sell_store.setShouldUseClientLimits(!buy_sell_store.should_use_client_limits)\n                                }\n                                is_enabled={buy_sell_store.should_use_client_limits}\n                            />\n                        </div>\n                    </React.Fragment>\n                )}\n            </Modal.Body>\n            <Modal.Footer has_separator>\n                {buy_sell_store.show_filter_payment_methods ? (\n                    <Button className='filter-modal__footer-button' large secondary onClick={() => onClickClear()}>\n                        <Localize i18n_default_text='Clear' />\n                    </Button>\n                ) : (\n                    <Button.Group>\n                        <Button\n                            large\n                            secondary\n                            onClick={() => {\n                                buy_sell_store.onClickReset();\n                                onClickClear();\n                            }}\n                        >\n                            {localize('Reset')}\n                        </Button>\n                        <Button\n                            large\n                            primary\n                            onClick={() => {\n                                buy_sell_store.onClickApply(selected_methods, selected_methods_text);\n                                hideModal();\n                            }}\n                        >\n                            {localize('Apply')}\n                        </Button>\n                    </Button.Group>\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default observer(FilterModal);\n","import FilterModal from './filter-modal.jsx';\nimport './filter-modal.scss';\n\nexport default FilterModal;\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","api","content","__esModule","default","options","exports","locals","observer","useStores","buy_sell_store","my_profile_store","show_filter_payment_methods","onClick","setShowFilterPaymentMethods","setSearchTerm","setSearchResults","page_title","localize","i18n_default_text","returnedFunction","debounce","getPaymentMethodsList","className","Formik","initialValues","search","onSubmit","trim","setIsFilterModalLoading","submitForm","values","setFieldValue","Form","name","field","Input","leading_icon","Icon","icon","onFocus","onKeyUp","clearTimeout","typing_timer","setTimeout","onSearchKeyUp","placeholder","isDesktop","trailing_icon","color","onSearchClear","type","FilterModalNoResults","text","Text","as","size","align","weight","interpolation","escapeValue","propTypes","PropTypes","useModalManagerContext","hideModal","is_modal_open","React","selected_methods","setSelectedMethods","selected_methods_text","setSelectedMethodsText","onChange","payment_method","filter_payment_methods","includes","value","filter","payment_method_id","prev_selected_methods","i","prev_selected_methods_text","onClickClear","setSelectedPaymentMethodValue","setSelectedPaymentMethodText","selected_payment_method_value","length","selected_payment_method_text","FilterModalResult","is_filter_modal_loading","Loading","is_fullscreen","search_term","search_results","map","key","Checkbox","label","payment_methods_list_items","Modal","has_close_icon","height","title","is_open","toggleModal","width","ThemedScrollbars","is_scrollbar_hidden","join","ToggleSwitch","classNameButton","classNameLabel","handleToggle","setShouldUseClientLimits","should_use_client_limits","is_enabled","has_separator","Button","large","secondary","onClickReset","primary","onClickApply"],"sourceRoot":""}