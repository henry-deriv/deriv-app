{"version":3,"file":"trader/js/trader.contract.de9a1317397659d8aedf.js","mappings":"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","sources":["webpack://@deriv/trader/./src/App/Components/Elements/Errors/error-component.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Errors/index.js","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/unsupported-contract-modal.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/index.js","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-audit-item.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-details.jsx","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/logic.js","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-history.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-audit.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/index.js","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/swipeable-components.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/market-closed-contract-overlay.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/contract-drawer-card.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/contract-drawer.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/index.js","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/info-box-longcode.jsx","webpack://@deriv/trader/./src/Modules/Contract/Components/contract-error.jsx","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/info-box.jsx","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/index.js","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract-replay-widget.jsx","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract-replay.jsx","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract.jsx","webpack://@deriv/trader/./src/Modules/Contract/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? message[(message, refresh_message)] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nErrorComponent.propTypes = {\n    header: PropTypes.string,\n    is_dialog: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    redirect_label: PropTypes.string,\n    redirectOnClick: PropTypes.func,\n    should_show_refresh: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component.jsx';\n\nexport default ErrorComponent;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { website_name } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst UnsupportedContractModal = observer(({ onConfirm, onClose }) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, is_loading, is_unsupported_contract_modal_visible: is_visible } = ui;\n\n    return (\n        <Dialog\n            title={localize('We’re working on it')}\n            confirm_button_text={localize('Stay on {{website_domain}}', { website_domain: website_name })}\n            cancel_button_text={localize('Go to Binary.com')}\n            onConfirm={onConfirm}\n            onCancel={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n            is_closed_on_cancel\n            is_visible={is_visible}\n        >\n            <Localize i18n_default_text='You’ve selected a trade type that is currently unsupported, but we’re working on it.' />\n        </Dialog>\n    );\n});\n\nUnsupportedContractModal.propTypes = {\n    onClose: PropTypes.func,\n    onConfirm: PropTypes.func,\n};\n\nexport default UnsupportedContractModal;\n","import UnsupportedContractModal from './unsupported-contract-modal.jsx';\n\nexport default UnsupportedContractModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { formatDate, formatTime } from '@deriv/shared';\nimport { Text } from '@deriv/components';\n\nconst ContractAuditItem = ({ icon, id, label, timestamp, value, value2 }) => (\n    <div id={id} className='contract-audit__grid'>\n        {icon && <div className='contract-audit__icon'>{icon}</div>}\n        <div className='contract-audit__item'>\n            <Text size='xxxs' styles={{ lineHeight: 'unset' }} className='contract-audit__label'>\n                {label}\n            </Text>\n            <div className='contract-audit__value-wrapper'>\n                <Text weight='bold' size='xxs' line_height='m' color='prominent' className='contract-audit__value'>\n                    {value}\n                </Text>\n                {value2 && (\n                    <Text weight='bold' size='xxs' line_height='m' color='prominent' className='contract-audit__value2'>\n                        {value2}\n                    </Text>\n                )}\n            </div>\n        </div>\n        {timestamp && (\n            <div className='contract-audit__timestamp'>\n                <Text size='xxxs' align='right' line_height='xs' className='contract-audit__timestamp-value'>\n                    {formatDate(timestamp)}\n                </Text>\n                <Text size='xxxs' align='right' line_height='xs' className='contract-audit__timestamp-value'>\n                    {formatTime(timestamp)}\n                </Text>\n            </div>\n        )}\n    </div>\n);\n\nContractAuditItem.propTypes = {\n    icon: PropTypes.node,\n    id: PropTypes.string,\n    label: PropTypes.string,\n    timestamp: PropTypes.string,\n    value: PropTypes.PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.node]),\n    value2: PropTypes.PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nexport default ContractAuditItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Money, Icon, ThemedScrollbars } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    epochToMoment,\n    formatMoney,\n    toGMTFormat,\n    getCancellationPrice,\n    isAccumulatorContract,\n    getCurrencyDisplayCode,\n    isMobile,\n    isMultiplierContract,\n    isUserSold,\n    isEndedBeforeCancellationExpired,\n    isUserCancelled,\n} from '@deriv/shared';\nimport {\n    addCommaToNumber,\n    getBarrierLabel,\n    getBarrierValue,\n    isDigitType,\n} from 'App/Components/Elements/PositionsDrawer/helpers';\nimport ContractAuditItem from './contract-audit-item.jsx';\nimport { isCancellationExpired } from 'Stores/Modules/Trading/Helpers/logic';\n\nconst ContractDetails = ({ contract_end_time, contract_info, duration, duration_unit, exit_spot, is_vanilla }) => {\n    const {\n        commission,\n        contract_type,\n        currency,\n        entry_spot_display_value,\n        entry_tick_time,\n        exit_tick_time,\n        profit,\n        date_start,\n        tick_count,\n        tick_passed,\n        transaction_ids: { buy, sell } = {},\n        number_of_contracts,\n    } = contract_info;\n\n    const is_profit = profit >= 0;\n    const cancellation_price = getCancellationPrice(contract_info);\n    const ticks_duration_text = isAccumulatorContract(contract_type)\n        ? `${tick_passed}/${tick_count} ${localize('ticks')}`\n        : `${tick_count} ${tick_count < 2 ? localize('tick') : localize('ticks')}`;\n\n    const getLabel = () => {\n        if (isUserSold(contract_info) && isEndedBeforeCancellationExpired(contract_info))\n            return localize('Deal cancellation');\n        if (isUserCancelled(contract_info)) return localize('Deal cancellation (executed)');\n        if (isCancellationExpired(contract_info)) return localize('Deal cancellation (expired)');\n        return localize('Deal cancellation (active)');\n    };\n\n    return (\n        <ThemedScrollbars is_bypassed={isMobile()}>\n            <div className='contract-audit__tabs-content'>\n                <ContractAuditItem\n                    id='dt_id_label'\n                    icon={<Icon icon='IcContractId' size={24} />}\n                    label={localize('Reference ID')}\n                    value={localize('{{buy_value}} (Buy)', { buy_value: buy })}\n                    value2={sell ? localize('{{sell_value}} (Sell)', { sell_value: sell }) : undefined}\n                />\n                {isMultiplierContract(contract_type) ? (\n                    <React.Fragment>\n                        <ContractAuditItem\n                            id='dt_commission_label'\n                            icon={<Icon icon='IcContractCommission' size={24} />}\n                            label={localize('Commission')}\n                            value={<Money amount={commission} currency={currency} show_currency />}\n                        />\n                        {!!cancellation_price && (\n                            <ContractAuditItem\n                                id='dt_cancellation_label'\n                                icon={<Icon icon='IcContractSafeguard' size={24} />}\n                                label={getLabel()}\n                                value={<Money amount={cancellation_price} currency={currency} />}\n                            />\n                        )}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        {(!isAccumulatorContract(contract_type) || !isNaN(contract_end_time)) && (\n                            <ContractAuditItem\n                                id='dt_duration_label'\n                                icon={<Icon icon='IcContractDuration' size={24} />}\n                                label={localize('Duration')}\n                                value={tick_count > 0 ? ticks_duration_text : `${duration} ${duration_unit}`}\n                            />\n                        )}\n                        {is_vanilla && (\n                            <React.Fragment>\n                                <ContractAuditItem\n                                    id='dt_bt_label'\n                                    icon={<Icon icon='IcContractStrike' size={24} />}\n                                    label={getBarrierLabel(contract_info)}\n                                    value={getBarrierValue(contract_info) || ' - '}\n                                />\n                                <ContractAuditItem\n                                    id='dt_bt_label'\n                                    icon={<Icon icon='IcContractPayout' size={24} />}\n                                    label={localize('Payout per point')}\n                                    value={\n                                        `${formatMoney(currency, number_of_contracts, true)} ${getCurrencyDisplayCode(\n                                            currency\n                                        )}` || ' - '\n                                    }\n                                />\n                            </React.Fragment>\n                        )}\n                        {!isAccumulatorContract(contract_type) && !is_vanilla && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={\n                                    isDigitType(contract_type) ? (\n                                        <Icon icon='IcContractTarget' size={24} />\n                                    ) : (\n                                        <Icon icon='IcContractBarrier' size={24} />\n                                    )\n                                }\n                                label={getBarrierLabel(contract_info)}\n                                value={getBarrierValue(contract_info) || ' - '}\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n                <ContractAuditItem\n                    id='dt_start_time_label'\n                    icon={<Icon icon='IcContractStartTime' size={24} />}\n                    label={localize('Start time')}\n                    value={toGMTFormat(epochToMoment(date_start)) || ' - '}\n                />\n                {!isDigitType(contract_type) && (\n                    <ContractAuditItem\n                        id='dt_entry_spot_label'\n                        icon={<Icon icon='IcContractEntrySpot' size={24} />}\n                        label={localize('Entry spot')}\n                        value={addCommaToNumber(entry_spot_display_value) || ' - '}\n                        value2={toGMTFormat(epochToMoment(entry_tick_time)) || ' - '}\n                    />\n                )}\n                {!isNaN(exit_spot) && (\n                    <ContractAuditItem\n                        id='dt_exit_spot_label'\n                        icon={<Icon icon='IcContractExitSpot' size={24} />}\n                        label={localize('Exit spot')}\n                        value={addCommaToNumber(exit_spot) || ' - '}\n                        value2={toGMTFormat(epochToMoment(exit_tick_time)) || ' - '}\n                    />\n                )}\n                {!isNaN(contract_end_time) && (\n                    <ContractAuditItem\n                        id='dt_exit_time_label'\n                        icon={<Icon icon='IcContractExitTime' color={is_profit ? 'green' : 'red'} size={24} />}\n                        label={localize('Exit time')}\n                        value={toGMTFormat(epochToMoment(contract_end_time)) || ' - '}\n                    />\n                )}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n\nContractDetails.propTypes = {\n    contract_end_time: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    contract_info: PropTypes.object,\n    date_start: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    duration_unit: PropTypes.string,\n    exit_spot: PropTypes.string,\n    is_vanilla: PropTypes.bool,\n};\n\nexport default ContractDetails;\n","import ServerTime from '_common/base/server_time';\n\nexport const isCancellationExpired = contract_info =>\n    !!(contract_info.cancellation.date_expiry < ServerTime.get().unix());\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon, Money, ThemedScrollbars, Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\n\nimport { localize } from '@deriv/translations';\nimport ContractAuditItem from './contract-audit-item.jsx';\n\nconst ContractHistory = ({ currency, history = [] }) => {\n    if (!history.length) {\n        return (\n            <div className='contract-audit__empty'>\n                <Icon icon='IcBox' size={48} color='secondary' />\n                <h4 className='contract-audit__empty-header'>{localize('No history')}</h4>\n                <Text align='center' line_height='s' color='less-prominent' size='xxs'>\n                    {localize('You have yet to update either take profit or stop loss')}\n                </Text>\n            </div>\n        );\n    }\n    return (\n        <ThemedScrollbars is_bypassed={isMobile()}>\n            <div className='contract-audit__tabs-content'>\n                {history.map((item, key) => (\n                    <ContractAuditItem\n                        key={key}\n                        id={`dt_history_label_${key}`}\n                        label={item.display_name}\n                        timestamp={+item.order_date}\n                        value={\n                            Math.abs(+item.order_amount) !== 0 ? (\n                                <React.Fragment>\n                                    {+item.order_amount < 0 && <strong>-</strong>}\n                                    <Money amount={item.order_amount} currency={currency} />\n                                    {item.value && (\n                                        <React.Fragment>\n                                            <br />\n                                            <span>({item.value})</span>\n                                        </React.Fragment>\n                                    )}\n                                </React.Fragment>\n                            ) : (\n                                localize('Cancelled')\n                            )\n                        }\n                    />\n                ))}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n\nContractHistory.propTypes = {\n    currency: PropTypes.string,\n    history: PropTypes.array,\n};\n\nexport default ContractHistory;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Tabs } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { WS } from '@deriv/shared';\nimport ContractDetails from './contract-details.jsx';\nimport ContractHistory from './contract-history.jsx';\n\nconst ContractAudit = ({\n    contract_update_history,\n    has_result,\n    is_accumulator,\n    is_multiplier,\n    toggleHistoryTab,\n    ...props\n}) => {\n    const { contract_id, currency } = props.contract_info;\n    const [update_history, setUpdateHistory] = React.useState([]);\n\n    const getSortedUpdateHistory = history => history.sort((a, b) => b.order_date - a.order_date);\n\n    React.useEffect(() => {\n        if (!!contract_update_history.length && contract_update_history.length > update_history.length)\n            setUpdateHistory(getSortedUpdateHistory(contract_update_history));\n    }, [contract_update_history, update_history]);\n\n    const onTabItemClick = tab_index => {\n        toggleHistoryTab(tab_index);\n        if (tab_index) {\n            WS.contractUpdateHistory(contract_id).then(response => {\n                setUpdateHistory(getSortedUpdateHistory(response.contract_update_history));\n            });\n        }\n    };\n\n    if (!has_result) return null;\n\n    if (!is_multiplier && !is_accumulator) {\n        return (\n            <div className='contract-audit__wrapper'>\n                <ContractDetails {...props} />\n            </div>\n        );\n    }\n    return (\n        <div className='contract-audit__wrapper'>\n            <Tabs top className='contract-audit__tabs' onTabItemClick={onTabItemClick}>\n                <div label={localize('Details')}>\n                    <ContractDetails {...props} />\n                </div>\n                <div label={localize('History')}>\n                    <ContractHistory currency={currency} history={update_history} />\n                </div>\n            </Tabs>\n        </div>\n    );\n};\n\nContractAudit.propTypes = {\n    contract_info: PropTypes.object,\n    contract_update_history: PropTypes.array,\n    has_result: PropTypes.bool,\n    is_accumulator: PropTypes.bool,\n    is_multiplier: PropTypes.bool,\n    toggleHistoryTab: PropTypes.func,\n};\n\nexport default ContractAudit;\n","import ContractAudit from './contract-audit.jsx';\n\nexport default ContractAudit;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SwipeableWrapper } from '@deriv/components';\n\n/**\n * Swipeable components\n */\nexport const SwipeableContractAudit = ({ is_multiplier, children, onSwipedDown }) => {\n    const swipe_handlers = SwipeableWrapper.useSwipeable({\n        onSwipedDown,\n    });\n\n    const target_el = document.getElementById('dt_contract_drawer_audit');\n\n    if (!target_el) return null;\n\n    return ReactDOM.createPortal(\n        <div className='contract-audit-card'>\n            <div\n                {...swipe_handlers}\n                className={classNames('contract-audit-card__container', {\n                    'contract-audit-card__container--is-multiplier': is_multiplier,\n                })}\n            >\n                {children}\n            </div>\n        </div>,\n        target_el\n    );\n};\n\nSwipeableContractAudit.propTypes = {\n    is_multiplier: PropTypes.bool,\n    children: PropTypes.node,\n    onSwipedDown: PropTypes.func,\n};\n\nexport const SwipeableContractDrawer = ({ children, onSwipedDown, onSwipedUp }) => {\n    const swipe_handlers = SwipeableWrapper.useSwipeable({\n        onSwipedDown,\n        onSwipedUp,\n    });\n\n    return <div {...swipe_handlers}>{children}</div>;\n};\n\nSwipeableContractDrawer.propTypes = {\n    children: PropTypes.node,\n    onSwipedDown: PropTypes.func,\n    onSwipedUp: PropTypes.func,\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n// eslint-disable-next-line import/no-useless-path-segments\nimport MarketCountdownTimer from '../market-countdown-timer.jsx';\n\nconst MarketClosedContractOverlay = ({ symbol }) => {\n    const [is_timer_loading, setIsTimerLoading] = React.useState(true);\n\n    return (\n        <div\n            className={classNames('contract-card__market-closed', {\n                'contract-card__market-closed--loading': is_timer_loading,\n            })}\n        >\n            <Text\n                align='center'\n                as='p'\n                className='contract-card__market-closed__title'\n                styles={{ color: 'var(--brand-orange)' }}\n                weight='bold'\n            >\n                <Localize i18n_default_text='Market is closed' />\n            </Text>\n            <MarketCountdownTimer setIsTimerLoading={setIsTimerLoading} symbol={symbol} />\n        </div>\n    );\n};\n\nMarketClosedContractOverlay.propTypes = {\n    symbol: PropTypes.string,\n};\n\nexport default MarketClosedContractOverlay;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { DesktopWrapper, MobileWrapper, Collapsible, ContractCard, useHover } from '@deriv/components';\nimport { isCryptoContract, isDesktop, getEndTime, getSymbolDisplayName } from '@deriv/shared';\nimport { getCardLabels, getContractTypeDisplay } from 'Constants/contract';\nimport { getMarketInformation } from 'Utils/Helpers/market-underlying';\nimport { SwipeableContractDrawer } from './swipeable-components.jsx';\nimport MarketClosedContractOverlay from './market-closed-contract-overlay.jsx';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nconst ContractDrawerCard = observer(\n    ({\n        contract_info,\n        contract_update,\n        currency,\n        is_accumulator,\n        is_market_closed,\n        is_mobile,\n        is_multiplier,\n        is_vanilla,\n        is_sell_requested,\n        is_collapsed,\n        onClickCancel,\n        onClickSell,\n        onSwipedUp,\n        onSwipedDown,\n        result,\n        server_time,\n        status,\n        toggleContractAuditDrawer,\n    }) => {\n        const { ui, contract_trade } = useStore();\n        const { active_symbols } = useTraderStore();\n        const {\n            addToast,\n            current_focus,\n            removeToast,\n            should_show_cancellation_warning,\n            setCurrentFocus,\n            toggleCancellationWarning,\n        } = ui;\n        const { getContractById } = contract_trade;\n        const [hover_ref, should_hide_closed_overlay] = useHover();\n\n        const { profit, underlying: symbol } = contract_info;\n        const is_sold = !!getEndTime(contract_info);\n        const display_name = getSymbolDisplayName(\n            active_symbols,\n            getMarketInformation(contract_info.shortcode).underlying\n        );\n\n        const is_crypto = isCryptoContract(contract_info.underlying);\n        const has_progress_slider = !is_multiplier || (is_crypto && is_multiplier);\n\n        const card_header = (\n            <ContractCard.Header\n                contract_info={contract_info}\n                display_name={display_name}\n                getCardLabels={getCardLabels}\n                getContractTypeDisplay={getContractTypeDisplay}\n                has_progress_slider={isDesktop() && has_progress_slider}\n                is_mobile={is_mobile}\n                is_sell_requested={is_sell_requested}\n                is_sold={is_sold}\n                onClickSell={onClickSell}\n                server_time={server_time}\n            />\n        );\n\n        const card_body = (\n            <ContractCard.Body\n                addToast={addToast}\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency}\n                current_focus={current_focus}\n                getCardLabels={getCardLabels}\n                getContractById={getContractById}\n                is_accumulator={is_accumulator}\n                is_mobile={is_mobile}\n                is_multiplier={is_multiplier}\n                is_sold={is_sold}\n                is_vanilla={is_vanilla}\n                has_progress_slider={has_progress_slider}\n                removeToast={removeToast}\n                server_time={server_time}\n                setCurrentFocus={setCurrentFocus}\n                should_show_cancellation_warning={should_show_cancellation_warning}\n                status={status}\n                toggleCancellationWarning={toggleCancellationWarning}\n            />\n        );\n\n        const card_footer = (\n            <ContractCard.Footer\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                is_sell_requested={is_sell_requested}\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n                status={status}\n            />\n        );\n\n        const contract_el = (\n            <React.Fragment>\n                {card_header}\n                {card_body}\n            </React.Fragment>\n        );\n\n        const contract_card = (\n            <ContractCard\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                profit_loss={profit}\n                should_show_result_overlay={false}\n            >\n                <div\n                    className={classNames('dc-contract-card', {\n                        'dc-contract-card--green': is_mobile && !is_multiplier && profit > 0 && !result,\n                        'dc-contract-card--red': is_mobile && !is_multiplier && profit < 0 && !result,\n                        'contract-card__market-closed--disabled': is_market_closed && should_hide_closed_overlay,\n                    })}\n                    ref={hover_ref}\n                >\n                    {is_market_closed && !getEndTime(contract_info) && (\n                        <div\n                            className={classNames({\n                                'contract-card__market-closed--hidden': isDesktop() && should_hide_closed_overlay,\n                            })}\n                        >\n                            <MarketClosedContractOverlay symbol={symbol} />\n                        </div>\n                    )}\n                    {contract_el}\n                    {card_footer}\n                </div>\n            </ContractCard>\n        );\n\n        const has_swipeable_drawer = is_sold || is_multiplier || is_accumulator || is_vanilla;\n\n        return (\n            <React.Fragment>\n                <DesktopWrapper>{contract_card}</DesktopWrapper>\n                <MobileWrapper>\n                    <SwipeableContractDrawer\n                        onSwipedUp={has_swipeable_drawer ? onSwipedUp : undefined}\n                        onSwipedDown={has_swipeable_drawer ? onSwipedDown : undefined}\n                    >\n                        {has_swipeable_drawer && (\n                            <Collapsible.ArrowButton onClick={toggleContractAuditDrawer} is_collapsed={is_collapsed} />\n                        )}\n                        {contract_card}\n                    </SwipeableContractDrawer>\n                </MobileWrapper>\n            </React.Fragment>\n        );\n    }\n);\n\nContractDrawerCard.propTypes = {\n    currency: PropTypes.string,\n    is_accumulator: PropTypes.bool,\n    is_collapsed: PropTypes.bool,\n    onClickCancel: PropTypes.func,\n    onClickSell: PropTypes.func,\n};\nexport default ContractDrawerCard;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, MobileWrapper, Div100vhContainer } from '@deriv/components';\nimport {\n    isUserSold,\n    isMobile,\n    getDurationPeriod,\n    getDurationTime,\n    getDurationUnitText,\n    getEndTime,\n} from '@deriv/shared';\nimport ContractAudit from 'App/Components/Elements/ContractAudit';\nimport { PositionsCardLoader } from 'App/Components/Elements/ContentLoader';\nimport ContractDrawerCard from './contract-drawer-card.jsx';\nimport { SwipeableContractAudit } from './swipeable-components.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst ContractDrawer = observer(\n    ({\n        contract_info,\n        contract_update,\n        contract_update_history,\n        is_accumulator,\n        is_sell_requested,\n        is_dark_theme,\n        is_market_closed,\n        is_multiplier,\n        is_vanilla,\n        onClickCancel,\n        onClickSell,\n        status,\n        toggleHistoryTab,\n    }) => {\n        const { common, ui } = useStore();\n        const { server_time } = common;\n        const { is_mobile } = ui;\n        const { currency, exit_tick_display_value, is_sold } = contract_info;\n        const contract_drawer_ref = React.useRef();\n        const contract_drawer_card_ref = React.useRef();\n        const [should_show_contract_audit, setShouldShowContractAudit] = React.useState(false);\n\n        const getBodyContent = () => {\n            const exit_spot =\n                isUserSold(contract_info) && !is_multiplier && !is_accumulator ? '-' : exit_tick_display_value;\n\n            const contract_audit = (\n                <ContractAudit\n                    contract_info={contract_info}\n                    contract_update_history={contract_update_history}\n                    contract_end_time={getEndTime(contract_info)}\n                    is_accumulator={is_accumulator}\n                    is_dark_theme={is_dark_theme}\n                    is_multiplier={is_multiplier}\n                    is_open\n                    duration={getDurationTime(contract_info)}\n                    duration_unit={getDurationUnitText(getDurationPeriod(contract_info))}\n                    exit_spot={exit_spot}\n                    has_result={!!is_sold || is_multiplier || is_vanilla || is_accumulator}\n                    toggleHistoryTab={toggleHistoryTab}\n                    is_vanilla={is_vanilla}\n                />\n            );\n\n            return (\n                <React.Fragment>\n                    <ContractDrawerCard\n                        contract_info={contract_info}\n                        contract_update={contract_update}\n                        currency={currency}\n                        is_accumulator={is_accumulator}\n                        is_mobile={is_mobile}\n                        is_market_closed={is_market_closed}\n                        is_multiplier={is_multiplier}\n                        is_vanilla={is_vanilla}\n                        is_sell_requested={is_sell_requested}\n                        is_collapsed={should_show_contract_audit}\n                        onClickCancel={onClickCancel}\n                        onClickSell={onClickSell}\n                        onSwipedUp={() => setShouldShowContractAudit(true)}\n                        onSwipedDown={() => setShouldShowContractAudit(false)}\n                        server_time={server_time}\n                        status={status}\n                        toggleContractAuditDrawer={() => setShouldShowContractAudit(!should_show_contract_audit)}\n                    />\n                    <DesktopWrapper>{contract_audit}</DesktopWrapper>\n                </React.Fragment>\n            );\n        };\n\n        if (!contract_info) return null;\n\n        // For non-binary contract, the status is always null, so we check for is_expired in contract_info\n        const fallback_result = contract_info.status || contract_info.is_expired;\n\n        const exit_spot =\n            isUserSold(contract_info) && !is_multiplier && !is_accumulator ? '-' : exit_tick_display_value;\n\n        const contract_audit = (\n            <ContractAudit\n                contract_info={contract_info}\n                contract_update_history={contract_update_history}\n                contract_end_time={getEndTime(contract_info)}\n                is_accumulator={is_accumulator}\n                is_dark_theme={is_dark_theme}\n                is_multiplier={is_multiplier}\n                is_open\n                duration={getDurationTime(contract_info)}\n                duration_unit={getDurationUnitText(getDurationPeriod(contract_info))}\n                exit_spot={exit_spot}\n                has_result={!!is_sold || is_multiplier || is_vanilla || is_accumulator}\n                toggleHistoryTab={toggleHistoryTab}\n                is_vanilla={is_vanilla}\n            />\n        );\n\n        const body_content = fallback_result ? (\n            getBodyContent()\n        ) : (\n            <div className='contract-card'>\n                <PositionsCardLoader is_dark_theme={is_dark_theme} speed={2} />\n            </div>\n        );\n\n        const contract_drawer = (\n            <CSSTransition in={should_show_contract_audit} timeout={250} classNames='contract-drawer__transition'>\n                <div\n                    id='dt_contract_drawer'\n                    className={classNames('contract-drawer', {\n                        'contract-drawer--with-collapsible-btn':\n                            !!getEndTime(contract_info) ||\n                            ((is_multiplier || is_vanilla || is_accumulator) && isMobile()),\n                        'contract-drawer--is-multiplier': is_multiplier && isMobile(),\n                        'contract-drawer--is-multiplier-sold': is_multiplier && isMobile() && getEndTime(contract_info),\n                    })}\n                    style={{\n                        transform:\n                            should_show_contract_audit &&\n                            contract_drawer_ref.current &&\n                            contract_drawer_card_ref.current &&\n                            `translateY(calc(${contract_drawer_card_ref.current.clientHeight}px - ${contract_drawer_ref.current.clientHeight}px))`,\n                    }}\n                    ref={contract_drawer_ref}\n                >\n                    <div className='contract-drawer__body' ref={contract_drawer_card_ref}>\n                        {body_content}\n                    </div>\n                    {should_show_contract_audit && (\n                        <MobileWrapper>\n                            <div id='dt_contract_drawer_audit'>\n                                <SwipeableContractAudit is_multiplier={is_multiplier}>\n                                    {contract_audit}\n                                </SwipeableContractAudit>\n                            </div>\n                        </MobileWrapper>\n                    )}\n                </div>\n            </CSSTransition>\n        );\n\n        return (\n            <React.Fragment>\n                <DesktopWrapper>{contract_drawer}</DesktopWrapper>\n                <MobileWrapper>\n                    <div\n                        style={{\n                            height: contract_drawer_card_ref.current?.clientHeight,\n                        }}\n                    >\n                        <Div100vhContainer height_offset='40px' is_bypassed={!contract_drawer_card_ref.current}>\n                            {contract_drawer}\n                        </Div100vhContainer>\n                    </div>\n                </MobileWrapper>\n            </React.Fragment>\n        );\n    }\n);\n\nContractDrawer.propTypes = {\n    is_accumulator: PropTypes.bool,\n    is_multiplier: PropTypes.bool,\n    is_vanilla: PropTypes.bool,\n    toggleHistoryTab: PropTypes.func,\n};\n\nexport default withRouter(ContractDrawer);\n","import ContractDrawer from './contract-drawer.jsx';\n\nexport default ContractDrawer;\n","import { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isVanillaContract } from '@deriv/shared';\n\nconst generateMessageForVanillaTrade = contract_info => (\n    <Localize\n        i18n_default_text='<0>For {{contract_type}}:</0> Get a payout if {{index_name}} is {{strike_status}} than the strike price at the expiry time. Your payout is zero if the market is {{market_status}} or equal to the strike price at the expiry time. You will start making a profit when the payout is higher than your stake.'\n        components={[<strong key={0} />]}\n        values={{\n            contract_type: contract_info.contract_type === 'VANILLALONGCALL' ? localize('Call') : localize('Put'),\n            index_name: contract_info.display_name,\n            strike_status: contract_info.contract_type === 'VANILLALONGCALL' ? localize('higher') : localize('lower'),\n            market_status: contract_info.contract_type === 'VANILLALONGCALL' ? localize('lower') : localize('higher'),\n        }}\n    />\n);\n\nconst InfoBoxLongcode = ({ contract_info }) => {\n    const is_vanilla = isVanillaContract(contract_info.contract_type);\n    return (\n        <div className='info-box-longcode'>\n            <Icon icon='IcContractFlag' className='info-box-longcode-icon' size={24} />\n            <Text size='xs' className='info-box-longcode-text'>\n                {is_vanilla ? generateMessageForVanillaTrade(contract_info) : contract_info.longcode}\n            </Text>\n        </div>\n    );\n};\n\nInfoBoxLongcode.propTypes = {\n    contract_info: PropTypes.object,\n    longcode: PropTypes.string,\n    is_vanilla: PropTypes.bool,\n};\n\nexport default observer(InfoBoxLongcode);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\n\n// TODO: move to App/Components, Refactor svg, consider other types, more features;\n// when a general design and more icons for all messages is ready\nconst ContractError = ({ message = '', onClickClose }) =>\n    !message ? null : (\n        <div className='message'>\n            <div className='message-icon'>\n                <svg width='16' height='16' viewBox='0 0 16 16'>\n                    <g fill='none' fillRule='evenodd'>\n                        <circle cx='8' cy='8' r='8' fill='#F44336' />\n                        <path\n                            fill='#FFF'\n                            fillRule='nonzero'\n                            d='M8 7.293l3.146-3.147a.5.5 0 0 1 .708.708L8.707 8l3.147 3.146a.5.5 0 0 1-.708.708L8 8.707l-3.146 3.147a.5.5 0 0 1-.708-.708L7.293 8 4.146 4.854a.5.5 0 1 1 .708-.708L8 7.293z'\n                        />\n                    </g>\n                </svg>\n            </div>\n            <div className='message-text'>{message}</div>\n            <div className='message-close' onClick={onClickClose}>\n                <Icon icon='IcCross' />\n            </div>\n        </div>\n    );\n\nContractError.propTypes = {\n    message: PropTypes.string,\n    onClickClose: PropTypes.func,\n};\n\nexport default ContractError;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { SlideIn } from 'App/Components/Animations';\nimport InfoBoxLongcode from './info-box-longcode.jsx';\nimport ContractError from '../contract-error.jsx';\n\nconst InfoBox = ({ contract_info, error_message, removeError }) => {\n    const is_ready = !!contract_info.longcode;\n    return (\n        <SlideIn is_visible={is_ready} className='info-box-container' keyname='info-box-container'>\n            {!!contract_info.contract_type && (\n                <div className='info-box'>\n                    <InfoBoxLongcode contract_info={contract_info} />\n                </div>\n            )}\n            <ContractError message={error_message} onClickClose={removeError} />\n        </SlideIn>\n    );\n};\n\nInfoBox.propTypes = {\n    contract_info: PropTypes.object,\n    error_message: PropTypes.string,\n    removeError: PropTypes.func,\n};\n\nexport default InfoBox;\n","import InfoBox from './info-box.jsx';\n\nexport default InfoBox;\n","import React from 'react';\nimport Digits from 'Modules/Contract/Components/Digits';\nimport InfoBox from 'Modules/Contract/Components/InfoBox';\nimport BottomWidgets from '../../SmartChart/Components/bottom-widgets.jsx';\nimport TopWidgets from '../../SmartChart/Components/top-widgets.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nexport const DigitsWidget = observer(() => {\n    const { contract_replay } = useStore();\n    const { contract_store } = contract_replay;\n    const { contract_info, digits_info, display_status, is_digit_contract, is_ended } = contract_store;\n\n    return (\n        <Digits\n            is_digit_contract={is_digit_contract}\n            is_ended={is_ended}\n            contract_info={contract_info}\n            digits_info={digits_info}\n            display_status={display_status}\n        />\n    );\n});\n\nexport const InfoBoxWidget = observer(() => {\n    const { contract_replay } = useStore();\n    const { is_vanilla } = useTraderStore();\n    const { contract_store, removeErrorMessage: removeError, error_message } = contract_replay;\n    const { contract_info } = contract_store;\n\n    return (\n        <InfoBox\n            contract_info={contract_info}\n            error_message={error_message}\n            removeError={removeError}\n            is_vanilla={is_vanilla}\n        />\n    );\n});\n\n// Chart widgets passed into SmartCharts\nexport const ChartTopWidgets = () => <TopWidgets InfoBox={<InfoBoxWidget />} is_title_enabled={false} />;\nexport const ChartBottomWidgets = () => <BottomWidgets Widget={<DigitsWidget />} />;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    PageOverlay,\n    SwipeableWrapper,\n    FadeWrapper,\n    usePrevious,\n} from '@deriv/components';\nimport {\n    getDurationPeriod,\n    getDurationUnitText,\n    getPlatformRedirect,\n    isAccumulatorContract,\n    isDesktop,\n    isEmptyObject,\n    isMobile,\n    isMultiplierContract,\n    isVanillaContract,\n    urlFor,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport ChartLoader from 'App/Components/Elements/chart-loader.jsx';\nimport ContractDrawer from 'App/Components/Elements/ContractDrawer';\nimport UnsupportedContractModal from 'App/Components/Elements/Modals/UnsupportedContractModal';\nimport { SmartChart } from 'Modules/SmartChart';\nimport { ChartBottomWidgets, ChartTopWidgets, DigitsWidget, InfoBoxWidget } from './contract-replay-widget.jsx';\nimport ChartMarker from 'Modules/SmartChart/Components/Markers/marker.jsx';\nimport allMarkers from 'Modules/SmartChart/Components/all-markers.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst ContractReplay = observer(({ contract_id }) => {\n    const { common, contract_replay, ui } = useStore();\n    const { contract_store } = contract_replay;\n    const {\n        is_market_closed,\n        is_sell_requested,\n        is_valid_to_cancel,\n        onClickCancel,\n        onClickSell,\n        onMount,\n        onUnmount,\n        indicative_status,\n        is_chart_loading,\n        is_forward_starting,\n    } = contract_replay;\n    const { contract_info, contract_update, contract_update_history, is_digit_contract } = contract_store;\n    const { routeBackInApp } = common;\n    const { is_dark_mode_on: is_dark_theme, notification_messages_ui: NotificationMessages, toggleHistoryTab } = ui;\n\n    const [is_visible, setIsVisible] = React.useState(false);\n    const history = useHistory();\n\n    React.useEffect(() => {\n        const url_contract_id = +/[^/]*$/.exec(location.pathname)[0];\n        onMount(contract_id || url_contract_id);\n        setIsVisible(true);\n\n        return () => {\n            setIsVisible(false);\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contract_id, location, onMount, onUnmount]);\n\n    const onClickClose = () => {\n        setIsVisible(false);\n        const is_from_table_row = !isEmptyObject(location.state) ? location.state.from_table_row : false;\n        return is_from_table_row ? history.goBack() : routeBackInApp(history);\n    };\n\n    if (!contract_info.underlying) return null;\n\n    const is_accumulator = isAccumulatorContract(contract_info.contract_type);\n    const is_multiplier = isMultiplierContract(contract_info.contract_type);\n    const is_vanilla = isVanillaContract(contract_info.contract_type);\n\n    const contract_drawer_el = (\n        <ContractDrawer\n            contract_info={contract_info}\n            contract_update={contract_update}\n            contract_update_history={contract_update_history}\n            is_accumulator={is_accumulator}\n            is_chart_loading={is_chart_loading}\n            is_dark_theme={is_dark_theme}\n            is_market_closed={is_market_closed}\n            is_multiplier={is_multiplier}\n            is_sell_requested={is_sell_requested}\n            is_valid_to_cancel={is_valid_to_cancel}\n            is_vanilla={is_vanilla}\n            onClickCancel={onClickCancel}\n            onClickSell={onClickSell}\n            status={indicative_status}\n            toggleHistoryTab={toggleHistoryTab}\n        />\n    );\n\n    const unsupportedContractOnConfirm = () => {\n        history.goBack();\n    };\n\n    const unsupportedContractOnClose = () => {\n        const statementws_url = urlFor('user/statementws', { legacy: true });\n        window.open(statementws_url, '_blank');\n    };\n\n    return (\n        <FadeWrapper is_visible={is_visible} className='contract-details-wrapper' keyname='contract-details-wrapper'>\n            <MobileWrapper>\n                <NotificationMessages />\n            </MobileWrapper>\n            <UnsupportedContractModal\n                onConfirm={unsupportedContractOnConfirm}\n                onClose={unsupportedContractOnClose}\n                is_visible={is_forward_starting}\n            />\n            <PageOverlay\n                id='dt_contract_replay_container'\n                header={localize('Contract details')}\n                onClickClose={onClickClose}\n            >\n                <Div100vhContainer\n                    className='trade-container__replay'\n                    is_disabled={isDesktop()}\n                    height_offset='80px' // * 80px = header + contract details header heights in mobile\n                >\n                    <DesktopWrapper>{contract_drawer_el}</DesktopWrapper>\n                    <MobileWrapper>\n                        <div\n                            className={classNames('contract-drawer__mobile-wrapper', {\n                                'contract-drawer__mobile-wrapper--is-multiplier': isMobile() && is_multiplier,\n                            })}\n                        >\n                            {contract_drawer_el}\n                        </div>\n                    </MobileWrapper>\n                    <React.Suspense fallback={<div />}>\n                        <div\n                            className={classNames('replay-chart__container', {\n                                'replay-chart__container--is-multiplier': isMobile() && is_multiplier,\n                                'vanilla-trade-chart': is_vanilla,\n                            })}\n                        >\n                            <DesktopWrapper>\n                                <NotificationMessages />\n                            </DesktopWrapper>\n                            <ChartLoader is_dark={is_dark_theme} is_visible={is_chart_loading} />\n                            <DesktopWrapper>\n                                <ReplayChart is_dark_theme={is_dark_theme} is_accumulator_contract={is_accumulator} />\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                {is_digit_contract ? (\n                                    <React.Fragment>\n                                        <InfoBoxWidget />\n                                        <SwipeableWrapper className='replay-chart__container-swipeable-wrapper'>\n                                            <DigitsWidget />\n                                            <ReplayChart />\n                                        </SwipeableWrapper>\n                                    </React.Fragment>\n                                ) : (\n                                    <ReplayChart\n                                        is_dark_theme={is_dark_theme}\n                                        is_accumulator_contract={is_accumulator}\n                                    />\n                                )}\n                            </MobileWrapper>\n                        </div>\n                    </React.Suspense>\n                </Div100vhContainer>\n            </PageOverlay>\n        </FadeWrapper>\n    );\n});\n\nContractReplay.propTypes = {\n    contract_id: PropTypes.number,\n};\n\nexport default ContractReplay;\n\nconst DelayedAccuBarriersMarker = React.memo(\n    ({ marker_component: MarkerComponent, previous_spot, ...props }) => {\n        return <MarkerComponent {...props} />;\n    }, // barrier range will get updated only when previous_spot changes:\n    (prevProps, nextProps) => prevProps.previous_spot === nextProps.previous_spot\n);\nDelayedAccuBarriersMarker.displayName = 'DelayedAccuBarriersMarker';\n\n// CHART -----------------------------------------\n\nconst ReplayChart = observer(({ is_accumulator_contract }) => {\n    const trade = useTraderStore();\n    const { contract_replay, common, ui } = useStore();\n    const { contract_store, chart_state, chartStateChange, margin } = contract_replay;\n    const {\n        accumulator_previous_spot,\n        contract_config,\n        marker,\n        is_digit_contract,\n        barriers_array,\n        markers_array,\n        contract_info,\n    } = contract_store;\n    const { underlying: symbol, audit_details } = contract_info;\n    const allow_scroll_to_epoch = chart_state === 'READY' || chart_state === 'SCROLL_TO_LEFT';\n    const { app_routing_history, current_language, is_socket_opened } = common;\n    const { is_dark_mode_on: is_dark_theme, is_chart_layout_default, is_chart_countdown_visible } = ui;\n    const { end_epoch, chart_type, start_epoch, granularity } = contract_config;\n    /**\n     * TODO: remove forcing light theme once DBot supports dark theme\n     * DBot does not support for dark theme since till now,\n     * as a result, if any user come to report detail pages\n     * from DBot, we should force it to have light theme\n     */\n    const from_platform = getPlatformRedirect(app_routing_history);\n    const should_force_light_theme = from_platform.name === 'DBot';\n    const settings = {\n        language: current_language.toLowerCase(),\n        theme: is_dark_theme && !should_force_light_theme ? 'dark' : 'light',\n        position: is_chart_layout_default ? 'bottom' : 'left',\n        countdown: is_chart_countdown_visible,\n        assetInformation: false, // ui.is_chart_asset_info_visible,\n        isHighestLowestMarkerEnabled: false, // TODO: Pending UI\n    };\n    const scroll_to_epoch = allow_scroll_to_epoch ? contract_config.scroll_to_epoch : undefined;\n    const all_ticks = audit_details ? audit_details.all_ticks : [];\n    const { wsForget, wsSubscribe, wsSendRequest, wsForgetStream } = trade;\n\n    const accu_barriers_marker_component = allMarkers[marker?.type];\n\n    const isBottomWidgetVisible = () => {\n        return isDesktop() && is_digit_contract;\n    };\n\n    const getChartYAxisMargin = () => {\n        const chart_margin = {\n            top: isMobile() ? 96 : 148,\n            bottom: isBottomWidgetVisible() ? 128 : 112,\n        };\n\n        if (isMobile()) {\n            chart_margin.bottom = 48;\n        }\n\n        return chart_margin;\n    };\n    const prev_start_epoch = usePrevious(start_epoch);\n\n    return (\n        <SmartChart\n            barriers={barriers_array}\n            bottomWidgets={isBottomWidgetVisible() ? ChartBottomWidgets : null}\n            chartControlsWidgets={null}\n            chartType={chart_type}\n            endEpoch={end_epoch}\n            margin={margin || null}\n            isMobile={isMobile()}\n            enabledNavigationWidget={isDesktop()}\n            enabledChartFooter={false}\n            granularity={granularity}\n            requestAPI={wsSendRequest}\n            requestForget={wsForget}\n            requestForgetStream={wsForgetStream}\n            crosshair={isMobile() ? 0 : undefined}\n            maxTick={isMobile() ? 8 : undefined}\n            requestSubscribe={wsSubscribe}\n            settings={settings}\n            startEpoch={start_epoch}\n            scrollToEpoch={scroll_to_epoch}\n            stateChangeListener={chartStateChange}\n            symbol={symbol}\n            allTicks={all_ticks}\n            topWidgets={ChartTopWidgets}\n            isConnectionOpened={is_socket_opened}\n            isStaticChart={\n                // forcing chart reload when start_epoch changes to an earlier epoch for ACCU closed contract:\n                is_accumulator_contract && end_epoch && start_epoch < prev_start_epoch\n            }\n            shouldFetchTradingTimes={!end_epoch}\n            yAxisMargin={getChartYAxisMargin()}\n            anchorChartToLeft={isMobile()}\n            shouldFetchTickHistory={\n                getDurationUnitText(getDurationPeriod(contract_info)) !== 'seconds' || contract_info.status === 'open'\n            }\n            shouldDrawTicksFromContractInfo={is_accumulator_contract}\n            contractInfo={contract_info}\n        >\n            {markers_array.map(({ content_config, marker_config, react_key }) => (\n                <ChartMarker\n                    key={react_key}\n                    marker_config={marker_config}\n                    marker_content_props={content_config}\n                    is_bottom_widget_visible={isBottomWidgetVisible()}\n                />\n            ))}\n            {is_accumulator_contract && !!markers_array && (\n                <DelayedAccuBarriersMarker\n                    marker_component={accu_barriers_marker_component}\n                    key={marker.key}\n                    is_dark_theme={is_dark_theme}\n                    granularity={granularity}\n                    is_mobile={isMobile()}\n                    is_in_contract_details\n                    previous_spot={accumulator_previous_spot}\n                    {...marker}\n                />\n            )}\n        </SmartChart>\n    );\n});\n\nReplayChart.propTypes = {\n    is_accumulator_contract: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Redirect, withRouter } from 'react-router';\nimport { CSSTransition } from 'react-transition-group';\nimport { routes } from '@deriv/shared';\nimport ErrorComponent from 'App/Components/Elements/Errors';\nimport { localize } from '@deriv/translations';\nimport ContractReplay from './contract-replay.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst dialog_errors = ['GetProposalFailure', 'ContractValidationError'];\n\nconst Contract = observer(({ match, history }) => {\n    const { contract_replay } = useStore();\n    const {\n        removeErrorMessage,\n        error_message,\n        error_code,\n        has_error,\n        removeAccountSwitcherListener: onUnmount,\n        setAccountSwitcherListener: onMount,\n    } = contract_replay;\n    React.useEffect(() => {\n        onMount(+match.params.contract_id, history);\n\n        return () => {\n            removeErrorMessage();\n            onUnmount();\n        };\n    }, [onMount, onUnmount, removeErrorMessage, history, match.params.contract_id]);\n\n    if (isNaN(match.params.contract_id)) {\n        return <Redirect to='/404' />;\n    }\n\n    return (\n        <React.Fragment>\n            {has_error ? (\n                <ErrorComponent\n                    message={error_message}\n                    is_dialog={dialog_errors.includes(error_code)}\n                    redirect_label={\n                        dialog_errors.includes(error_code) ? localize('Ok') : localize('Go back to trading')\n                    }\n                    redirectOnClick={() => history.push(routes.trade)}\n                    should_show_refresh={false}\n                />\n            ) : (\n                <CSSTransition\n                    in={!has_error}\n                    timeout={400}\n                    classNames={{\n                        enter: 'contract--enter',\n                        enterDone: 'contract--enter-done',\n                        exit: 'contract--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <ContractReplay contract_id={+match.params.contract_id} key={+match.params.contract_id} />\n                </CSSTransition>\n            )}\n        </React.Fragment>\n    );\n});\n\nContract.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.object,\n};\n\nexport default withRouter(Contract);\n","import Contract from './Containers/contract.jsx';\n\nexport default Contract;\n"],"names":["ErrorComponent","header","message","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","localize","Dialog","title","is_visible","confirm_button_text","onConfirm","location","reload","PageErrorContainer","error_header","error_messages","redirect_urls","routes","redirect_labels","buttonOnClick","propTypes","PropTypes","type","UnsupportedContractModal","observer","onClose","ui","useStore","disableApp","enableApp","is_loading","is_unsupported_contract_modal_visible","website_domain","website_name","cancel_button_text","onCancel","is_closed_on_cancel","Localize","i18n_default_text","ContractAuditItem","icon","id","label","timestamp","value","value2","className","Text","size","styles","lineHeight","weight","line_height","color","align","formatDate","formatTime","ContractDetails","contract_end_time","contract_info","duration","duration_unit","exit_spot","is_vanilla","commission","contract_type","currency","entry_spot_display_value","entry_tick_time","exit_tick_time","profit","date_start","tick_count","tick_passed","transaction_ids","buy","sell","number_of_contracts","is_profit","cancellation_price","getCancellationPrice","ticks_duration_text","isAccumulatorContract","ThemedScrollbars","is_bypassed","isMobile","Icon","buy_value","sell_value","undefined","isMultiplierContract","Money","amount","show_currency","isUserSold","isEndedBeforeCancellationExpired","isUserCancelled","cancellation","date_expiry","ServerTime","unix","isCancellationExpired","isNaN","getBarrierLabel","getBarrierValue","formatMoney","getCurrencyDisplayCode","isDigitType","toGMTFormat","epochToMoment","addCommaToNumber","ContractHistory","history","length","map","item","key","display_name","order_date","Math","abs","order_amount","ContractAudit","contract_update_history","has_result","is_accumulator","is_multiplier","toggleHistoryTab","props","contract_id","React","update_history","setUpdateHistory","getSortedUpdateHistory","sort","a","b","Tabs","top","onTabItemClick","tab_index","WS","then","response","SwipeableContractAudit","children","onSwipedDown","swipe_handlers","SwipeableWrapper","target_el","document","getElementById","ReactDOM","classNames","SwipeableContractDrawer","onSwipedUp","MarketClosedContractOverlay","symbol","is_timer_loading","setIsTimerLoading","as","ContractDrawerCard","contract_update","is_market_closed","is_mobile","is_sell_requested","is_collapsed","onClickCancel","onClickSell","result","server_time","status","toggleContractAuditDrawer","contract_trade","active_symbols","useTraderStore","addToast","current_focus","removeToast","should_show_cancellation_warning","setCurrentFocus","toggleCancellationWarning","getContractById","useHover","hover_ref","should_hide_closed_overlay","underlying","is_sold","getEndTime","getSymbolDisplayName","getMarketInformation","shortcode","is_crypto","isCryptoContract","has_progress_slider","card_header","ContractCard","getCardLabels","getContractTypeDisplay","isDesktop","card_body","card_footer","contract_el","contract_card","profit_loss","should_show_result_overlay","ref","has_swipeable_drawer","DesktopWrapper","MobileWrapper","Collapsible","onClick","ContractDrawer","is_dark_theme","common","exit_tick_display_value","contract_drawer_ref","contract_drawer_card_ref","should_show_contract_audit","setShouldShowContractAudit","fallback_result","is_expired","contract_audit","is_open","getDurationTime","getDurationUnitText","getDurationPeriod","body_content","getBodyContent","speed","contract_drawer","CSSTransition","in","timeout","style","transform","current","clientHeight","height","Div100vhContainer","height_offset","withRouter","InfoBoxLongcode","isVanillaContract","components","values","index_name","strike_status","market_status","generateMessageForVanillaTrade","longcode","ContractError","onClickClose","width","viewBox","fill","fillRule","cx","cy","r","d","InfoBox","error_message","removeError","is_ready","keyname","DigitsWidget","contract_store","contract_replay","digits_info","display_status","is_digit_contract","is_ended","Digits","InfoBoxWidget","removeErrorMessage","ChartTopWidgets","is_title_enabled","ChartBottomWidgets","Widget","ContractReplay","is_valid_to_cancel","onMount","onUnmount","indicative_status","is_chart_loading","is_forward_starting","routeBackInApp","is_dark_mode_on","NotificationMessages","notification_messages_ui","setIsVisible","useHistory","url_contract_id","exec","pathname","contract_drawer_el","FadeWrapper","goBack","statementws_url","urlFor","legacy","window","open","PageOverlay","isEmptyObject","state","from_table_row","is_disabled","fallback","is_dark","ReplayChart","is_accumulator_contract","DelayedAccuBarriersMarker","MarkerComponent","marker_component","previous_spot","prevProps","nextProps","displayName","chart_margin","trade","chart_state","chartStateChange","margin","accumulator_previous_spot","contract_config","marker","barriers_array","markers_array","audit_details","allow_scroll_to_epoch","app_routing_history","current_language","is_socket_opened","is_chart_layout_default","is_chart_countdown_visible","end_epoch","chart_type","start_epoch","granularity","should_force_light_theme","getPlatformRedirect","name","settings","language","toLowerCase","theme","position","countdown","assetInformation","isHighestLowestMarkerEnabled","scroll_to_epoch","all_ticks","wsForget","wsSubscribe","wsSendRequest","wsForgetStream","accu_barriers_marker_component","allMarkers","isBottomWidgetVisible","prev_start_epoch","usePrevious","SmartChart","barriers","bottomWidgets","chartControlsWidgets","chartType","endEpoch","enabledNavigationWidget","enabledChartFooter","requestAPI","requestForget","requestForgetStream","crosshair","maxTick","requestSubscribe","startEpoch","scrollToEpoch","stateChangeListener","allTicks","topWidgets","isConnectionOpened","isStaticChart","shouldFetchTradingTimes","yAxisMargin","bottom","anchorChartToLeft","shouldFetchTickHistory","shouldDrawTicksFromContractInfo","contractInfo","content_config","marker_config","react_key","marker_content_props","is_bottom_widget_visible","is_in_contract_details","dialog_errors","Contract","match","error_code","has_error","removeAccountSwitcherListener","setAccountSwitcherListener","params","Redirect","to","includes","push","enter","enterDone","exit","unmountOnExit"],"sourceRoot":""}