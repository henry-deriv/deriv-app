{"version":3,"file":"trader/js/trader.screen-large.25318d037a79e827ce77.js","mappings":"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","sources":["webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/allow-equals.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/multiplier.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/amount.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/tick-steps.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/range-slider.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-toggle.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/trading-date-picker.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/index.js","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/dialog.jsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/time-picker.jsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/index.js","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/end-time.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/trading-time-picker.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/advanced-duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/simple-duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-wrapper.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator.jsx","webpack://@deriv/trader/./src/Modules/Trading/Containers/trade-params.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/screen-large.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, Checkbox } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    hasCallPutEqual,\n    hasDurationForCallPutEqual,\n    isRiseFallEqual,\n} from 'Stores/Modules/Trading/Helpers/allow-equals';\n\nconst AllowEquals = ({\n    contract_start_type,\n    contract_type,\n    contract_types_list,\n    duration_unit,\n    expiry_type,\n    onChange,\n    value,\n    has_equals_only,\n}) => {\n    const has_callputequal_duration = hasDurationForCallPutEqual(\n        contract_types_list,\n        duration_unit,\n        contract_start_type\n    );\n    const has_callputequal = hasCallPutEqual(contract_types_list);\n\n    const has_allow_equals =\n        isRiseFallEqual(contract_type) && (has_callputequal_duration || expiry_type === 'endtime') && has_callputequal;\n\n    const changeValue = e => {\n        e.persist();\n        const { name, checked } = e.target;\n        onChange({ target: { name, value: Number(checked) } });\n    };\n\n    return (\n        has_allow_equals && (\n            <div className='allow-equals'>\n                <Checkbox\n                    className='allow-equals__input-field'\n                    id='dt_allow_equals_input'\n                    onChange={changeValue}\n                    defaultChecked={!!value}\n                    name='is_equal'\n                    label={localize('Allow equals')}\n                    classNameLabel='allow-equals__label'\n                    disabled={has_equals_only}\n                />\n                <Popover\n                    alignment='left'\n                    classNameTarget='allow-equals__tooltip'\n                    icon='info'\n                    id='dt_allow_equals_info'\n                    message={localize('Win payout if exit spot is also equal to entry spot.')}\n                    margin={130}\n                    relative_render\n                />\n            </div>\n        )\n    );\n};\n\nAllowEquals.propTypes = {\n    contract_start_type: PropTypes.string,\n    contract_type: PropTypes.string,\n    contract_types_list: PropTypes.object,\n    duration_unit: PropTypes.string,\n    expiry_type: PropTypes.string,\n    has_equals_only: PropTypes.bool,\n    onChange: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default AllowEquals;\n","import React from 'react';\nimport { Dropdown } from '@deriv/components';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer } from '@deriv/stores';\n\nconst Multiplier = observer(() => {\n    const { multiplier, multiplier_range_list, onChange } = useTraderStore();\n    return (\n        <Dropdown\n            id='multiplier'\n            className='trade-container__multiplier-dropdown'\n            is_alignment_left\n            is_nativepicker={false}\n            list={multiplier_range_list}\n            name='multiplier'\n            no_border={true}\n            value={multiplier}\n            onChange={onChange}\n        />\n    );\n});\n\nexport default Multiplier;\n","import { AMOUNT_MAX_LENGTH, addComma, getDecimalPlaces } from '@deriv/shared';\nimport { ButtonToggle, Dropdown, InputField, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nimport AllowEquals from './allow-equals.jsx';\nimport Fieldset from 'App/Components/Form/fieldset.jsx';\nimport Multiplier from './Multiplier/multiplier.jsx';\nimport MultipliersInfo from './Multiplier/info.jsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nexport const Input = ({\n    amount,\n    currency,\n    current_focus,\n    error_messages,\n    is_nativepicker,\n    is_single_currency,\n    onChange,\n    setCurrentFocus,\n}) => (\n    <InputField\n        className='trade-container__amount'\n        classNameInlinePrefix='trade-container__currency'\n        classNameInput='trade-container__input'\n        currency={currency}\n        current_focus={current_focus}\n        error_messages={error_messages}\n        fractional_digits={getDecimalPlaces(currency)}\n        id='dt_amount_input'\n        inline_prefix={is_single_currency ? currency : null}\n        is_autocomplete_disabled\n        is_float\n        is_hj_whitelisted\n        is_incrementable\n        is_nativepicker={is_nativepicker}\n        is_negative_disabled\n        max_length={AMOUNT_MAX_LENGTH}\n        name='amount'\n        onChange={onChange}\n        type='tel'\n        value={amount}\n        ariaLabel={localize('Amount')}\n        setCurrentFocus={setCurrentFocus}\n    />\n);\n\nconst Amount = observer(({ is_minimized, is_nativepicker }) => {\n    const { ui, client } = useStore();\n    const { currencies_list, is_single_currency } = client;\n    const { setCurrentFocus, vanilla_trade_type, current_focus } = ui;\n    const {\n        amount,\n        basis,\n        basis_list,\n        contract_start_type,\n        contract_type,\n        contract_types_list,\n        currency,\n        duration_unit,\n        expiry_type,\n        is_accumulator,\n        is_equal,\n        is_multiplier,\n        has_equals_only,\n        onChange,\n        validation_errors,\n        stake_boundary,\n    } = useTraderStore();\n\n    if (is_minimized) {\n        return (\n            <div className='fieldset-minimized fieldset-minimized__amount'>\n                <span className='fieldset-minimized__basis'>\n                    {(basis_list.find(o => o.value === basis) || {}).text}\n                </span>\n                &nbsp;\n                <i>\n                    <span\n                        className={classNames('fieldset-minimized__currency', 'symbols', {\n                            [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                        })}\n                    />\n                </i>\n                {addComma(amount, 2)}\n            </div>\n        );\n    }\n\n    const error_messages = validation_errors.amount;\n\n    const getBasisList = () => basis_list.map(item => ({ text: item.text, value: item.value }));\n\n    const setTooltipContent = () => {\n        if (is_multiplier) {\n            return (\n                <Localize i18n_default_text='Your gross profit is the percentage change in market price times your stake and the multiplier chosen here.' />\n            );\n        } else if (contract_type === 'vanilla') {\n            return (\n                <Localize i18n_default_text='Your stake is a non-refundable one-time premium to purchase this contract. Your total profit/loss equals the contract value minus your stake.' />\n            );\n        }\n        return null;\n    };\n\n    return (\n        <Fieldset\n            className='trade-container__fieldset center-text'\n            header={\n                is_multiplier || ['high_low', 'vanilla'].includes(contract_type) || is_accumulator\n                    ? localize('Stake')\n                    : undefined\n            }\n            header_tooltip={setTooltipContent()}\n        >\n            {basis_list.length > 1 && (\n                <ButtonToggle\n                    id='dt_amount_toggle'\n                    buttons_arr={getBasisList()}\n                    className='dropdown--no-margin'\n                    is_animated\n                    name='basis'\n                    onChange={onChange}\n                    value={basis}\n                />\n            )}\n            {!is_single_currency ? (\n                <div className='trade-container__currency-options'>\n                    <Input\n                        amount={amount}\n                        currency={currency}\n                        current_focus={current_focus}\n                        error_messages={error_messages}\n                        is_single_currency={is_single_currency}\n                        is_nativepicker={is_nativepicker}\n                        onChange={onChange}\n                        setCurrentFocus={setCurrentFocus}\n                    />\n                    <Dropdown\n                        id='amount'\n                        className={classNames({ 'dc-dropdown-container__currency': !is_single_currency })}\n                        is_alignment_left\n                        is_nativepicker={false}\n                        list={currencies_list}\n                        name='currency'\n                        initial_offset={256}\n                        no_border={true}\n                        value={currency}\n                        onChange={onChange}\n                    />\n                </div>\n            ) : (\n                <Input\n                    amount={amount}\n                    currency={currency}\n                    current_focus={current_focus}\n                    error_messages={error_messages}\n                    is_single_currency={is_single_currency}\n                    is_nativepicker={is_nativepicker}\n                    onChange={onChange}\n                    setCurrentFocus={setCurrentFocus}\n                />\n            )}\n            <AllowEquals\n                contract_start_type={contract_start_type}\n                contract_type={contract_type}\n                contract_types_list={contract_types_list}\n                duration_unit={duration_unit}\n                expiry_type={expiry_type}\n                onChange={onChange}\n                value={parseInt(is_equal)}\n                has_equals_only={has_equals_only}\n            />\n            {is_multiplier && (\n                <React.Fragment>\n                    <Multiplier />\n                    <MultipliersInfo\n                        className='trade-container__multipliers-trade-info'\n                        should_show_tooltip\n                        is_tooltip_relative\n                    />\n                </React.Fragment>\n            )}\n            {contract_type === 'vanilla' && (\n                <section className='trade-container__stake-field'>\n                    <div className='trade-container__stake-field--min'>\n                        <Text size='xxxs'>{localize('Min. stake')}</Text>\n                        <Text size='xxs'>\n                            {stake_boundary[vanilla_trade_type].min_stake} {currency}\n                        </Text>\n                    </div>\n                    <div className='trade-container__stake-field--max'>\n                        <Text size='xxxs'>{localize('Max. stake')}</Text>\n                        <Text size='xxs'>\n                            {stake_boundary[vanilla_trade_type].max_stake} {currency}\n                        </Text>\n                    </div>\n                </section>\n            )}\n        </Fieldset>\n    );\n});\n\nAmount.propTypes = {\n    is_minimized: PropTypes.bool,\n    is_nativepicker: PropTypes.bool,\n};\n\nexport default Amount;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TickSteps = ({ hover_value, max_value, min_value, onClick, onMouseEnter, onMouseLeave, value }) => {\n    if (!max_value || !min_value) return null;\n\n    const arr_ticks = [...Array(max_value - min_value + 1).keys()];\n\n    const isActive = idx => idx + min_value === value;\n    const isMarked = idx => idx + min_value < value;\n    const isMarkedOnHover = idx => (isMarked(idx) ? false : idx + min_value <= hover_value);\n\n    return (\n        <React.Fragment>\n            {arr_ticks.map(idx => (\n                <span\n                    data-testid={`tick_step_${idx + min_value}`}\n                    key={idx}\n                    data-value={idx + min_value}\n                    className={classNames('range-slider__ticks-step', {\n                        'range-slider__ticks-step--active': isActive(idx),\n                        'range-slider__ticks-step--marked': isMarked(idx),\n                        'range-slider__ticks-step--marked-hover': isMarkedOnHover(idx),\n                    })}\n                    onClick={() => onClick(idx + min_value)}\n                    onMouseEnter={() => onMouseEnter(idx + min_value)}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nTickSteps.propTypes = {\n    hover_value: PropTypes.number,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default TickSteps;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { Text } from '@deriv/components';\nimport TickSteps from './tick-steps.jsx';\n\nconst RangeSlider = ({ className, name, value, min_value, max_value, onChange }) => {\n    const [hover_value, setHoverValue] = React.useState(0);\n    const range_slider_ref = React.useRef();\n\n    const handleChange = e => {\n        const target_value = +e.target.value;\n        if (target_value !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: target_value } });\n        }\n    };\n\n    const handleClick = index => {\n        if (index !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: index } });\n        }\n    };\n\n    const onMouseEnter = index => {\n        if (index) {\n            setHoverValue(index);\n            range_slider_ref.current.style.width = getRangeSliderTrackWidth(index, true);\n        }\n    };\n\n    const onMouseLeave = e => {\n        const { offsetX, offsetY } = e.nativeEvent;\n        if (offsetY <= -3 || offsetY >= 3 || offsetX < -3 || offsetX > 3) {\n            resetOnHover();\n        }\n    };\n\n    const getRangeSliderTrackWidth = (slider_value, is_hover) => {\n        const width = (slider_value - min_value) * (10 / (max_value - min_value));\n        return `${width * 2 + (is_hover ? 0.8 : 1.4)}em`;\n    };\n\n    const resetOnHover = () => {\n        if (hover_value) {\n            setHoverValue(0);\n            range_slider_ref.current.style.width = 0;\n        }\n    };\n\n    const display_value = hover_value || value;\n    return (\n        <div\n            className={classNames('range-slider', className, {\n                'range-slider__error': value < min_value || value > max_value,\n            })}\n        >\n            <label className='range-slider__label' htmlFor='range'>\n                <input\n                    className='input trade-container__input range-slider__track'\n                    id='dt_duration_range_input'\n                    max={max_value}\n                    min={min_value}\n                    name={name}\n                    onChange={handleChange}\n                    tabIndex='0'\n                    type='range'\n                    value={value}\n                    aria-label='range-input'\n                />\n                {/* this element to be placed before <TickSteps /> to prevent overlapping colors */}\n                <span\n                    ref={range_slider_ref}\n                    className='range-slider__line range-slider__line--fill'\n                    onMouseLeave={onMouseLeave}\n                />\n                <div className='range-slider__ticks'>\n                    <TickSteps\n                        hover_value={hover_value}\n                        max_value={max_value}\n                        min_value={min_value}\n                        onClick={handleClick}\n                        onMouseLeave={onMouseLeave}\n                        onMouseEnter={onMouseEnter}\n                        value={value}\n                    />\n                </div>\n                {/* Calculate line width based on active value and size of range thumb */}\n                <div className='range-slider__line' style={{ width: `${getRangeSliderTrackWidth(value)}` }} />\n            </label>\n            <div className='range-slider__caption'>\n                {!!display_value && (\n                    <Text align='center' weight='bold' size='xs' color='prominent' id='dt_range_slider_label'>\n                        {display_value === 1 && localize('{{display_value}} Tick', { display_value })}\n                        {display_value > 1 && localize('{{display_value}} Ticks', { display_value })}\n                    </Text>\n                )}\n            </div>\n        </div>\n    );\n};\n// Keypress events do not trigger on Safari due to the way it handles input type='range' elements, using focus on the input element also doesn't work for Safari.\n\nRangeSlider.propTypes = {\n    className: PropTypes.string,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default RangeSlider;\n","import RangeSlider from './range-slider.jsx';\n\nexport default RangeSlider;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst DurationToggle = ({ name, onChange, value }) => {\n    const toggle = () => {\n        onChange({ target: { value: !value, name } });\n    };\n    const icon_className = classNames('advanced-simple-toggle__icon', 'select-arrow', {\n        'advanced-simple-toggle__icon--active': value,\n    });\n    return (\n        <>\n            <button\n                id={value ? 'dt_advanced_toggle' : 'dt_simple_toggle'}\n                className='advanced-simple-toggle'\n                onClick={toggle}\n                aria-label={localize('Toggle between advanced and simple duration settings')}\n            >\n                <Icon\n                    icon='IcChevronDown'\n                    className={icon_className}\n                    classNamePath={'advanced-simple-toggle__icon-path'}\n                />\n            </button>\n        </>\n    );\n};\n\nDurationToggle.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.bool,\n};\n\nexport default DurationToggle;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { DatePicker, Tooltip } from '@deriv/components';\nimport { isTimeValid, setTime, toMoment, useIsMounted, hasIntradayDurationUnit } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradingDatePicker = observer(({ id, is_24_hours_contract, mode, name }) => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const {\n        duration: current_duration,\n        duration_min_max,\n        duration_units_list,\n        expiry_type,\n        onChange,\n        start_date,\n        start_time,\n        symbol,\n        validation_errors,\n    } = useTraderStore();\n\n    const isMounted = useIsMounted();\n\n    const [disabled_days, setDisabledDays] = React.useState([]);\n    const [market_events, setMarketEvents] = React.useState([]);\n    const [duration, setDuration] = React.useState(current_duration);\n    const [selected_date, setSelectedDate] = React.useState();\n\n    React.useEffect(() => {\n        onChangeCalendarMonth();\n    }, [onChangeCalendarMonth]);\n\n    React.useEffect(() => {\n        if (duration !== current_duration) {\n            setDuration(current_duration);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [current_duration]);\n\n    const getMinDuration = () => {\n        return hasIntradayDurationUnit(duration_units_list)\n            ? toMoment(server_time).clone()\n            : toMoment(server_time).clone().add(duration_min_max?.daily?.min, 'second');\n    };\n\n    const getMomentContractStartDateTime = () => {\n        return setTime(\n            toMoment(getMinDuration()),\n            isTimeValid(start_time) ? start_time : server_time.format('HH:mm:ss')\n        );\n    };\n\n    const getMaxDailyDuration = () => {\n        return duration_min_max.daily ? duration_min_max.daily.max : 365 * 24 * 3600;\n    };\n\n    const getMinDateExpiry = () => {\n        const is_duration_contract = expiry_type === 'duration';\n        const min_date = getMomentContractStartDateTime().clone().startOf('day');\n\n        return is_duration_contract && hasIntradayDurationUnit(duration_units_list) ? min_date.add(1, 'day') : min_date;\n    };\n\n    const getMaxDateDuration = () => {\n        return is_24_hours_contract\n            ? getMomentContractStartDateTime()\n                  .clone()\n                  .add(start_date ? 24 * 3600 : getMaxDailyDuration(), 'second')\n            : getMomentContractStartDateTime().clone().add(getMaxDailyDuration(), 'second');\n    };\n\n    const hasRangeSelection = () => mode === 'duration';\n\n    const getFooter = () => {\n        if (!hasRangeSelection()) return null;\n\n        if (!duration) return localize('Minimum duration is 1 day');\n        if (+duration === 1) return localize('Duration: {{duration}} day', { duration });\n        return localize('Duration: {{duration}} days', { duration });\n    };\n\n    const getDatepickerValue = () => {\n        return hasRangeSelection()\n            ? toMoment().add(duration, 'days').format('YYYY-MM-DD')\n            : selected_date || getMinDateExpiry();\n    };\n\n    const onChangeDate = e => {\n        if (isMounted()) {\n            if (hasRangeSelection()) {\n                setDuration(e.duration);\n            } else if (e.target.value) {\n                setSelectedDate(toMoment(e.target.value));\n            }\n        }\n\n        if (typeof onChange === 'function' && e.target) {\n            onChange({\n                target: {\n                    name: e.target.name,\n                    value: hasRangeSelection() ? e.target.value : toMoment(e.target.value).format('YYYY-MM-DD'),\n                },\n            });\n        }\n    };\n\n    const onChangeCalendarMonth = React.useCallback(\n        async (e = toMoment().format('YYYY-MM-DD')) => {\n            const new_market_events = [];\n            let new_disabled_days = [];\n\n            const events = await ContractType.getTradingEvents(e, symbol);\n            events.forEach(evt => {\n                const dates = evt.dates.split(', '); // convert dates str into array\n                const idx = dates.indexOf('Fridays');\n                if (idx !== -1) {\n                    new_disabled_days = [6, 0]; // Sat, Sun\n                }\n                new_market_events.push({\n                    dates,\n                    descrip: evt.descrip,\n                });\n            });\n\n            if (isMounted()) {\n                setDisabledDays(new_disabled_days);\n                setMarketEvents(new_market_events);\n            }\n        },\n        [isMounted, symbol]\n    );\n\n    const has_error = !!validation_errors?.[name]?.length;\n\n    return (\n        <div\n            className={classNames('dc-input-field', {\n                'dc-input-field--has-error': has_error,\n            })}\n        >\n            <Tooltip\n                className='trade-container__tooltip'\n                alignment='left'\n                message={has_error ? validation_errors[name][0] : undefined}\n                has_error={has_error}\n            >\n                <DatePicker\n                    id={id}\n                    alignment='left'\n                    display_format='DD MMM YYYY'\n                    show_leading_icon\n                    error={validation_errors?.[name]?.length ? '' : undefined}\n                    mode={mode}\n                    max_date={getMaxDateDuration()}\n                    min_date={getMinDateExpiry()}\n                    name={name}\n                    onChange={onChangeDate}\n                    onChangeCalendarMonth={onChangeCalendarMonth}\n                    has_range_selection={hasRangeSelection()}\n                    has_today_btn={!hasRangeSelection()}\n                    footer={getFooter()}\n                    events={market_events}\n                    disabled_days={disabled_days}\n                    keep_open\n                    readOnly={!hasRangeSelection()}\n                    value={getDatepickerValue()}\n                />\n            </Tooltip>\n        </div>\n    );\n});\n\nTradingDatePicker.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    is_24_hours_contract: PropTypes.bool,\n    mode: PropTypes.string,\n    name: PropTypes.string,\n};\n\nexport default TradingDatePicker;\n","import TradingDatePicker from './trading-date-picker.jsx';\n\nexport default TradingDatePicker;\n","import PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\n\nfunction isBetween(to_compare_moment, start_times_moment, end_times_moment, duration) {\n    for (let i = 0; i < start_times_moment.length; i++) {\n        if (to_compare_moment.isBetween(start_times_moment[i], end_times_moment[i], duration)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst Dialog = ({ preClass, selected_time, end_times, start_times, onChange, className }) => {\n    const start_times_moment = start_times ? start_times.map(start_time => toMoment(start_time)) : [toMoment()];\n    const end_times_moment = end_times\n        ? end_times.map(end_time => toMoment(end_time))\n        : [toMoment().hour('23').minute('59').seconds('59').milliseconds('999')];\n    const to_compare_moment = toMoment();\n    const [hour, minute] = selected_time.split(':');\n    const hours = [...Array(24).keys()].map(a => `0${a}`.slice(-2));\n    const minutes = [...Array(12).keys()].map(a => `0${a * 5}`.slice(-2));\n\n    const selectOption = (type, current_value, prev_value, is_enabled = true) => {\n        if (is_enabled && prev_value) {\n            const [prev_hour, prev_minute] = prev_value.split(':');\n            if ((type === 'h' && current_value !== prev_hour) || (type === 'm' && current_value !== prev_minute)) {\n                onChange(`${type === 'h' ? current_value : prev_hour}:${type === 'm' ? current_value : prev_minute}`);\n            }\n        }\n    };\n\n    return (\n        <div className={classNames(`${preClass}__dialog`, `${className}`)}>\n            <div className={`${preClass}__selector`}>\n                <div className={`${preClass}__selector--hours`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Hour')}</strong>\n                    </div>\n                    <div>\n                        {hours.map((h, key) => {\n                            to_compare_moment.hour(h);\n                            const start_times_reset_minute = start_times_moment.map(start_time =>\n                                start_time.clone().minute(0)\n                            );\n                            const is_hour_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_reset_minute,\n                                end_times_moment\n                            );\n                            const is_minute_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            // The minute number after which the last block/interval of `Minutes` selection will be disabled\n                            const last_interval_of_hour = 52;\n                            const is_enabled =\n                                to_compare_moment.minutes() > last_interval_of_hour\n                                    ? is_hour_enabled && is_minute_enabled\n                                    : is_hour_enabled;\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: hour === h },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={key}\n                                    onClick={() => {\n                                        selectOption('h', h, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {h}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className={`${preClass}__selector--minutes`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Minute')}</strong>\n                    </div>\n                    <div>\n                        {minutes.map((mm, key) => {\n                            to_compare_moment.hour(hour).minute(mm);\n                            const is_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: minute === mm },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={key}\n                                    onClick={() => {\n                                        selectOption('m', mm, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {mm}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nDialog.propTypes = {\n    className: PropTypes.string,\n    end_times: PropTypes.array,\n    onChange: PropTypes.func,\n    preClass: PropTypes.string,\n    selected_time: PropTypes.array,\n    start_times: PropTypes.array,\n};\n\nexport default Dialog;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, InputField } from '@deriv/components';\nimport Dialog from './dialog.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst class_prefix = 'time-picker';\n\nconst TimePicker = observer(\n    ({\n        end_times,\n        is_nativepicker,\n        name,\n        onChange,\n        padding,\n        placeholder,\n        selected_time,\n        start_times,\n        validation_errors,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const [is_open, setIsOpen] = React.useState(false);\n        const [wrapper_ref, setWrapperRef] = React.useState(null);\n\n        React.useEffect(() => {\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => document.removeEventListener('mousedown', handleClickOutside);\n        });\n\n        const toggleDropDown = () => {\n            setIsOpen(!is_open);\n        };\n\n        const handleChange = arg => {\n            // To handle nativepicker;\n            const value = typeof arg === 'object' ? arg.target.selected_time : arg;\n\n            if (value !== selected_time) {\n                onChange({ target: { name, value } });\n            }\n        };\n\n        const saveRef = node => {\n            if (!node) return;\n            setWrapperRef(node);\n        };\n\n        const handleClickOutside = event => {\n            if (!wrapper_ref?.contains(event.target) && is_open) {\n                setIsOpen(false);\n            }\n        };\n\n        return (\n            <div ref={saveRef} className={classNames(class_prefix, { [`${class_prefix}--padding`]: padding })}>\n                {is_nativepicker ? (\n                    <input\n                        type='time'\n                        id={`dt_${name}_input`}\n                        value={selected_time}\n                        onChange={handleChange}\n                        name={name}\n                        min={start_times[0]}\n                        max={end_times[end_times.length - 1]}\n                    />\n                ) : (\n                    <React.Fragment>\n                        <InputField\n                            error_messages={validation_errors}\n                            type='text'\n                            is_hj_whitelisted\n                            is_read_only\n                            id={`dt_${name}_input`}\n                            className={classNames(`${class_prefix}-input`)}\n                            current_focus={current_focus}\n                            value={`${selected_time} GMT`}\n                            onClick={toggleDropDown}\n                            name={name}\n                            placeholder={placeholder}\n                            setCurrentFocus={setCurrentFocus}\n                        />\n                        <Icon icon='IcClockOutline' className={`${class_prefix}__icon`} />\n                        <CSSTransition\n                            in={is_open}\n                            classNames={{\n                                enter: 'time-picker__dialog--enter',\n                                enterDone: 'time-picker__dialog--enter-done',\n                                exit: 'time-picker__dialog--exit',\n                            }}\n                            timeout={100}\n                            unmountOnExit\n                        >\n                            <Dialog\n                                end_times={end_times}\n                                start_times={start_times}\n                                className={'from-left'}\n                                onChange={handleChange}\n                                preClass={class_prefix}\n                                selected_time={selected_time}\n                            />\n                        </CSSTransition>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n);\n\nTimePicker.propTypes = {\n    end_times: PropTypes.array,\n    is_clearable: PropTypes.bool,\n    is_nativepicker: PropTypes.bool,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    padding: PropTypes.string,\n    placeholder: PropTypes.string,\n    selected_time: PropTypes.string,\n    start_times: PropTypes.array,\n    validation_errors: PropTypes.array,\n};\n\nexport default TimePicker;\n","import TimePicker from './time-picker.jsx';\n\nexport default TimePicker;\n","const getClosestTime = (time, interval) => time.minute(Math.ceil(time.minute() / interval) * interval);\n\nexport const getSelectedTime = (server_time, selected_time, market_open_times, market_close_times) => {\n    for (let i = 0; i < market_open_times.length; i++) {\n        if (selected_time.isAfter(market_open_times[i]) && selected_time.isBefore(market_close_times[i])) {\n            return getClosestTime(selected_time, 5).format('HH:mm');\n        }\n    }\n\n    for (let i = 0; i < market_open_times.length; i++) {\n        if (market_open_times[i].isAfter(server_time)) {\n            return getClosestTime(market_open_times[i], 5).format('HH:mm');\n        }\n    }\n\n    return getClosestTime(server_time, 5).format('HH:mm');\n};\n\nexport const getBoundaries = (server_time, market_open_times, market_close_times) => {\n    const boundaries = {\n        start: market_open_times.map(open_time => (server_time.isBefore(open_time) ? open_time.clone() : server_time)),\n        end: market_close_times,\n    };\n\n    if (boundaries.start.length > 0) {\n        boundaries.start[0] = getClosestTime(boundaries.start[0], 5);\n    }\n\n    return boundaries;\n};\n","import React from 'react';\nimport { setTime, toMoment } from '@deriv/shared';\nimport TimePicker from 'App/Components/Form/TimePicker';\nimport { getSelectedTime, getBoundaries } from 'Stores/Modules/Trading/Helpers/end-time';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradingTimePicker = observer(() => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const { expiry_date, expiry_time, market_open_times, market_close_times, onChange, is_market_closed } =\n        useTraderStore();\n    const moment_expiry_date = toMoment(expiry_date);\n    const market_open_datetimes = market_open_times.map(open_time => setTime(moment_expiry_date.clone(), open_time));\n    const market_close_datetimes = market_close_times.map(close_time =>\n        setTime(moment_expiry_date.clone(), close_time)\n    );\n    const expiry_datetime = setTime(moment_expiry_date.clone(), expiry_time);\n    const server_datetime = toMoment(server_time);\n\n    const boundaries = getBoundaries(server_datetime.clone(), market_open_datetimes, market_close_datetimes);\n    const selected_time = getSelectedTime(\n        server_datetime.clone(),\n        expiry_datetime,\n        market_open_datetimes,\n        market_close_datetimes\n    );\n\n    React.useEffect(() => {\n        if (expiry_time !== selected_time && !is_market_closed) {\n            onChange({\n                target: { name: 'expiry_time', value: selected_time },\n            });\n        }\n    }, [expiry_time, selected_time, onChange, is_market_closed]);\n\n    return (\n        <TimePicker\n            end_times={boundaries.end}\n            onChange={onChange}\n            name='expiry_time'\n            placeholder='12:00'\n            start_times={boundaries.start}\n            selected_time={selected_time}\n        />\n    );\n});\n\nexport default TradingTimePicker;\n","import TradingTimePicker from './trading-time-picker.jsx';\n\nexport default TradingTimePicker;\n","import classNames from 'classnames';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dropdown, ButtonToggle, InputField } from '@deriv/components';\nimport { toMoment, hasIntradayDurationUnit } from '@deriv/shared';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport TradingTimePicker from '../../TimePicker';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst AdvancedDuration = observer(\n    ({\n        advanced_duration_unit,\n        advanced_expiry_type,\n        duration_units_list,\n        duration_t,\n        changeDurationUnit,\n        getDurationFromUnit,\n        expiry_date,\n        expiry_list,\n        expiry_type,\n        number_input_props,\n        onChange,\n        onChangeUiStore,\n        server_time,\n        shared_input_props,\n        start_date,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const { contract_expiry_type, validation_errors } = useTraderStore();\n\n        let is_24_hours_contract = false;\n\n        if (expiry_type === 'endtime') {\n            const has_intraday_duration_unit = hasIntradayDurationUnit(duration_units_list);\n            is_24_hours_contract =\n                (!!start_date || toMoment(expiry_date || server_time).isSame(toMoment(server_time), 'day')) &&\n                has_intraday_duration_unit;\n        }\n\n        const endtime_container_class = classNames('endtime-container', {\n            'has-time': is_24_hours_contract,\n        });\n\n        const changeExpiry = ({ target }) => {\n            const { name, value } = target;\n\n            onChange({ target: { name: 'expiry_type', value } });\n            onChangeUiStore({ name, value });\n        };\n\n        return (\n            <>\n                {expiry_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_advanced_duration_toggle'\n                        buttons_arr={expiry_list}\n                        name='advanced_expiry_type'\n                        is_animated={true}\n                        onChange={changeExpiry}\n                        value={advanced_expiry_type}\n                    />\n                )}\n                {expiry_type === 'duration' ? (\n                    <>\n                        <div className='duration-container'>\n                            {duration_units_list.length >= 1 && (\n                                <Dropdown\n                                    classNameDisplay='dc-dropdown__display--duration'\n                                    disabled={false}\n                                    id='duration'\n                                    is_alignment_left\n                                    is_nativepicker={false}\n                                    list={duration_units_list}\n                                    name='advanced_duration_unit'\n                                    no_border={true}\n                                    onChange={changeDurationUnit}\n                                    value={advanced_duration_unit}\n                                />\n                            )}\n                            {advanced_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                                <RangeSlider name='duration' ticks={10} value={duration_t} {...shared_input_props} />\n                            )}\n                            {advanced_duration_unit === 'd' && (\n                                <TradingDatePicker\n                                    id='dt_advanced_duration_datepicker'\n                                    mode='duration'\n                                    name='duration'\n                                    is_24_hours_contract={is_24_hours_contract}\n                                />\n                            )}\n                            {advanced_duration_unit !== 't' && advanced_duration_unit !== 'd' && (\n                                <InputField\n                                    id='dt_advanced_duration_input'\n                                    classNameInput='trade-container__input'\n                                    current_focus={current_focus}\n                                    error_messages={validation_errors.duration}\n                                    label={duration_units_list.length === 1 ? duration_units_list[0].text : null}\n                                    name='duration'\n                                    setCurrentFocus={setCurrentFocus}\n                                    value={getDurationFromUnit(advanced_duration_unit)}\n                                    {...number_input_props}\n                                    {...shared_input_props}\n                                />\n                            )}\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className={endtime_container_class}>\n                            <TradingDatePicker\n                                id='dt_advanced_duration_datepicker'\n                                name='expiry_date'\n                                is_24_hours_contract={is_24_hours_contract}\n                                value={expiry_date}\n                            />\n                            {\n                                is_24_hours_contract && <TradingTimePicker />\n                                // validation_errors={validation_errors.end_time} TODO: add validation_errors for end time\n                            }\n                        </div>\n                    </>\n                )}\n            </>\n        );\n    }\n);\n\nAdvancedDuration.propTypes = {\n    advanced_duration_unit: PropTypes.string,\n    advanced_expiry_type: PropTypes.string,\n    changeDurationUnit: PropTypes.func,\n    duration_t: PropTypes.number,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    expiry_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expiry_list: PropTypes.array,\n    expiry_type: PropTypes.string,\n    getDurationFromUnit: PropTypes.func,\n    number_input_props: PropTypes.object,\n    onChange: PropTypes.func,\n    onChangeUiStore: PropTypes.func,\n    server_time: PropTypes.object,\n    shared_input_props: PropTypes.object,\n    start_date: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nexport default AdvancedDuration;\n","import { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ButtonToggle, InputField } from '@deriv/components';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst SimpleDuration = observer(\n    ({\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        getDurationFromUnit,\n        number_input_props,\n        shared_input_props,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus, simple_duration_unit } = ui;\n        const { contract_expiry_type, validation_errors } = useTraderStore();\n\n        const filterMinutesAndTicks = arr => {\n            const filtered_arr = arr.filter(du => du.value === 't' || du.value === 'm');\n            if (filtered_arr.length <= 1) return [];\n\n            return filtered_arr;\n        };\n        const has_label = !duration_units_list.some(du => du.value === 't');\n\n        return (\n            <>\n                {duration_units_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_simple_duration_toggle'\n                        buttons_arr={filterMinutesAndTicks(duration_units_list)}\n                        is_animated={true}\n                        name='simple_duration_unit'\n                        onChange={changeDurationUnit}\n                        value={simple_duration_unit}\n                    />\n                )}\n                {simple_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                    <RangeSlider name='duration' value={duration_t} ticks={10} {...shared_input_props} />\n                )}\n                {simple_duration_unit === 'd' && (\n                    <TradingDatePicker id='dt_simple_duration_datepicker' mode='duration' name='duration' />\n                )}\n                {simple_duration_unit !== 't' && simple_duration_unit !== 'd' && (\n                    <InputField\n                        id='dt_simple_duration_input'\n                        classNameInput='trade-container__input'\n                        current_focus={current_focus}\n                        error_messages={validation_errors.duration}\n                        name='duration'\n                        label={has_label ? duration_units_list[0]?.text : null}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getDurationFromUnit(simple_duration_unit)}\n                        {...number_input_props}\n                        {...shared_input_props}\n                    />\n                )}\n            </>\n        );\n    }\n);\n\nSimpleDuration.propTypes = {\n    changeDurationUnit: PropTypes.func,\n    duration_t: PropTypes.number,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    getDurationFromUnit: PropTypes.func,\n    number_input_props: PropTypes.object,\n    shared_input_props: PropTypes.object,\n};\n\nexport default SimpleDuration;\n","import classNames from 'classnames';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport Fieldset from 'App/Components/Form/fieldset.jsx';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport { Dropdown } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\nimport DurationToggle from './duration-toggle.jsx';\nimport AdvancedDuration from './advanced-duration.jsx';\nimport SimpleDuration from './simple-duration.jsx';\n\nconst Duration = ({\n    advanced_duration_unit,\n    advanced_expiry_type,\n    duration,\n    duration_unit,\n    duration_units_list,\n    duration_t,\n    expiry_date,\n    expiry_time,\n    expiry_type,\n    getDurationFromUnit,\n    hasDurationUnit,\n    is_advanced_duration,\n    is_minimized,\n    min_value,\n    max_value,\n    onChange,\n    onChangeUiStore,\n    onChangeMultiple,\n    simple_duration_unit,\n    server_time,\n    start_date,\n    market_open_times,\n    contract_type,\n}) => {\n    React.useEffect(() => {\n        if (contract_type === 'vanilla') {\n            onToggleDurationType({ target: { value: true, name: 'is_advanced_duration' } });\n        }\n    }, [contract_type]);\n\n    const expiry_list = [{ text: localize('Duration'), value: 'duration' }];\n\n    const has_end_time = expiry_list.find(expiry => expiry.value === 'endtime');\n    if (duration_units_list.length === 1 && duration_unit === 't') {\n        if (has_end_time) {\n            expiry_list.pop(); // remove end time for contracts with only tick duration\n        }\n    } else if (!has_end_time) {\n        expiry_list.push({ text: localize('End time'), value: 'endtime' });\n    }\n\n    if (is_minimized) {\n        const moment_expiry = toMoment(expiry_date);\n        const duration_unit_text = (duration_units_list.find(o => o.value === duration_unit) || {}).text;\n        return (\n            <div className='fieldset-minimized fieldset-minimized__duration'>\n                {expiry_type === 'duration'\n                    ? `${duration} ${duration_unit_text}`\n                    : `${moment_expiry.format('ddd - DD MMM, YYYY')}\\n${expiry_time}`}\n            </div>\n        );\n    }\n\n    const changeDurationUnit = ({ target }) => {\n        const { name, value } = target;\n        const duration_value = getDurationFromUnit(value);\n\n        onChangeUiStore({ name, value });\n        onChangeMultiple({\n            duration_unit: value,\n            duration: duration_value,\n        });\n    };\n\n    const changeDurationValue = ({ target }) => {\n        const { name, value } = target;\n        const duration_name = `duration_${is_advanced_duration ? advanced_duration_unit : simple_duration_unit}`;\n\n        // e.target.value returns string, we need to convert them to number\n        onChangeUiStore({ name: duration_name, value: +value });\n        onChange({ target: { name, value: +value } });\n    };\n\n    const onToggleDurationType = ({ target }) => {\n        const { name, value: is_advanced } = target;\n        onChangeUiStore({ name, value: is_advanced });\n\n        // replace selected duration unit and duration if the contract doesn't have that duration unit\n        let current_duration_unit = is_advanced ? advanced_duration_unit : simple_duration_unit;\n        const duration_value = getDurationFromUnit(current_duration_unit);\n        if (!hasDurationUnit(current_duration_unit, is_advanced)) {\n            current_duration_unit = duration_units_list[0].value;\n            onChangeUiStore({\n                name: `${is_advanced ? 'advanced' : 'simple'}_duration_unit`,\n                value: current_duration_unit,\n            });\n        }\n\n        const new_trade_store_values = {};\n\n        // simple only has expiry type of duration\n        if (!is_advanced && expiry_type !== 'duration') {\n            new_trade_store_values.expiry_type = 'duration';\n        }\n        if (is_advanced && expiry_type !== advanced_expiry_type) {\n            new_trade_store_values.expiry_type = advanced_expiry_type;\n        }\n\n        const has_same_duration = current_duration_unit === duration_unit && duration_value === duration;\n        if (!has_same_duration) {\n            new_trade_store_values.duration_unit = current_duration_unit;\n            new_trade_store_values.duration = duration_value;\n        }\n\n        const should_update_trade_store = Object.keys(new_trade_store_values).length;\n        if (should_update_trade_store) {\n            onChangeMultiple({ ...new_trade_store_values });\n        }\n    };\n\n    const props = {\n        shared_input: {\n            is_hj_whitelisted: true,\n            onChange: changeDurationValue,\n            max_value,\n            min_value,\n        },\n        number_input: {\n            type: 'number',\n            is_incrementable: true,\n        },\n    };\n\n    // e.g. digit contracts only has range slider - does not have toggle between advanced / simple\n    const has_toggle = expiry_list.length > 1 || duration_units_list.length > 1;\n\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', {\n                'trade-container__fieldset--advanced': is_advanced_duration,\n            })}\n        >\n            {duration_units_list.length === 1 && !is_advanced_duration && (\n                <Dropdown\n                    classNameDisplay='dc-dropdown__display--duration'\n                    disabled={false}\n                    id='duration'\n                    is_alignment_left\n                    is_nativepicker={false}\n                    list={duration_units_list}\n                    name='simple_duration_unit'\n                    no_border={true}\n                    onChange={changeDurationUnit}\n                    value={simple_duration_unit}\n                />\n            )}\n            {!has_toggle && <RangeSlider name='duration' value={duration_t} {...props.shared_input} />}\n            {has_toggle && (\n                <>\n                    {is_advanced_duration && (\n                        <AdvancedDuration\n                            advanced_expiry_type={advanced_expiry_type}\n                            advanced_duration_unit={advanced_duration_unit}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            expiry_date={expiry_date}\n                            expiry_list={expiry_list}\n                            expiry_type={expiry_type}\n                            getDurationFromUnit={getDurationFromUnit}\n                            market_open_times={market_open_times}\n                            number_input_props={props.number_input}\n                            onChange={onChange}\n                            onChangeUiStore={onChangeUiStore}\n                            server_time={server_time}\n                            shared_input_props={props.shared_input}\n                            start_date={start_date}\n                        />\n                    )}\n                    {!is_advanced_duration && (\n                        <SimpleDuration\n                            getDurationFromUnit={getDurationFromUnit}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            number_input_props={props.number_input}\n                            shared_input_props={props.shared_input}\n                            simple_duration_unit={simple_duration_unit}\n                        />\n                    )}\n                    {contract_type !== 'vanilla' && (\n                        <DurationToggle\n                            name={'is_advanced_duration'}\n                            onChange={onToggleDurationType}\n                            value={is_advanced_duration}\n                        />\n                    )}\n                </>\n            )}\n        </Fieldset>\n    );\n};\n\nDuration.propTypes = {\n    advanced_duration_unit: PropTypes.string,\n    advanced_expiry_type: PropTypes.string,\n    contract_type: PropTypes.string,\n    duration: PropTypes.number,\n    duration_t: PropTypes.number,\n    duration_unit: PropTypes.string,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    expiry_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expiry_time: PropTypes.string,\n    expiry_type: PropTypes.string,\n    getDurationFromUnit: PropTypes.func,\n    hasDurationUnit: PropTypes.func,\n    is_advanced_duration: PropTypes.bool,\n    is_minimized: PropTypes.bool,\n    market_open_times: PropTypes.array,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    number_input: PropTypes.object,\n    onChange: PropTypes.func,\n    onChangeMultiple: PropTypes.func,\n    onChangeUiStore: PropTypes.func,\n    server_time: PropTypes.object,\n    shared_input: PropTypes.object,\n    simple_duration_unit: PropTypes.string,\n    start_date: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    validation_errors: PropTypes.object,\n};\n\nexport default Duration;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport { getDurationMinMaxValues } from '@deriv/shared';\nimport Duration from './duration.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst DurationWrapper = observer(() => {\n    const { ui } = useStore();\n    const {\n        advanced_expiry_type,\n        advanced_duration_unit,\n        getDurationFromUnit,\n        is_advanced_duration,\n        onChangeUiStore,\n        simple_duration_unit,\n        duration_t,\n    } = ui;\n    const {\n        contract_expiry_type,\n        contract_type,\n        duration,\n        duration_unit,\n        duration_units_list,\n        duration_min_max,\n        expiry_type,\n        expiry_date,\n        expiry_time,\n        start_date,\n        market_open_times,\n        onChange,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const duration_props = {\n        advanced_expiry_type,\n        advanced_duration_unit,\n        getDurationFromUnit,\n        is_advanced_duration,\n        onChangeUiStore,\n        simple_duration_unit,\n        contract_expiry_type,\n        duration,\n        duration_unit,\n        duration_t,\n        duration_units_list,\n        duration_min_max,\n        expiry_type,\n        expiry_date,\n        expiry_time,\n        start_date,\n        market_open_times,\n        onChange,\n        onChangeMultiple,\n        contract_type,\n    };\n\n    const hasDurationUnit = (duration_type, is_advanced) => {\n        let duration_list = [...duration_units_list];\n\n        if (duration_list.length > 1 && !is_advanced) {\n            duration_list = duration_list.filter(du => du.value === 'm' || du.value === 't');\n        }\n\n        return duration_list.some(du => du.value === duration_type);\n    };\n\n    const setDurationUnit = () => {\n        if (duration_units_list?.length > 0) {\n            const new_duration_unit = duration_units_list[0].value;\n            const new_duration_value = getDurationFromUnit(new_duration_unit);\n\n            onChangeUiStore({\n                name: `${is_advanced_duration ? 'advanced' : 'simple'}_duration_unit`,\n                value: new_duration_unit,\n            });\n            onChangeMultiple({\n                duration_unit: new_duration_unit,\n                duration: +new_duration_value,\n            });\n        }\n    };\n\n    const handleEndTime = () => {\n        const symbol_has_endtime = duration_units_list.length > 1 || is_advanced_duration;\n\n        if (symbol_has_endtime) {\n            // simple duration does not have endtime\n            if (!is_advanced_duration) onChangeUiStore({ name: 'is_advanced_duration', value: true });\n\n            onChangeUiStore({ name: 'advanced_expiry_type', value: 'endtime' });\n        } else {\n            // If query string contains endtime but contract type does not e.g. digits (only ticks contracts)\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n    };\n\n    const assertDurationIsWithinBoundary = React.useCallback(\n        current_duration => {\n            const [min_value, max_value] = getDurationMinMaxValues(\n                duration_min_max,\n                contract_expiry_type,\n                duration_unit\n            );\n            if (contract_expiry_type === 'tick' && current_duration < min_value) {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: min_value });\n                onChange({ target: { name: 'duration', value: min_value } });\n            }\n\n            if (!(current_duration < min_value) && current_duration > max_value && duration_unit !== 'd') {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: max_value });\n                onChange({ target: { name: 'duration', value: max_value } });\n            }\n        },\n        [contract_expiry_type, duration_unit, duration_min_max, onChange, onChangeUiStore]\n    );\n\n    React.useEffect(() => {\n        if (duration_unit === 'd') {\n            onChangeUiStore({\n                name: 'is_advanced_duration',\n                value: true,\n            });\n        }\n    }, [duration_unit, onChangeUiStore]);\n\n    React.useEffect(() => {\n        const current_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n        const current_duration = getDurationFromUnit(current_unit);\n\n        if (duration_unit !== current_unit) {\n            onChangeUiStore({\n                name: `${is_advanced_duration ? 'advanced' : 'simple'}_duration_unit`,\n                value: duration_unit,\n            });\n        }\n\n        if (+duration !== +current_duration) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        if (expiry_type === 'endtime') handleEndTime();\n\n        assertDurationIsWithinBoundary(current_duration);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        if (is_advanced_duration && expiry_type !== advanced_expiry_type) {\n            onChange({ target: { name: 'expiry_type', value: advanced_expiry_type } });\n        }\n    }, [is_advanced_duration, expiry_type, advanced_expiry_type, onChange]);\n\n    // intercept changes to contract duration and check that trade_store and ui_store are aligned.\n    React.useEffect(() => {\n        const current_duration = getDurationFromUnit(duration_unit);\n        const simple_is_not_type_duration = !is_advanced_duration && expiry_type !== 'duration';\n\n        // simple only has expiry type duration\n        if (simple_is_not_type_duration) {\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n\n        if (duration !== current_duration) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        assertDurationIsWithinBoundary(current_duration);\n    }, [\n        duration_unit,\n        is_advanced_duration,\n        expiry_type,\n        duration,\n        assertDurationIsWithinBoundary,\n        onChange,\n        onChangeUiStore,\n        getDurationFromUnit,\n    ]);\n\n    const current_duration_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n    const has_missing_duration_unit = !hasDurationUnit(current_duration_unit, is_advanced_duration);\n    const simple_is_missing_duration_unit =\n        !is_advanced_duration && simple_duration_unit === 'd' && duration_units_list.length === 4;\n    const [min_value, max_value] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, duration_unit);\n\n    if (has_missing_duration_unit || simple_is_missing_duration_unit) {\n        setDurationUnit();\n    }\n\n    return (\n        <Duration hasDurationUnit={hasDurationUnit} max_value={max_value} min_value={min_value} {...duration_props} />\n    );\n});\n\nDurationWrapper.propTypes = {\n    duration_d: PropTypes.number,\n    duration_h: PropTypes.number,\n    duration_m: PropTypes.number,\n    duration_s: PropTypes.number,\n    duration_unit: PropTypes.string,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    getDurationFromUnit: PropTypes.func,\n    is_minimized: PropTypes.bool,\n    sessions: MobxPropTypes.arrayOrObservableArray,\n    start_time: PropTypes.string,\n    symbol: PropTypes.string,\n};\n\nexport default DurationWrapper;\n","import DurationWrapper from './duration-wrapper.jsx';\n\nexport default DurationWrapper;\n","import React from 'react';\nimport { Checkbox, Dropdown, Popover, PopoverMessageCheckbox } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport Fieldset from 'App/Components/Form/fieldset.jsx';\nimport { onToggleCancellation, onChangeCancellationDuration } from 'Stores/Modules/Trading/Helpers/multiplier';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst CancelDeal = observer(() => {\n    const { ui } = useStore();\n    const {\n        cancellation_range_list,\n        cancellation_duration,\n        has_cancellation,\n        has_stop_loss,\n        has_take_profit,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const { should_show_cancellation_warning, toggleCancellationWarning } = ui;\n\n    const should_show_popover = (has_take_profit || has_stop_loss) && should_show_cancellation_warning;\n    const [is_do_not_show_selected, setDoNotShowSelected] = React.useState(!should_show_cancellation_warning);\n\n    const onPopoverClose = () => {\n        if (is_do_not_show_selected) {\n            toggleCancellationWarning();\n        }\n    };\n\n    const onPopoverCheckboxChange = React.useCallback(() => {\n        setDoNotShowSelected(prev_state => !prev_state);\n    }, []);\n\n    const input = (\n        <Checkbox\n            id='dt_cancellation-checkbox_input'\n            onChange={() => onToggleCancellation({ has_cancellation, onChangeMultiple })}\n            name='has_cancellation'\n            label={localize('Deal cancellation')}\n            defaultChecked={has_cancellation}\n        />\n    );\n\n    return (\n        <Fieldset className='trade-container__fieldset'>\n            <div className='dc-input-wrapper--inline'>\n                {should_show_popover ? (\n                    <Popover\n                        alignment='left'\n                        classNameBubble='trade-container__popover'\n                        is_bubble_hover_enabled\n                        margin={2}\n                        message={\n                            <PopoverMessageCheckbox\n                                defaultChecked={is_do_not_show_selected}\n                                checkboxLabel={localize(\"Don't show this again\")}\n                                message={localize(\n                                    'Take profit and/or stop loss are not available while deal cancellation is active.'\n                                )}\n                                name='should_show_cancellation_warning'\n                                onChange={onPopoverCheckboxChange}\n                            />\n                        }\n                        onBubbleClose={onPopoverClose}\n                        relative_render\n                    >\n                        {input}\n                    </Popover>\n                ) : (\n                    <React.Fragment>{input}</React.Fragment>\n                )}\n                <Popover\n                    alignment='left'\n                    icon='info'\n                    id='dt_cancellation-checkbox__tooltip'\n                    is_bubble_hover_enabled\n                    message={localize(\n                        'Cancel your trade anytime within a chosen time-frame. Triggered automatically if your trade reaches the stop out level within the chosen time-frame.'\n                    )}\n                    classNameBubble='trade-container__deal-cancellation-popover'\n                    margin={216}\n                    relative_render\n                />\n            </div>\n            {has_cancellation && (\n                <Dropdown\n                    id='dt_cancellation_range'\n                    className='trade-container__multiplier-dropdown'\n                    is_alignment_left\n                    is_nativepicker={false}\n                    list={cancellation_range_list}\n                    name='cancellation_duration'\n                    no_border={true}\n                    value={cancellation_duration}\n                    onChange={event => onChangeCancellationDuration({ event, onChangeMultiple })}\n                />\n            )}\n        </Fieldset>\n    );\n});\n\nexport default CancelDeal;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport NumberSelector from 'App/Components/Form/number-selector.jsx';\nimport Fieldset from 'App/Components/Form/fieldset.jsx';\nimport { getGrowthRatePercentage, getTickSizeBarrierPercentage, isEmptyObject } from '@deriv/shared';\nimport classNames from 'classnames';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst Accumulator = observer(() => {\n    const { accumulator_range_list, growth_rate, is_accumulator, onChange, tick_size_barrier, proposal_info } =\n        useTraderStore();\n\n    // splitting accumulator_range_list into rows containing 5 values each:\n    const arr_arr_numbers = accumulator_range_list.reduce((acc, _el, index) => {\n        if (index % 5 === 0) {\n            acc.push(accumulator_range_list.slice(index, index + 5));\n        }\n        return acc;\n    }, []);\n    const has_error_or_not_loaded =\n        proposal_info?.ACCU?.has_error || !proposal_info?.ACCU?.id || isEmptyObject(proposal_info);\n    if (!accumulator_range_list.length) return null;\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', 'accumulator')}\n            header={localize('Growth rate')}\n            is_center\n            is_tooltip_disabled={has_error_or_not_loaded && is_accumulator}\n            header_tooltip={localize(\n                'Your stake will grow at {{growth_rate}}% per tick as long as the current spot price remains within ±{{tick_size_barrier}} from the previous spot price.',\n                {\n                    growth_rate: getGrowthRatePercentage(growth_rate),\n                    tick_size_barrier: getTickSizeBarrierPercentage(tick_size_barrier),\n                }\n            )}\n        >\n            <NumberSelector\n                arr_arr_numbers={arr_arr_numbers}\n                name='growth_rate'\n                onChange={onChange}\n                selected_number={growth_rate}\n                should_show_in_percents\n            />\n        </Fieldset>\n    );\n});\n\nexport default Accumulator;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport Amount from 'Modules/Trading/Components/Form/TradeParams/amount.jsx';\nimport Barrier from 'Modules/Trading/Components/Form/TradeParams/barrier.jsx';\nimport Duration from 'Modules/Trading/Components/Form/TradeParams/Duration';\nimport LastDigit from 'Modules/Trading/Components/Form/TradeParams/last-digit.jsx';\nimport CancelDeal from 'Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal.jsx';\nimport Accumulator from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator.jsx';\nimport StopLoss from 'Modules/Trading/Components/Form/TradeParams/Multiplier/stop-loss.jsx';\nimport TakeProfit from 'Modules/Trading/Components/Form/TradeParams/Multiplier/take-profit.jsx';\nimport Expiration from 'Modules/Trading/Components/Form/TradeParams/Multiplier/expiration.jsx';\nimport AccumulatorsInfoDisplay from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulators-info-display.jsx';\nimport Strike from 'Modules/Trading/Components/Form/TradeParams/strike.jsx';\nimport VanillaTradeTypes from 'Modules/Trading/Components/Form/TradeParams/vanilla-trade-types.jsx';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport Fieldset from 'App/Components/Form/fieldset.jsx';\n\nconst TradeParams = observer(({ is_minimized }) => {\n    const { form_components } = useTraderStore();\n    const isVisible = component_key => {\n        return form_components.includes(component_key);\n    };\n    return (\n        <React.Fragment>\n            {isVisible('duration') && <Duration key={'duration'} is_minimized={is_minimized} />}\n            {isVisible('barrier') && <Barrier key={'barrier'} is_minimized={is_minimized} />}\n            {isVisible('last_digit') && <LastDigit key={'last_digit'} is_minimized={is_minimized} />}\n            {isVisible('accumulator') && <Accumulator key={'accumulator'} />}\n            <Fieldset className={classNames('trade-container__fieldset', 'trade-container__fieldset--no-padding')}>\n                {isVisible('vanilla_trade_type') && <VanillaTradeTypes key={'vanilla_trade_type'} />}\n                {isVisible('strike') && <Strike key={'strike'} />}\n                {isVisible('amount') && <Amount key={'amount'} is_minimized={is_minimized} />}\n            </Fieldset>\n            {isVisible('take_profit') && <TakeProfit key={'take_profit'} />}\n            {isVisible('stop_loss') && <StopLoss key={'stop_loss'} />}\n            {isVisible('cancellation') && <CancelDeal key={'cancellation'} />}\n            {isVisible('expiration') && <Expiration key={'expiration'} />}\n            {isVisible('accu_info_display') && <AccumulatorsInfoDisplay key={'accu_info_display'} />}\n        </React.Fragment>\n    );\n});\nTradeParams.propTypes = {\n    is_minimized: PropTypes.bool,\n};\n\nexport default TradeParams;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { TradeParamsLoader } from 'App/Components/Elements/ContentLoader';\nimport Fieldset from 'App/Components/Form/fieldset.jsx';\nimport ContractType from '../../Containers/contract-type.jsx';\nimport Purchase from '../../Containers/purchase.jsx';\nimport TradeParams from '../../Containers/trade-params.jsx';\n\nconst ScreenLarge = ({ is_market_closed, is_trade_enabled }) => (\n    <div\n        className={classNames('sidebar__items', {\n            'sidebar__items--market-closed': is_market_closed,\n        })}\n    >\n        {!is_trade_enabled ? (\n            <TradeParamsLoader speed={2} />\n        ) : (\n            <React.Fragment>\n                <Fieldset className='trade-container__fieldset trade-types'>\n                    <ContractType />\n                </Fieldset>\n                <TradeParams />\n                <div className='purchase-container'>\n                    <Purchase is_market_closed={is_market_closed} />\n                </div>\n            </React.Fragment>\n        )}\n    </div>\n);\n\nScreenLarge.propTypes = {\n    is_market_closed: PropTypes.bool,\n    is_trade_enabled: PropTypes.bool,\n};\n\nexport default ScreenLarge;\n"],"names":["AllowEquals","contract_start_type","contract_type","contract_types_list","duration_unit","expiry_type","onChange","value","has_equals_only","has_callputequal_duration","hasDurationForCallPutEqual","has_callputequal","hasCallPutEqual","isRiseFallEqual","className","Checkbox","id","e","persist","target","name","checked","Number","defaultChecked","label","localize","classNameLabel","disabled","Popover","alignment","classNameTarget","icon","message","margin","relative_render","propTypes","PropTypes","Multiplier","observer","useTraderStore","multiplier","multiplier_range_list","Dropdown","is_alignment_left","is_nativepicker","list","no_border","Input","amount","currency","current_focus","error_messages","is_single_currency","setCurrentFocus","InputField","classNameInlinePrefix","classNameInput","fractional_digits","getDecimalPlaces","inline_prefix","is_autocomplete_disabled","is_float","is_hj_whitelisted","is_incrementable","is_negative_disabled","max_length","AMOUNT_MAX_LENGTH","type","ariaLabel","Amount","is_minimized","useStore","ui","client","currencies_list","vanilla_trade_type","basis","basis_list","is_accumulator","is_equal","is_multiplier","validation_errors","stake_boundary","find","o","text","classNames","toLowerCase","addComma","header","includes","undefined","header_tooltip","Localize","i18n_default_text","length","ButtonToggle","buttons_arr","map","item","is_animated","initial_offset","parseInt","should_show_tooltip","is_tooltip_relative","Text","size","min_stake","max_stake","TickSteps","hover_value","max_value","min_value","onClick","onMouseEnter","onMouseLeave","arr_ticks","Array","keys","isActive","idx","isMarked","isMarkedOnHover","key","RangeSlider","React","setHoverValue","range_slider_ref","nativeEvent","offsetX","offsetY","resetOnHover","getRangeSliderTrackWidth","slider_value","is_hover","current","style","width","display_value","htmlFor","max","min","target_value","tabIndex","ref","index","align","weight","color","DurationToggle","icon_className","Icon","classNamePath","i","TradingDatePicker","is_24_hours_contract","mode","server_time","common","current_duration","duration","duration_min_max","duration_units_list","start_date","start_time","symbol","isMounted","useIsMounted","disabled_days","setDisabledDays","market_events","setMarketEvents","setDuration","selected_date","setSelectedDate","onChangeCalendarMonth","getMomentContractStartDateTime","setTime","toMoment","hasIntradayDurationUnit","clone","add","daily","isTimeValid","format","getMaxDailyDuration","getMinDateExpiry","is_duration_contract","min_date","startOf","hasRangeSelection","new_market_events","new_disabled_days","ContractType","forEach","evt","dates","split","indexOf","push","descrip","has_error","Tooltip","DatePicker","display_format","show_leading_icon","error","max_date","has_range_selection","has_today_btn","footer","events","keep_open","readOnly","isBetween","to_compare_moment","start_times_moment","end_times_moment","Dialog","preClass","selected_time","end_times","start_times","end_time","hour","minute","seconds","milliseconds","hours","a","slice","minutes","selectOption","current_value","prev_value","prev_hour","prev_minute","h","start_times_reset_minute","is_hour_enabled","is_minute_enabled","is_enabled","mm","class_prefix","TimePicker","padding","placeholder","is_open","setIsOpen","wrapper_ref","setWrapperRef","document","addEventListener","handleClickOutside","removeEventListener","handleChange","arg","event","contains","node","is_read_only","CSSTransition","in","enter","enterDone","exit","timeout","unmountOnExit","is_clearable","getClosestTime","time","interval","Math","ceil","expiry_date","expiry_time","market_open_times","market_close_times","is_market_closed","moment_expiry_date","market_open_datetimes","open_time","market_close_datetimes","close_time","expiry_datetime","server_datetime","boundaries","start","isBefore","end","getBoundaries","isAfter","getSelectedTime","AdvancedDuration","advanced_duration_unit","advanced_expiry_type","duration_t","changeDurationUnit","getDurationFromUnit","expiry_list","number_input_props","onChangeUiStore","shared_input_props","contract_expiry_type","has_intraday_duration_unit","isSame","endtime_container_class","classNameDisplay","ticks","MobxPropTypes","SimpleDuration","arr","filtered_arr","simple_duration_unit","has_label","some","du","filter","Duration","hasDurationUnit","is_advanced_duration","onChangeMultiple","onToggleDurationType","has_end_time","expiry","pop","moment_expiry","duration_unit_text","duration_value","is_advanced","current_duration_unit","new_trade_store_values","Object","props","shared_input","duration_name","number_input","has_toggle","DurationWrapper","duration_props","duration_type","duration_list","assertDurationIsWithinBoundary","getDurationMinMaxValues","current_unit","has_missing_duration_unit","simple_is_missing_duration_unit","new_duration_unit","new_duration_value","setDurationUnit","duration_d","duration_h","duration_m","duration_s","sessions","cancellation_range_list","cancellation_duration","has_cancellation","has_stop_loss","has_take_profit","should_show_cancellation_warning","toggleCancellationWarning","should_show_popover","is_do_not_show_selected","setDoNotShowSelected","onPopoverCheckboxChange","prev_state","input","onToggleCancellation","classNameBubble","is_bubble_hover_enabled","PopoverMessageCheckbox","checkboxLabel","onBubbleClose","onChangeCancellationDuration","accumulator_range_list","growth_rate","tick_size_barrier","proposal_info","arr_arr_numbers","reduce","acc","_el","has_error_or_not_loaded","ACCU","isEmptyObject","is_center","is_tooltip_disabled","getGrowthRatePercentage","getTickSizeBarrierPercentage","selected_number","should_show_in_percents","TradeParams","form_components","isVisible","component_key","ScreenLarge","is_trade_enabled","speed"],"sourceRoot":""}