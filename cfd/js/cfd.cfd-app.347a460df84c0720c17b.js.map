{"version":3,"file":"cfd/js/cfd.cfd-app.347a460df84c0720c17b.js","mappings":"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","sources":["webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/index.tsx","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derived.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-financial.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-cfds.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-swap-free.svg","webpack://@deriv/cfd/./src/Components/cfd-account-copy.tsx","webpack://@deriv/cfd/./src/Components/success-dialog.jsx","webpack://@deriv/cfd/./src/Containers/cfd-change-password-confirmation.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dbvi-onboarding.tsx","webpack://@deriv/cfd/./src/Components/cfd-personal-details-form.tsx","webpack://@deriv/cfd/./src/Components/cfd-poa.tsx","webpack://@deriv/cfd/./src/Components/cfd-poi.tsx","webpack://@deriv/cfd/./src/Containers/cfd-personal-details-container.tsx","webpack://@deriv/cfd/./src/Containers/cfd-financial-stp-real-account-signup.tsx","webpack://@deriv/cfd/./src/Containers/trading-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-manager-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-server-error-dialog.tsx","webpack://@deriv/cfd/./src/Containers/cfd-top-up-demo-modal.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-content.tsx","webpack://@deriv/cfd/./src/Constants/cfd_compare_account_content.ts","webpack://@deriv/cfd/./src/Containers/mt5-compare-table-content.tsx","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-compare-content.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-modal.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-verification-contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-back.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-clickable-description.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-title-indicator.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-section.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-front.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-svg-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-bvi-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-vanuatu-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-labuan-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction_maltainvest_contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-checkbox.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-foot-note.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content-wrapper.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal.tsx","webpack://@deriv/cfd/./src/Containers/dmt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/derivx-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/mt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/constants.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Utils/Validator/errors.js","webpack://@deriv/cfd/./src/Utils/Validator/validator.js","webpack://@deriv/cfd/./src/Utils/Validator/index.js","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js","webpack://@deriv/cfd/./src/Stores/connect.js","webpack://@deriv/cfd/./src/_common/utility.js","webpack://@deriv/cfd/./src/Containers/missing-real-account.tsx","webpack://@deriv/cfd/./src/templates/_common/components/loading.tsx","webpack://@deriv/cfd/./src/Containers/loading-cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Constants/cfd-shared-strings.js","webpack://@deriv/cfd/./src/Components/cfd-download-container.tsx","webpack://@deriv/cfd/./src/Containers/switch-to-real-account.tsx","webpack://@deriv/cfd/./src/Components/cfd-account-card.tsx","webpack://@deriv/cfd/./src/Constants/cfd-specifications.ts","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-mt5-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dashboard.tsx","webpack://@deriv/cfd/./src/Containers/index.js","webpack://@deriv/cfd/./src/Constants/routes-config.js","webpack://@deriv/cfd/./src/Components/Routes/helpers.js","webpack://@deriv/cfd/./src/Components/Routes/binary-link.jsx","webpack://@deriv/cfd/./src/Components/Routes/route-with-sub-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/binary-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/index.js","webpack://@deriv/cfd/./src/Components/Errors/error-component.jsx","webpack://@deriv/cfd/./src/Containers/routes.jsx","webpack://@deriv/cfd/./src/Stores/Modules/index.js","webpack://@deriv/cfd/./src/Stores/index.js","webpack://@deriv/cfd/./src/_common/base/server_time.js","webpack://@deriv/cfd/./src/init-store.js","webpack://@deriv/cfd/./src/app.tsx","webpack://@deriv/cfd/../stores/src/storeContext.ts","webpack://@deriv/cfd/../api/src/APIProvider.tsx","webpack://@deriv/cfd/../api/src/useSubscription.ts","webpack://@deriv/cfd/../stores/src/useStore.ts","webpack://@deriv/cfd/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/cfd/../stores/src/stores/BaseStore.ts","webpack://@deriv/cfd/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/cfd/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/cfd/../stores/src/storeProvider.tsx"],"sourcesContent":["import React from 'react';\nimport Derived from './ic-appstore-derived.svg';\nimport Financial from './ic-appstore-financial.svg';\nimport CFDs from './ic-appstore-cfds.svg';\nimport SwapFree from './ic-appstore-swap-free.svg';\n\nexport interface IconProps<T> {\n    icon: T;\n    className?: string;\n    size?: number;\n    onClick?: () => void;\n}\n\nexport const PlatformIcons = {\n    Derived,\n    Financial,\n    CFDs,\n    SwapFree,\n};\n\nconst TradingPlatformIcon = ({ icon, className, size, onClick }: IconProps<keyof typeof PlatformIcons>) => {\n    const PlatformIcon = PlatformIcons[icon] as React.ElementType;\n\n    return PlatformIcon ? (\n        <PlatformIcon className={className} style={{ width: size, height: size }} onClick={onClick} />\n    ) : null;\n};\n\nexport default TradingPlatformIcon;\n","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#2A3052\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM10.87 28.81l.15.02h.21c.47 0 .82-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.16 0-.36 0-.58-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.35 0 .67.04.96.12.3.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm2-2.12c.63 0 1.1.11 1.44.34.33.22.5.56.5 1.03 0 .29-.07.53-.2.71-.14.18-.33.32-.58.43a5.31 5.31 0 01.53.78 10.05 10.05 0 01.5.92h-1.05a49.79 49.79 0 00-.23-.42 6.82 6.82 0 00-.24-.4 7.53 7.53 0 00-.24-.38 3.8 3.8 0 00-.24-.32h-.47v1.52h-.93v-4.1a5.31 5.31 0 01.63-.09 8.2 8.2 0 01.59-.02zm.06.8a2.63 2.63 0 00-.34.02v1.12h.27c.35 0 .6-.04.75-.13.16-.09.23-.24.23-.45 0-.2-.07-.35-.23-.43a1.38 1.38 0 00-.68-.13zm3.88 3.4a31.27 31.27 0 01-.94-2.2 58.21 58.21 0 01-.72-1.95h1.03l.26.78.3.83.28.79.26.65a17.1 17.1 0 00.54-1.44 96.8 96.8 0 00.55-1.61h1l-.32.9a37.71 37.71 0 01-.86 2.17l-.48 1.09h-.9z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#71BD0E\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM11.54 29.58v-4.16h2.78v.79h-1.84v.87h1.64v.78h-1.64v1.72h-.94zm3.45-4.16h.93v4.16H15v-4.16zm4.68 4.16a20.92 20.92 0 00-.87-1.41 14.33 14.33 0 00-1-1.32v2.73h-.92v-4.16h.77a7.33 7.33 0 01.92 1.1 15.66 15.66 0 01.96 1.35v-2.45h.93v4.16h-.79z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#FF8C00\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zm-14.3 14.12c-.68 0-1.2-.19-1.55-.57-.36-.37-.53-.9-.53-1.6 0-.34.05-.65.16-.91a1.84 1.84 0 011.12-1.11 2.42 2.42 0 011.32-.1c.15.02.27.05.38.08a1.68 1.68 0 01.43.19l-.27.76a2.25 2.25 0 00-.45-.18 2.1 2.1 0 00-.58-.07c-.14 0-.29.02-.43.07a.97.97 0 00-.36.24c-.1.1-.19.24-.25.4a1.72 1.72 0 00-.1.62c0 .19.02.37.06.54.04.16.11.3.2.42.1.12.22.22.38.29.15.07.33.1.55.1a2.52 2.52 0 00.65-.08 1.77 1.77 0 00.22-.07l.18-.08.26.75a2.2 2.2 0 01-.56.21c-.24.07-.52.1-.84.1zm1.99-.09v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.65v1.72h-.93zm4.38-.76l.15.02h.21c.47 0 .81-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.17 0-.36 0-.59-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.36 0 .68.04.97.12.29.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm1.63 1.44a.9.9 0 00.35-.04c.07-.04.1-.1.1-.2 0-.06-.04-.12-.13-.18a2.31 2.31 0 00-.4-.18 4.45 4.45 0 01-.38-.16 1.18 1.18 0 01-.3-.2.84.84 0 01-.18-.28 1.03 1.03 0 01-.06-.4c0-.3.1-.52.33-.7.22-.17.52-.25.9-.25a2.75 2.75 0 01.97.16l-.15.7a3.2 3.2 0 00-.34-.1 1.8 1.8 0 00-.41-.04c-.28 0-.42.07-.42.23 0 .04 0 .07.02.1a.23.23 0 00.07.08 1.77 1.77 0 00.38.18c.2.07.36.14.49.22.13.06.23.14.3.22.07.08.13.17.15.27.04.1.05.22.05.35a.8.8 0 01-.35.7c-.23.17-.56.25-1 .25a2.9 2.9 0 01-.7-.07 2.85 2.85 0 01-.38-.12l.15-.73a2.41 2.41 0 00.94.2z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M26 0H6a6 6 0 00-6 6v17.5h32V6a6 6 0 00-6-6z\" fill=\"#0364B9\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm26 6c0-1.5-.55-2.88-1.47-3.93L26.6 23.5H32V6z\" fill=\"#0A559E\" /><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#0CC\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zM11.31 28.87c.13 0 .24 0 .32-.03a.69.69 0 00.21-.09.32.32 0 00.11-.14.48.48 0 00.03-.17c0-.14-.06-.25-.19-.34-.13-.09-.35-.19-.66-.3a5.76 5.76 0 01-.4-.15 1.63 1.63 0 01-.38-.24 1.17 1.17 0 01-.26-.34 1.09 1.09 0 01-.1-.5 1.11 1.11 0 01.41-.91c.14-.1.3-.18.48-.24.2-.06.4-.09.64-.09a2.59 2.59 0 011.23.29l-.27.74a2.33 2.33 0 00-.39-.16 1.58 1.58 0 00-.51-.07.93.93 0 00-.49.1c-.1.05-.14.15-.14.28 0 .07.02.14.05.19.04.05.09.1.15.14l.23.12.29.1c.22.08.4.16.56.24.16.07.3.16.4.27a.97.97 0 01.24.36c.05.14.08.31.08.51 0 .4-.14.7-.41.91-.27.21-.68.32-1.23.32-.18 0-.35-.01-.5-.04a2.48 2.48 0 01-.69-.18 2.41 2.41 0 01-.2-.1l.26-.74c.13.06.28.13.46.18a2.5 2.5 0 00.67.08zm5.09-3l.15.56.2.63.2.66c.06.22.13.43.2.62a18.97 18.97 0 00.3-1.41 62.02 62.02 0 00.28-1.5h.97a40.98 40.98 0 01-.49 2.11c-.18.72-.37 1.4-.59 2.04h-.85a28.26 28.26 0 01-.41-1.2l-.4-1.27-.38 1.27c-.13.42-.26.82-.4 1.2h-.86a32 32 0 01-.6-2.04c-.17-.71-.33-1.42-.47-2.11h1.01a43.02 43.02 0 00.28 1.5 58.65 58.65 0 00.33 1.4 12.62 12.62 0 00.4-1.28l.18-.63.15-.55h.8zm2.9 3.71v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.64v1.72h-.94z\" fill=\"#fff\" /></svg>);","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\nconst Checkmark = ({ className }) => (\n    <Icon className={className} icon='IcCheckmarkCircle' custom_color='var(--status-success)' size={24} />\n);\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel,\n    has_submit,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size,\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                >\n                    {icon}\n                    <Checkmark className='bottom-right-overlay' />\n                </div>\n                {!heading && (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                )}\n                {heading && heading}\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nSuccessDialog.defaultProps = {\n    icon_size: 'large',\n    has_cancel: false,\n    has_submit: true,\n};\n\nSuccessDialog.propTypes = {\n    classNameMessage: PropTypes.string,\n    has_cancel: PropTypes.bool,\n    has_close_icon: PropTypes.bool,\n    has_submit: PropTypes.bool,\n    heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    icon: PropTypes.object,\n    icon_size: PropTypes.string,\n    icon_type: PropTypes.string,\n    is_medium_button: PropTypes.bool,\n    is_open: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func,\n    text_cancel: PropTypes.string,\n    text_submit: PropTypes.string,\n    title: PropTypes.string,\n    toggleModal: PropTypes.func,\n    width: PropTypes.string,\n};\n\nexport default SuccessDialog;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik } from 'formik';\nimport { Text, Icon, FormSubmitButton } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, getCFDPlatformLabel } from '@deriv/shared';\nimport { TCFDChangePasswordConfirmationProps } from './props.types';\n\nconst ChangePasswordConfirmation = ({\n    confirm_label,\n    className,\n    platform,\n    onConfirm,\n    onCancel,\n    context,\n}: TCFDChangePasswordConfirmationProps) => (\n    <Formik\n        initialValues={{\n            password: '',\n        }}\n        onSubmit={onConfirm}\n    >\n        {({ isSubmitting, handleSubmit }) => (\n            <form onSubmit={handleSubmit} data-testid='dt_cfd_change_password_form'>\n                <div\n                    className={classNames('cfd-change-password-confirmation__wrapper', {\n                        [`${className}-wrapper`]: className,\n                    })}\n                >\n                    <div className={classNames('cfd-change-password-confirmation', className)}>\n                        <Icon\n                            className='cfd-change-password__icon'\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text as='p' align='center' size='s' weight='bold'>\n                            <Localize\n                                i18n_default_text='Confirm to change your {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text\n                            className='cfd-change-password-confirmation__description'\n                            as='p'\n                            align='center'\n                            color='loss-danger'\n                            size='xs'\n                        >\n                            <Localize\n                                i18n_default_text='This will change the password to all of your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <FormSubmitButton\n                            is_center={true}\n                            label={confirm_label || localize('Create')}\n                            cancel_label={localize('Cancel')}\n                            is_loading={isSubmitting}\n                            has_cancel={true}\n                            onCancel={onCancel}\n                            context={context}\n                        />\n                    </div>\n                </div>\n            </form>\n        )}\n    </Formik>\n);\n\nexport default ChangePasswordConfirmation;\n","import React from 'react';\nimport {\n    Button,\n    DesktopWrapper,\n    Icon,\n    Loading,\n    MobileDialog,\n    MobileWrapper,\n    Modal,\n    Text,\n    UILoader,\n} from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport RootStore from '../Stores/index';\nimport { PoiPoaDocsSubmitted } from '@deriv/account';\nimport { connect } from '../Stores/connect';\nimport { getAuthenticationStatusInfo, isMobile, WS, Jurisdiction } from '@deriv/shared';\nimport { AccountStatusResponse } from '@deriv/api-types';\nimport { TCFDDbviOnboardingProps } from './props.types';\nimport CFDFinancialStpRealAccountSignup from './cfd-financial-stp-real-account-signup';\n\nconst SwitchToRealAccountMessage = ({ onClickOk }: { onClickOk: () => void }) => (\n    <div className='da-icon-with-message'>\n        <Icon icon={'IcPoaLock'} size={128} />\n        <Text className='da-icon-with-message__text' as='p' size={isMobile() ? 'xs' : 's'} weight='bold'>\n            {localize('Switch to your real account to submit your documents')}\n        </Text>\n        <Button\n            has_effect\n            text={localize('Ok')}\n            onClick={() => {\n                onClickOk();\n            }}\n            className='da-icon-with-message__button'\n            primary\n        />\n    </div>\n);\n\nconst CFDDbviOnboarding = ({\n    account_status,\n    context,\n    disableApp,\n    enableApp,\n    fetchAccountSettings,\n    has_created_account_for_selected_jurisdiction,\n    has_submitted_cfd_personal_details,\n    is_cfd_verification_modal_visible,\n    is_virtual,\n    jurisdiction_selected_shortcode,\n    openPasswordModal,\n    toggleCFDVerificationModal,\n    updateAccountStatus,\n    updateMT5Status,\n}: TCFDDbviOnboardingProps) => {\n    const [showSubmittedModal, setShowSubmittedModal] = React.useState(true);\n    const [is_loading, setIsLoading] = React.useState(false);\n\n    const getAccountStatusFromAPI = () => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            const { get_account_status } = response;\n\n            if (get_account_status?.authentication) {\n                const { poi_acknowledged_for_vanuatu_maltainvest, poi_acknowledged_for_bvi_labuan, poa_acknowledged } =\n                    getAuthenticationStatusInfo(get_account_status);\n                if (jurisdiction_selected_shortcode === Jurisdiction.VANUATU) {\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_vanuatu_maltainvest &&\n                            poa_acknowledged &&\n                            has_submitted_cfd_personal_details\n                    );\n                } else if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n                    setShowSubmittedModal(poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged);\n                } else\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_cfd_personal_details\n                    );\n            }\n\n            setIsLoading(false);\n        });\n        setIsLoading(false);\n    };\n\n    React.useEffect(() => {\n        if (is_cfd_verification_modal_visible) {\n            setIsLoading(true);\n            getAccountStatusFromAPI();\n            fetchAccountSettings();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_cfd_verification_modal_visible]);\n\n    const getModalContent = () => {\n        if (is_loading) {\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <SwitchToRealAccountMessage onClickOk={toggleCFDVerificationModal} />;\n        }\n        return showSubmittedModal ? (\n            <PoiPoaDocsSubmitted\n                onClickOK={toggleCFDVerificationModal}\n                updateAccountStatus={updateAccountStatus}\n                account_status={account_status}\n                jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                has_created_account_for_selected_jurisdiction={has_created_account_for_selected_jurisdiction}\n                openPasswordModal={openPasswordModal}\n                context={context}\n            />\n        ) : (\n            <CFDFinancialStpRealAccountSignup\n                onFinish={() => {\n                    updateMT5Status();\n                    if (has_created_account_for_selected_jurisdiction) {\n                        setShowSubmittedModal(true);\n                    } else {\n                        toggleCFDVerificationModal();\n                        openPasswordModal();\n                    }\n                }}\n                context={context}\n            />\n        );\n    };\n\n    const getModalTitle = () =>\n        has_created_account_for_selected_jurisdiction\n            ? localize('Submit your proof of identity and address')\n            : localize('Add a real MT5 account');\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='cfd-financial-stp-modal'\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_open={is_cfd_verification_modal_visible}\n                    title={getModalTitle()}\n                    toggleModal={toggleCFDVerificationModal}\n                    height='700px'\n                    width='996px'\n                    context={context}\n                    onMount={() => getAccountStatusFromAPI()}\n                    exit_classname='cfd-modal--custom-exit'\n                >\n                    {getModalContent()}\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={getModalTitle()}\n                    wrapper_classname='cfd-financial-stp-modal'\n                    visible={is_cfd_verification_modal_visible}\n                    onClose={toggleCFDVerificationModal}\n                    context={context}\n                >\n                    {getModalContent()}\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n};\n\nexport default connect(({ client, modules: { cfd }, ui }: RootStore) => ({\n    account_status: client.account_status,\n    account_type: cfd.account_type,\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    fetchAccountSettings: client.fetchAccountSettings,\n    has_created_account_for_selected_jurisdiction: cfd.has_created_account_for_selected_jurisdiction,\n    has_submitted_cfd_personal_details: cfd.has_submitted_cfd_personal_details,\n    is_cfd_verification_modal_visible: cfd.is_cfd_verification_modal_visible,\n    is_virtual: client.is_virtual,\n    jurisdiction_selected_shortcode: cfd.jurisdiction_selected_shortcode,\n    mt5_login_list: client.mt5_login_list,\n    openPasswordModal: cfd.enableCFDPasswordModal,\n    toggleCFDVerificationModal: cfd.toggleCFDVerificationModal,\n    updateAccountStatus: client.updateAccountStatus,\n    updateMT5Status: client.updateMT5Status,\n}))(CFDDbviOnboarding);\n","import { Field, FieldProps, Formik, FormikHelpers as FormikActions, FormikProps } from 'formik';\nimport React from 'react';\nimport { LandingCompany, ResidenceList } from '@deriv/api-types';\nimport {\n    Autocomplete,\n    AutoHeightWrapper,\n    DesktopWrapper,\n    Div100vhContainer,\n    Dropdown,\n    FormSubmitButton,\n    FormSubmitErrorMessage,\n    Input,\n    Loading,\n    MobileWrapper,\n    Modal,\n    SelectNative,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { isDeepEqual, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport RootStore from '../Stores/index';\n\ntype TCFDPersonalDetailsFormProps = {\n    changeable_fields?: string[];\n    form_error?: string;\n    index: number;\n    is_loading: boolean;\n    context: RootStore;\n    landing_company: LandingCompany;\n    onSubmit: TOnSubmit;\n    residence_list: ResidenceList;\n    value: TFormValues;\n};\n\ntype TValidatePersonalDetailsParams = {\n    values: TFormValues;\n    context: RootStore;\n    residence_list: ResidenceList;\n    account_opening_reason: TAccountOpeningReasonList;\n    is_tin_required: boolean;\n};\n\ntype TFindDefaultValuesInResidenceList = (params: {\n    residence_list: ResidenceList;\n    citizen_text: string;\n    tax_residence_text: string;\n    place_of_birth_text?: string;\n}) => {\n    citizen?: ResidenceList[0];\n    place_of_birth?: ResidenceList[0];\n    tax_residence?: ResidenceList[0];\n};\n\ntype TCFDInputFieldProps = {\n    id?: string;\n    value?: string;\n    name: string;\n    maxLength?: number;\n    label: string;\n    optional?: boolean;\n    required?: boolean;\n    placeholder: string;\n    disabled?: boolean;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n};\n\ntype TFormValues = { [key: string]: string };\n\ntype TOnSubmit = (\n    index: number,\n    value: TFormValues,\n    setSubmitting: (isSubmitting: boolean) => void,\n    is_dirty?: boolean\n) => void;\n\ntype TSubmitForm = (\n    values: TFormValues,\n    actions: FormikActions<TFormValues>,\n    idx: number,\n    onSubmitFn: TOnSubmit,\n    is_dirty: boolean,\n    residence_list: ResidenceList\n) => void;\n\ntype TAccountOpeningReasonList = {\n    text: string;\n    value: string;\n}[];\n\nconst getAccountOpeningReasonList = (): TAccountOpeningReasonList => [\n    {\n        text: localize('Hedging'),\n        value: 'Hedging',\n    },\n    {\n        text: localize('Income Earning'),\n        value: 'Income Earning',\n    },\n    {\n        text: localize('Speculative'),\n        value: 'Speculative',\n    },\n    {\n        text: localize('Peer-to-peer exchange'),\n        value: 'Peer-to-peer exchange',\n    },\n];\n\nexport const InputField = ({ maxLength, name, optional = false, ...props }: TCFDInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched } }: FieldProps<string, TFormValues>) => (\n            <Input\n                {...field}\n                type='text'\n                required={!optional}\n                name={name}\n                autoComplete='off'\n                maxLength={maxLength || 30}\n                error={touched[field.name as keyof TFormValues] && errors[field.name as keyof TFormValues]}\n                {...props}\n            />\n        )}\n    </Field>\n);\n\nconst validatePersonalDetails = ({\n    values,\n    context,\n    residence_list,\n    account_opening_reason,\n    is_tin_required,\n}: TValidatePersonalDetailsParams) => {\n    const [tax_residence_obj] = residence_list.filter(res => res.text === values.tax_residence && res.tin_format);\n\n    const tin_format = tax_residence_obj?.tin_format;\n\n    const tin_regex = tin_format || ['^[A-Za-z0-9./s-]{0,25}$']; // fallback to API's default rule check\n\n    const validations: { [key: string]: ((v: string) => boolean | RegExpMatchArray | null)[] } = {\n        citizen: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_residence: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_identification_number: [\n            (v: string) => ((!values.tax_residence && is_tin_required) || tin_format ? !!v : true),\n            (v: string) => (tin_regex ? tin_regex?.some(regex => v.match(regex)) : true),\n        ],\n        account_opening_reason: [\n            (v: string) => !!v,\n            (v: string) => account_opening_reason.map(i => i.value).includes(v),\n        ],\n        place_of_birth: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n    };\n    const mappedKey: { [key: string]: string } = {\n        citizen: localize('Citizenship'),\n        tax_residence: localize('Tax residence'),\n        tax_identification_number: localize('Tax identification number'),\n        account_opening_reason: localize('Account opening reason'),\n        place_of_birth: localize('Place of birth'),\n    };\n\n    const field_error_messages = (field_name: string): string[] => [\n        localize('{{field_name}} is required', { field_name }),\n        localize('{{field_name}} is not properly formatted.', { field_name }),\n    ];\n\n    const errors: { [key: string]: React.ReactNode } = {};\n\n    Object.entries(validations).forEach(([key, rules]) => {\n        const error_index = rules.findIndex(v => !v(values[key as 'citizen']));\n        if (error_index !== -1) {\n            errors[key] = field_error_messages(mappedKey[key])[error_index];\n        }\n    });\n\n    return errors;\n};\n\nconst findDefaultValuesInResidenceList: TFindDefaultValuesInResidenceList = ({\n    residence_list,\n    citizen_text,\n    tax_residence_text,\n    place_of_birth_text,\n}) => {\n    let citizen, tax_residence, place_of_birth;\n    residence_list?.forEach((item: ResidenceList[0]) => {\n        if (item.text === citizen_text) {\n            citizen = item;\n        }\n        if (item.text === place_of_birth_text) {\n            place_of_birth = item;\n        }\n        if (item.text === tax_residence_text) {\n            tax_residence = item;\n        }\n    });\n    return { citizen, place_of_birth, tax_residence };\n};\n\nconst submitForm: TSubmitForm = (values, actions, idx, onSubmit, is_dirty, residence_list) => {\n    const { citizen, place_of_birth, tax_residence } = findDefaultValuesInResidenceList({\n        residence_list,\n        citizen_text: values.citizen,\n        tax_residence_text: values.tax_residence,\n        place_of_birth_text: values.place_of_birth,\n    });\n\n    const payload = {\n        ...values,\n        citizen: citizen?.value || '',\n        place_of_birth: place_of_birth?.value || '',\n        tax_residence: tax_residence?.value || '',\n    };\n    onSubmit(idx, payload, actions.setSubmitting, is_dirty);\n};\n\nconst CFDPersonalDetailsForm = ({\n    changeable_fields,\n    is_loading,\n    landing_company,\n    residence_list,\n    onSubmit,\n    context,\n    value,\n    index,\n    form_error,\n}: TCFDPersonalDetailsFormProps) => {\n    const account_opening_reason = getAccountOpeningReasonList();\n    const is_tin_required = !!(landing_company?.config?.tax_details_required ?? false);\n\n    const onSubmitForm = (values: TFormValues, actions: FormikActions<TFormValues>) =>\n        submitForm(values, actions, index, onSubmit, !isDeepEqual(value, values), residence_list);\n\n    if (residence_list.length === 0) return <Loading is_fullscreen={false} />;\n    if (is_loading) return <Loading is_fullscreen={false} />;\n\n    return (\n        <Formik\n            initialValues={{ ...value }}\n            validateOnChange\n            validateOnBlur\n            validate={values =>\n                validatePersonalDetails({\n                    values,\n                    context,\n                    residence_list,\n                    account_opening_reason,\n                    is_tin_required,\n                })\n            }\n            onSubmit={onSubmitForm}\n            validateOnMount\n        >\n            {({\n                handleSubmit,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                errors,\n                touched,\n                values,\n                setFieldValue,\n                isValid,\n            }: FormikProps<TFormValues>) => {\n                const citizenship_error = touched.citizen && errors.citizen;\n                const place_of_birth_error = touched.place_of_birth && errors.place_of_birth;\n                const tax_residence_error = touched.tax_residence && errors.tax_residence;\n                const account_opening_reason_error = touched.account_opening_reason && errors.account_opening_reason;\n\n                const is_citizenship_disabled = !!value.citizen && !changeable_fields?.includes('citizen');\n                const is_place_of_birth_disabled =\n                    !!value.place_of_birth && !changeable_fields?.includes('place_of_birth');\n                const is_tax_residence_disabled =\n                    !!value.tax_residence && !changeable_fields?.includes('tax_residence');\n                const is_account_opening_reason_disabled =\n                    !!value.account_opening_reason && !changeable_fields?.includes('account_opening_reason');\n                const handleItemSelection = (item: ResidenceList[0], _field: string) => {\n                    const item_value = item.value ? item.text : '';\n                    setFieldValue(_field, item_value, true);\n                };\n                const tin_field_label = residence_list.find(res => res.text === values.tax_residence && res.tin_format)\n                    ?.tin_format\n                    ? localize('Tax identification number*')\n                    : localize('Tax identification number');\n\n                return (\n                    <AutoHeightWrapper default_height={200} height_offset={isDesktop() ? 148 : null}>\n                        {({ setRef }: { setRef: (instance: HTMLFormElement | null) => void }) => (\n                            <form\n                                className='cfd-personal-details-modal__form'\n                                ref={setRef}\n                                onSubmit={handleSubmit}\n                                autoComplete='off'\n                                noValidate\n                            >\n                                <Div100vhContainer\n                                    className='details-form'\n                                    max_autoheight_offset='179px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    <Text\n                                        as='p'\n                                        size='xxs'\n                                        align='center'\n                                        className='details-form__description'\n                                        data-testid='dt_cfd_details_form_description'\n                                    >\n                                        <Localize\n                                            i18n_default_text={\n                                                'Any information you provide is confidential and will be used for verification purposes only.'\n                                            }\n                                        />\n                                    </Text>\n                                    <ThemedScrollbars height='512px' is_bypassed={isMobile()}>\n                                        <div className='details-form__elements'>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='citizen'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_citizenship'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Citizenship*')}\n                                                                error={citizenship_error}\n                                                                disabled={is_citizenship_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'citizen')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Citizenship*')}\n                                                        value={values.citizen}\n                                                        list_items={residence_list}\n                                                        error={citizenship_error}\n                                                        disabled={is_citizenship_disabled}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('citizen', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='place_of_birth'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_place_of_birth'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Place of birth*')}\n                                                                error={place_of_birth_error}\n                                                                disabled={is_place_of_birth_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'place_of_birth')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Place of birth*')}\n                                                        value={values.place_of_birth}\n                                                        list_items={residence_list}\n                                                        error={place_of_birth_error}\n                                                        disabled={is_place_of_birth_disabled}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('place_of_birth', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='tax_residence'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                id='real_mt5_tax_residence'\n                                                                data-lpignore='true'\n                                                                type='text'\n                                                                autoComplete='off'\n                                                                label={localize('Tax residence*')}\n                                                                error={tax_residence_error}\n                                                                disabled={is_tax_residence_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'tax_residence')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Tax residence*')}\n                                                        value={values.tax_residence}\n                                                        error={tax_residence_error}\n                                                        disabled={is_tax_residence_disabled}\n                                                        list_items={residence_list}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('tax_residence', e.target.value, true)\n                                                        }\n                                                        required\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <InputField\n                                                    id='real_mt5_tax_identification_number'\n                                                    name='tax_identification_number'\n                                                    label={tin_field_label}\n                                                    placeholder={tin_field_label}\n                                                    value={values.tax_identification_number}\n                                                    onBlur={handleBlur}\n                                                    disabled={\n                                                        !!value.tax_identification_number &&\n                                                        !changeable_fields?.includes('tax_identification_number')\n                                                    }\n                                                    optional\n                                                />\n                                            </fieldset>\n                                            <Field name='account_opening_reason'>\n                                                {({ field }: FieldProps<string, TFormValues>) => (\n                                                    <React.Fragment>\n                                                        <DesktopWrapper>\n                                                            <Dropdown\n                                                                {...field}\n                                                                placeholder={localize('Account opening reason*')}\n                                                                is_align_text_left\n                                                                name={field.name}\n                                                                list={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={is_account_opening_reason_disabled}\n                                                                onChange={handleChange}\n                                                                handleBlur={handleBlur}\n                                                                error={account_opening_reason_error}\n                                                                list_portal_id='modal_root'\n                                                            />\n                                                        </DesktopWrapper>\n                                                        <MobileWrapper>\n                                                            <SelectNative\n                                                                {...field}\n                                                                placeholder={localize('Please select')}\n                                                                name={field.name}\n                                                                label={localize('Account opening reason*')}\n                                                                list_items={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={is_account_opening_reason_disabled}\n                                                                error={account_opening_reason_error}\n                                                                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                                    handleChange(e);\n                                                                    setFieldValue(\n                                                                        'account_opening_reason',\n                                                                        e.target.value,\n                                                                        true\n                                                                    );\n                                                                }}\n                                                                data_testid='account_opening_reason_mobile'\n                                                            />\n                                                        </MobileWrapper>\n                                                    </React.Fragment>\n                                                )}\n                                            </Field>\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer is_bypassed={isMobile()} has_separator>\n                                    {form_error && <FormSubmitErrorMessage message={form_error} />}\n                                    <FormSubmitButton\n                                        is_disabled={isSubmitting || !isValid || Object.keys(errors).length > 0}\n                                        is_absolute={isMobile()}\n                                        label={localize('Next')}\n                                        context={context}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPersonalDetailsForm;\n","import { Field, Formik, FieldProps, FormikHelpers, FormikProps, FormikErrors } from 'formik';\nimport React from 'react';\nimport {\n    AutoHeightWrapper,\n    FormSubmitButton,\n    ThemedScrollbars,\n    Dropdown,\n    Loading,\n    Div100vhContainer,\n    Modal,\n    SelectNative,\n    DesktopWrapper,\n    MobileWrapper,\n    useStateCallback,\n    Text,\n} from '@deriv/components';\nimport { FileUploaderContainer, FormSubHeader, PoaStatusCodes } from '@deriv/account';\nimport { localize } from '@deriv/translations';\nimport { isDesktop, isMobile, validAddress, validLength, validLetterSymbol, validPostCode, WS } from '@deriv/shared';\nimport { InputField } from './cfd-personal-details-form';\nimport { GetSettings, StatesList, AccountStatusResponse } from '@deriv/api-types';\n\ntype TErrors = {\n    code: string;\n    message: string;\n};\n\ntype TFile = {\n    path: string;\n    lastModified: number;\n    lastModifiedDate: Date;\n    name: string;\n    size: number;\n    type: string;\n    webkitRelativePath: string;\n};\n\ntype TObjDocumentFile = {\n    errors: TErrors[];\n    file: TFile;\n};\n\ntype TFormValuesInputs = {\n    address_city?: string;\n    address_line_1?: string;\n    address_line_2?: string;\n    address_postcode?: string;\n    address_state?: string;\n};\n\ntype TDocumentFile = {\n    document_file?: Array<TObjDocumentFile>;\n    files?: Array<TObjDocumentFile>;\n};\n\ntype TFormValues = TFormValuesInputs & TDocumentFile;\n\ntype TFormValue = GetSettings;\n\ntype TApiResponse = {\n    document_upload: {\n        call_type: number;\n        checksum: string;\n        size: number;\n        status: string;\n        upload_id: number;\n    };\n    passthrough: {\n        document_upload: boolean;\n    };\n    warning?: string;\n};\n\ntype TStoreProofOfAddress = (file_uploader_ref: React.RefObject<(HTMLElement | null) & TUpload>) => void;\n\nexport type TCFDPOAProps = {\n    onSave: (index: number, values: TFormValues) => void;\n    index: number;\n    onSubmit: (index: number, value: TFormValues) => void;\n    refreshNotifications: () => void;\n    form_error: string;\n    get_settings: GetSettings;\n    height: string;\n    states_list: StatesList;\n    storeProofOfAddress: TStoreProofOfAddress;\n    value: TFormValue;\n};\ntype TUpload = {\n    upload: () => void;\n};\n\nlet file_uploader_ref: React.RefObject<HTMLElement & TUpload>;\n\nconst CFDPOA = ({ onSave, index, onSubmit, refreshNotifications, ...props }: TCFDPOAProps) => {\n    const form = React.useRef<FormikProps<TFormValues> | null>(null);\n\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [form_state, setFormState] = useStateCallback({\n        poa_status: 'none',\n        has_poi: false,\n        form_error: '',\n    });\n    const [document_upload, setDocumentUpload] = useStateCallback({ files: [], error_message: null });\n    const [hasPOAFailed, sethasPOAfailed] = React.useState(false);\n\n    const validateForm = (values: TFormValuesInputs) => {\n        // No need to validate if we are waiting for confirmation.\n        if ([PoaStatusCodes.verified, PoaStatusCodes.pending].includes(form_state.poa_status)) {\n            return {};\n        }\n\n        const validations: Record<string, Array<(value: string) => boolean>> = {\n            address_line_1: [\n                (v: string) => !!v && !v.match(/^\\s*$/),\n                (v: string) => validLength(v, { max: 70 }),\n                (v: string) => validAddress(v).is_ok,\n            ],\n            address_line_2: [(v: string) => validLength(v, { max: 70 }), (v: string) => validAddress(v).is_ok],\n            address_city: [\n                (v: string) => !!v && !v.match(/^\\s*$/),\n                (v: string) => validLength(v, { min: 1, max: 35 }),\n                (v: string) => validLetterSymbol(v),\n            ],\n            address_state: [(v: string) => validLength(v, { max: 35 })],\n            address_postcode: [(v: string) => validLength(v, { max: 20 }), (v: string) => !v || validPostCode(v)],\n        };\n\n        const validation_errors: Record<string, Array<string>> = {\n            address_line_1: [\n                localize('First line of address is required'),\n                localize('This should not exceed {{max}} characters.', { max: 70 }),\n                localize('First line of address is not in a proper format.'),\n            ],\n            address_line_2: [\n                localize('This should not exceed {{max}} characters.', { max: 70 }),\n                localize('Second line of address is not in a proper format.'),\n            ],\n            address_city: [\n                localize('Town/City is required.'),\n                localize('This should not exceed {{max_number}} characters.', {\n                    max_number: 35,\n                }),\n                localize('Town/City is not in a proper format.'),\n            ],\n            address_state: [localize('State/Province is not in a proper format.')],\n            address_postcode: [\n                localize('This should not exceed {{max_number}} characters.', {\n                    max_number: 20,\n                }),\n                localize('Only letters, numbers, space, and hyphen are allowed.'),\n            ],\n        };\n\n        const errors: Record<string, string> = {};\n\n        Object.entries(validations).forEach(([key, rules]) => {\n            const error_index = rules.findIndex(v => !v(values[key as keyof TFormValuesInputs] as string));\n            if (error_index !== -1) {\n                errors[key] = validation_errors[key][error_index];\n            }\n        });\n\n        return errors;\n    };\n\n    const onFileDrop = (\n        files: TObjDocumentFile,\n        error_message: string,\n        setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void,\n        setFieldValue: (field: string, files_array: TObjDocumentFile) => void,\n        values: TFormValues\n    ) => {\n        setFieldTouched('document_file', true);\n        setFieldValue('document_file', files);\n        setDocumentUpload({ files, error_message }, () => {\n            // To resolve sync issues with value states (form_values in container component and formik values)\n            // This ensures container values are updated before being validated in runtime  (mt5-financial-stp-real-account-signup.jsx)\n            if (typeof onSave === 'function') {\n                onSave(index, { ...values, ...({ document_file: files } as unknown as TDocumentFile) });\n            }\n        });\n    };\n\n    const onSubmitValues = async (values: TFormValues, actions: FormikHelpers<TFormValues>) => {\n        const uploadables = { ...values };\n        delete uploadables.document_file;\n\n        actions.setSubmitting(true);\n        const data = await WS.setSettings(uploadables);\n        if (data.error) {\n            setFormState({ ...form_state, ...{ form_error: data.error.message } });\n            actions.setSubmitting(false);\n            return;\n        }\n        const { error } = await WS.authorized.storage.getSettings();\n        if (error) {\n            setFormState({ ...form_state, ...{ form_error: error.message } });\n            return;\n        }\n\n        setFormState({ ...form_state, ...{ form_error: '' } });\n\n        try {\n            const api_response = await file_uploader_ref.current?.upload();\n\n            if (api_response && (api_response as TApiResponse)?.warning) {\n                setFormState({ ...form_state, ...{ form_error: (api_response as TApiResponse).warning } });\n                actions.setSubmitting(false);\n                return;\n            }\n            const { error: e } = await WS.authorized.storage.getAccountStatus();\n            if (e) {\n                setFormState({ ...form_state, ...{ form_error: error.message } });\n                actions.setSubmitting(false);\n                return;\n            }\n        } catch (e: unknown) {\n            setFormState({ ...form_state, ...{ form_error: (e as Error).message } });\n        }\n\n        actions.setSubmitting(false);\n        onSave(index, values);\n        onSubmit(index, values);\n    };\n\n    // didMount hook\n    React.useEffect(() => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            WS.wait('states_list').then(() => {\n                const poa_status = response.get_account_status?.authentication?.document?.status;\n                const poi_status = response.get_account_status?.authentication?.identity?.status;\n                const poa_failed_status = ['rejected', 'expired', 'suspected'];\n                if (poa_status && poi_status) {\n                    const needs_poi = poi_status === 'none';\n                    setFormState({ ...form_state, ...{ poa_status, needs_poi, identity_status: poi_status } }, () => {\n                        setIsLoading(false);\n                        refreshNotifications();\n                    });\n                }\n\n                if (poa_status && poa_failed_status.includes(poa_status)) {\n                    sethasPOAfailed(true);\n                }\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [refreshNotifications, setFormState]);\n\n    const isFormDisabled = (dirty: boolean, errors: FormikErrors<TFormValues>) => {\n        if (form_state.poa_status === PoaStatusCodes.verified) {\n            return false;\n        }\n        return Object.keys(errors).length !== 0;\n    };\n\n    const {\n        states_list,\n        value: { address_line_1, address_line_2, address_city, address_state, address_postcode },\n    } = props;\n    const { form_error, poa_status } = form_state;\n\n    const is_form_visible = !is_loading && poa_status !== PoaStatusCodes.verified;\n\n    return (\n        <Formik\n            initialValues={{\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n                document_file: document_upload.files,\n            }}\n            validateOnMount\n            validate={validateForm}\n            enableReinitialize\n            onSubmit={onSubmitValues}\n            innerRef={form}\n        >\n            {({\n                dirty,\n                errors,\n                handleSubmit,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                setFieldTouched,\n                setFieldValue,\n                values,\n                touched,\n            }: FormikProps<TFormValues>) => {\n                return (\n                    <AutoHeightWrapper default_height={200}>\n                        {({\n                            setRef,\n                            height,\n                        }: {\n                            setRef: (instance: HTMLFormElement | null) => void;\n                            height: number;\n                        }) => (\n                            <form ref={setRef} onSubmit={handleSubmit} className='cfd-proof-of-address'>\n                                <Div100vhContainer\n                                    className='details-form'\n                                    height_offset='100px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    {is_loading && <Loading is_fullscreen={false} />}\n                                    {is_form_visible && (\n                                        <ThemedScrollbars\n                                            autohide={false}\n                                            height={`${height - 77}px`}\n                                            is_bypassed={isMobile()}\n                                        >\n                                            <div className='cfd-proof-of-address__field-area'>\n                                                {hasPOAFailed && (\n                                                    <Text size='xs' align='center' color='loss-danger'>\n                                                        {localize(\n                                                            'We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.'\n                                                        )}\n                                                    </Text>\n                                                )}\n                                                <FormSubHeader title={localize('Address information')} />\n                                                <InputField\n                                                    name='address_line_1'\n                                                    maxLength={255}\n                                                    required\n                                                    label={localize('First line of address*')}\n                                                    placeholder={localize('First line of address*')}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputField\n                                                    name='address_line_2'\n                                                    maxLength={255}\n                                                    label={localize('Second line of address (optional)')}\n                                                    optional\n                                                    placeholder={localize('Second line of address')}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <div className='cfd-proof-of-address__inline-fields'>\n                                                    <InputField\n                                                        maxLength={255}\n                                                        name='address_city'\n                                                        required\n                                                        label={localize('Town/City*')}\n                                                        placeholder={localize('Town/City*')}\n                                                        onBlur={handleBlur}\n                                                    />\n                                                    <fieldset className='address-state__fieldset'>\n                                                        {states_list?.length > 0 ? (\n                                                            <React.Fragment>\n                                                                <DesktopWrapper>\n                                                                    <Field name='address_state'>\n                                                                        {({\n                                                                            field,\n                                                                        }: FieldProps<string, TFormValues>) => (\n                                                                            <Dropdown\n                                                                                id='address_state'\n                                                                                className='address_state-dropdown'\n                                                                                is_align_text_left\n                                                                                list={states_list}\n                                                                                error={\n                                                                                    touched[\n                                                                                        field.name as keyof TFormValues\n                                                                                    ] &&\n                                                                                    errors[\n                                                                                        field.name as keyof TFormValues\n                                                                                    ]\n                                                                                }\n                                                                                name='address_state'\n                                                                                value={values.address_state}\n                                                                                onChange={handleChange}\n                                                                                placeholder={localize('State/Province')}\n                                                                                list_portal_id='modal_root'\n                                                                            />\n                                                                        )}\n                                                                    </Field>\n                                                                </DesktopWrapper>\n                                                                <MobileWrapper>\n                                                                    <SelectNative\n                                                                        label={localize('State/Province')}\n                                                                        value={values.address_state}\n                                                                        list_items={states_list}\n                                                                        error={\n                                                                            touched.address_state &&\n                                                                            errors.address_state\n                                                                        }\n                                                                        onChange={(\n                                                                            e: React.ChangeEvent<HTMLSelectElement>\n                                                                        ) => {\n                                                                            handleChange(e);\n                                                                            setFieldValue(\n                                                                                'address_state',\n                                                                                e.target.value,\n                                                                                true\n                                                                            );\n                                                                        }}\n                                                                    />\n                                                                </MobileWrapper>\n                                                            </React.Fragment>\n                                                        ) : (\n                                                            // Fallback to input field when states list is empty / unavailable for country\n                                                            <InputField\n                                                                name='address_state'\n                                                                label={localize('State/Province')}\n                                                                placeholder={localize('State/Province')}\n                                                                value={values.address_state}\n                                                                onBlur={handleBlur}\n                                                            />\n                                                        )}\n                                                    </fieldset>\n                                                    <InputField\n                                                        maxLength={255}\n                                                        name='address_postcode'\n                                                        label={localize('Postal/ZIP code')}\n                                                        placeholder={localize('Postal/ZIP code')}\n                                                        onBlur={handleBlur}\n                                                        optional\n                                                    />\n                                                </div>\n                                                <div className='cfd-proof-of-address__file-upload'>\n                                                    <FileUploaderContainer\n                                                        onRef={(ref: React.RefObject<(HTMLElement | null) & TUpload>) =>\n                                                            (file_uploader_ref = ref)\n                                                        }\n                                                        getSocket={WS.getSocket}\n                                                        onFileDrop={(df: {\n                                                            files: TObjDocumentFile;\n                                                            error_message: string;\n                                                        }) =>\n                                                            onFileDrop(\n                                                                df.files,\n                                                                df.error_message,\n                                                                setFieldTouched,\n                                                                setFieldValue,\n                                                                values as TFormValues\n                                                            )\n                                                        }\n                                                    />\n                                                </div>\n                                            </div>\n                                        </ThemedScrollbars>\n                                    )}\n\n                                    <Modal.Footer is_bypassed={isMobile()}>\n                                        {(poa_status === PoaStatusCodes.none || is_form_visible) && (\n                                            <FormSubmitButton\n                                                is_disabled={\n                                                    isFormDisabled(dirty, errors) ||\n                                                    (poa_status !== PoaStatusCodes.verified &&\n                                                        document_upload.files &&\n                                                        document_upload.files.length < 1) ||\n                                                    !!document_upload.error_message\n                                                }\n                                                label={\n                                                    poa_status === PoaStatusCodes.verified\n                                                        ? localize('Submit')\n                                                        : localize('Next')\n                                                }\n                                                is_absolute={isMobile()}\n                                                is_loading={isSubmitting}\n                                                form_error={form_error}\n                                            />\n                                        )}\n                                    </Modal.Footer>\n                                </Div100vhContainer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPOA;\n","import { ProofOfIdentityContainerForMt5 } from '@deriv/account';\nimport { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport React from 'react';\nimport RootStore from '../Stores/index';\nimport { connect } from '../Stores/connect';\n\ntype TCFDValue = {\n    poi_state: string;\n};\n\ntype TFormValues = {\n    poi_state?: string;\n};\n\ntype TCFDNotificationByKey = {\n    key: string;\n};\ntype TCFDNotificationMessage = {\n    key: string;\n    should_show_again: string;\n};\n\nexport type TCFDPOIProps = {\n    index: number;\n    onSubmit: (index: number, value: TCFDValue) => void;\n    value: TCFDValue;\n    account_status?: GetAccountStatus;\n    addNotificationByKey: (key: string) => void;\n    fetchResidenceList?: () => void;\n    getChangeableFields: () => string[];\n    height: string;\n    is_switching: boolean;\n    is_virtual: boolean;\n    is_high_risk: boolean;\n    is_withdrawal_lock: boolean;\n    onSave: (index: number, values: TFormValues) => void;\n    refreshNotifications: () => void;\n    removeNotificationByKey: (key: TCFDNotificationByKey) => void;\n    removeNotificationMessage: (key: TCFDNotificationMessage) => void;\n    should_allow_authentication: boolean;\n    account_settings: GetSettings;\n    residence_list: ResidenceList;\n    jurisdiction_selected_shortcode: string;\n    updateAccountStatus: () => void;\n};\n\nconst CFDPOI = ({ index, onSave, onSubmit, height, ...props }: TCFDPOIProps) => {\n    const [poi_state, setPOIState] = React.useState<string>('none');\n    const citizen = props.account_settings?.citizen || props.account_settings?.country_code;\n    const citizen_data = props.residence_list?.find(item => item.value === citizen);\n\n    const onStateChange = (status: string) => {\n        setPOIState(status);\n        onSave(index, { poi_state: status });\n        onSubmit(index, { poi_state });\n    };\n    return (\n        <ProofOfIdentityContainerForMt5\n            {...props}\n            height={height}\n            is_from_external={true}\n            onStateChange={(status: string) => onStateChange(status)}\n            citizen_data={citizen_data}\n        />\n    );\n};\n\nexport default connect(({ client, common, notifications }: RootStore) => ({\n    account_status: client.account_status,\n    app_routing_history: common.app_routing_history,\n    fetchResidenceList: client.fetchResidenceList,\n    is_switching: client.is_switching,\n    is_virtual: client.is_virtual,\n    is_high_risk: client.is_high_risk,\n    is_withdrawal_lock: client.is_withdrawal_lock,\n    refreshNotifications: notifications.refreshNotifications,\n    routeBackInApp: common.routeBackInApp,\n    should_allow_authentication: client.should_allow_authentication,\n    account_settings: client.account_settings,\n    residence_list: client.residence_list,\n    getChangeableFields: client.getChangeableFields,\n    updateAccountStatus: client.updateAccountStatus,\n}))(CFDPOI);\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, MobileWrapper, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from '../Stores/connect';\nimport RootStore from '../Stores/index';\nimport { TCFDPersonalDetailsContainerProps } from './props.types';\nimport CFDPersonalDetailsForm from '../Components/cfd-personal-details-form';\nimport { getPropertyValue, isDesktop, WS } from '@deriv/shared';\nimport { GetSettings } from '@deriv/api-types';\n\ntype TFormValues = { [key: string]: string };\ntype TSetSubmitting = (isSubmitting: boolean) => void;\n\nconst CFDPersonalDetailsContainer = ({\n    account_settings,\n    context,\n    getChangeableFields,\n    landing_company,\n    residence_list,\n    setAccountSettings,\n    onSubmit,\n}: TCFDPersonalDetailsContainerProps) => {\n    const [form_error, setFormError] = React.useState('');\n    const [is_loading, setIsLoading] = React.useState(false);\n    const [form_values, setFormValues] = React.useState<TFormValues>({\n        citizen: '',\n        place_of_birth: '',\n        tax_residence: '',\n        tax_identification_number: '',\n        account_opening_reason: '',\n    });\n\n    const initiatePersonalDetails = async (setSubmitting?: TSetSubmitting) => {\n        // force request to update settings cache since settings have been updated\n        let get_settings_response: GetSettings;\n        if (!account_settings) {\n            const response = await WS.authorized.storage.getSettings();\n\n            if (response.error) {\n                setFormError(response.error.message);\n                if (typeof setSubmitting === 'function') {\n                    setSubmitting(false);\n                }\n                return;\n            }\n            get_settings_response = response.get_settings;\n        } else {\n            get_settings_response = account_settings;\n        }\n\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            get_settings_response;\n\n        setFormValues({\n            ...form_values,\n            citizen: transform(citizen) || '',\n            place_of_birth: transform(place_of_birth) || '',\n            tax_residence: transform(tax_residence) || '',\n            tax_identification_number: tax_identification_number || '',\n            account_opening_reason: account_opening_reason || '',\n        });\n    };\n\n    React.useEffect(() => {\n        setIsLoading(true);\n        initiatePersonalDetails().then(() => {\n            setIsLoading(false);\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const transform = (value: unknown) => {\n        const [result] = residence_list?.filter(item => item.value === value);\n        return getPropertyValue(result, ['text']) || value;\n    };\n\n    const saveFormData = (_index: number, value: TFormValues) => {\n        setFormValues({\n            ...value,\n            citizen: transform(value.citizen),\n            place_of_birth: transform(value.place_of_birth),\n            tax_residence: transform(value.tax_residence),\n        });\n    };\n\n    const updateValue = async (index: number, value: TFormValues, setSubmitting: TSetSubmitting, is_dirty = true) => {\n        if (is_dirty) {\n            // Set account settings\n            const data = await WS.setSettings(value);\n            if (data.error) {\n                setFormError(data.error.message);\n                setSubmitting(false);\n                return;\n            }\n            initiatePersonalDetails(setSubmitting);\n        }\n        saveFormData(index, value);\n        setAccountSettings({ ...account_settings, ...value });\n        onSubmit(index, value);\n    };\n\n    const getPersonalDetailsForm = () => (\n        <Div100vhContainer\n            className='cfd-personal-details-modal'\n            id='cfd-personal-details-modal'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-personal-details-modal__heading-container'>\n                <Text as='p' weight='bold' align='center' size='s'>\n                    {localize('Complete your personal details')}\n                </Text>\n            </div>\n            <div className='cfd-personal-details-modal__body'>\n                <CFDPersonalDetailsForm\n                    context={context}\n                    form_error={form_error}\n                    index={2}\n                    is_loading={is_loading}\n                    landing_company={landing_company}\n                    onSubmit={updateValue}\n                    residence_list={residence_list}\n                    changeable_fields={getChangeableFields()}\n                    value={form_values}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>{getPersonalDetailsForm()}</DesktopWrapper>\n            <MobileWrapper>{getPersonalDetailsForm()}</MobileWrapper>\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ ui, client }: RootStore) => ({\n    account_settings: client.account_settings,\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    getChangeableFields: client.getChangeableFields,\n    landing_company: client.landing_company,\n    residence_list: client.residence_list,\n    setAccountSettings: client.setAccountSettings,\n}))(CFDPersonalDetailsContainer);\n","import React from 'react';\nimport { Div100vhContainer } from '@deriv/components';\nimport { isDesktop, getAuthenticationStatusInfo, Jurisdiction } from '@deriv/shared';\nimport { connect } from '../Stores/connect';\nimport { LandingCompany, ResidenceList, GetSettings, StatesList, GetAccountStatus } from '@deriv/api-types';\nimport CFDPOA from '../Components/cfd-poa';\nimport CFDPOI from '../Components/cfd-poi';\nimport CFDPersonalDetailsContainer from './cfd-personal-details-container';\nimport RootStore from '../Stores/index';\n\ntype TAuthenticationStatus = { document_status: string; identity_status: string };\n\ntype TStoreProofOfAddressArgs = {\n    file_uploader_ref: HTMLDivElement | null;\n    values: { [key: string]: string };\n};\n\ntype TRemoveNotificationMessage = {\n    key: string;\n    should_show_again: boolean;\n};\n\ntype TGetSettings = GetSettings & {\n    upload_file?: string;\n    poi_state?: string;\n};\n\ntype TCFDFinancialStpRealAccountSignupProps = {\n    addNotificationByKey: (key: string) => void;\n    authentication_status: TAuthenticationStatus;\n    get_settings: TGetSettings;\n    client_email: string;\n    context: RootStore;\n    is_fully_authenticated: boolean;\n    landing_company: LandingCompany;\n    refreshNotifications: () => void;\n    removeNotificationMessage: () => void;\n    removeNotificationByKey: (args: TRemoveNotificationMessage) => void;\n    residence_list: ResidenceList;\n    states_list: StatesList;\n    storeProofOfAddress: TStoreProofOfAddressArgs;\n    fetchStatesList: () => void;\n    account_status: GetAccountStatus;\n    onFinish: () => void;\n    jurisdiction_selected_shortcode: string;\n    has_submitted_cfd_personal_details: boolean;\n};\n\ntype TNextStep = (index: number, value: { [key: string]: string | undefined }) => void;\n\ntype TItemsState = {\n    body: typeof CFDPOI | typeof CFDPOA | typeof CFDPersonalDetailsContainer;\n    form_value: { [key: string]: string | undefined };\n    forwarded_props: Array<Partial<keyof TCFDFinancialStpRealAccountSignupProps>>;\n};\n\nconst CFDFinancialStpRealAccountSignup = (props: TCFDFinancialStpRealAccountSignupProps) => {\n    const {\n        account_status,\n        authentication_status,\n        fetchStatesList,\n        get_settings,\n        refreshNotifications,\n        has_submitted_cfd_personal_details,\n        jurisdiction_selected_shortcode,\n    } = props;\n    const [step, setStep] = React.useState(0);\n    const [form_error, setFormError] = React.useState('');\n    const state_index = step;\n    let is_mounted = React.useRef(true).current;\n\n    const { need_poi_for_vanuatu_maltainvest, need_poi_for_bvi_labuan } = getAuthenticationStatusInfo(account_status);\n\n    const poi_config: TItemsState = {\n        body: CFDPOI,\n        form_value: {\n            poi_state: 'unknown',\n        },\n        forwarded_props: [\n            'addNotificationByKey',\n            'authentication_status',\n            'refreshNotifications',\n            'removeNotificationMessage',\n            'removeNotificationByKey',\n            'jurisdiction_selected_shortcode',\n        ],\n    };\n\n    const poa_config: TItemsState = {\n        body: CFDPOA,\n        form_value: {\n            address_line_1: get_settings.address_line_1,\n            address_line_2: get_settings.address_line_2,\n            address_city: get_settings.address_city,\n            address_state: get_settings.address_state,\n            address_postcode: get_settings.address_postcode,\n            upload_file: '',\n        },\n        forwarded_props: ['states_list', 'get_settings', 'storeProofOfAddress', 'refreshNotifications'],\n    };\n\n    const personal_details_config: TItemsState = {\n        body: CFDPersonalDetailsContainer,\n        form_value: {\n            citizen: '',\n            place_of_birth: '',\n            tax_residence: '',\n            tax_identification_number: '',\n            account_opening_reason: '',\n        },\n        forwarded_props: ['residence_list', 'landing_company'],\n    };\n\n    const should_show_poi = () => {\n        if ([Jurisdiction.VANUATU, Jurisdiction.MALTA_INVEST].includes(jurisdiction_selected_shortcode)) {\n            return need_poi_for_vanuatu_maltainvest;\n        }\n        return need_poi_for_bvi_labuan;\n    };\n    const should_show_poa = !['pending', 'verified'].includes(authentication_status.document_status);\n\n    const should_show_personal_details =\n        !has_submitted_cfd_personal_details && jurisdiction_selected_shortcode !== Jurisdiction.MALTA_INVEST;\n\n    const verification_configs = [\n        ...(should_show_poi() ? [poi_config] : []),\n        ...(should_show_poa ? [poa_config] : []),\n        ...(should_show_personal_details ? [personal_details_config] : []),\n    ];\n\n    const [items, setItems] = React.useState<TItemsState[]>(verification_configs);\n\n    const clearError = () => {\n        setFormError('');\n    };\n\n    React.useEffect(() => {\n        refreshNotifications();\n    }, [items, refreshNotifications]);\n\n    React.useEffect(() => {\n        fetchStatesList();\n    }, [fetchStatesList]);\n\n    const unmount = () => {\n        is_mounted = false;\n        props.onFinish();\n    };\n\n    const saveFormData = (index: number, value: { [key: string]: string | undefined }) => {\n        if (!is_mounted) return; // avoiding state update on unmounted component\n        const cloned_items: TItemsState[] = [...items];\n        cloned_items[index].form_value = value;\n        setItems(cloned_items);\n    };\n\n    const nextStep: TNextStep = (index, value) => {\n        clearError();\n        if (step + 1 < items.length) {\n            saveFormData(index, value);\n            setStep(step + 1);\n        } else unmount();\n    };\n\n    const prevStep = () => {\n        if (step - 1 >= 0) {\n            setStep(step - 1);\n            setFormError('');\n        } else unmount();\n    };\n\n    const getCurrent = (key?: keyof TItemsState) => {\n        return key ? items[state_index][key] : items[state_index];\n    };\n\n    const BodyComponent = getCurrent('body') as typeof CFDPOI & typeof CFDPOA & typeof CFDPersonalDetailsContainer;\n\n    const form_value = getCurrent('form_value');\n\n    const passthrough = ((getCurrent('forwarded_props') || []) as TItemsState['forwarded_props']).reduce(\n        (forwarded_prop, item) => {\n            return Object.assign(forwarded_prop, {\n                [item]: props[item],\n            });\n        },\n        {}\n    );\n\n    return (\n        <Div100vhContainer\n            className='cfd-financial-stp-modal'\n            id='real_mt5_financial_stp_account_opening'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-financial-stp-modal__body' data-testid='dt_cfd_financial_stp_modal_body'>\n                <BodyComponent\n                    value={form_value}\n                    index={state_index}\n                    onSubmit={nextStep}\n                    height='auto'\n                    context={props.context}\n                    onCancel={prevStep}\n                    onSave={saveFormData}\n                    form_error={form_error}\n                    {...passthrough}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n};\n\nexport default connect(({ client, modules: { cfd }, notifications }: RootStore) => ({\n    addNotificationByKey: notifications.addNotificationMessageByKey,\n    authentication_status: client.authentication_status,\n    get_settings: client.account_settings,\n    client_email: client.email,\n    is_fully_authenticated: client.is_fully_authenticated,\n    landing_company: client.landing_company,\n    refreshNotifications: notifications.refreshNotifications,\n    removeNotificationMessage: notifications.removeNotificationMessage,\n    removeNotificationByKey: notifications.removeNotificationByKey,\n    residence_list: client.residence_list,\n    states_list: client.states_list,\n    fetchStatesList: client.fetchStatesList,\n    storeProofOfAddress: cfd.storeProofOfAddress,\n    account_status: client.account_status,\n    jurisdiction_selected_shortcode: cfd.jurisdiction_selected_shortcode,\n    has_submitted_cfd_personal_details: cfd.has_submitted_cfd_personal_details,\n}))(CFDFinancialStpRealAccountSignup);\n","import React from 'react';\nimport { Text, Button, Icon, MultiStep, SendEmailTemplate } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDPlatformLabel, CFD_PLATFORMS, WS } from '@deriv/shared';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport { TChangePassword, TPasswordResetAndTradingPasswordManager } from './props.types';\n\nconst ChangePassword = ({ platform, onConfirm }: TChangePassword) => (\n    <div className='cfd-change-password'>\n        <Icon\n            className='cfd-change-password__icon'\n            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n            width='122'\n            height='108'\n        />\n        <Text as='p' align='center' size='s' weight='bold'>\n            <Localize\n                i18n_default_text='{{platform}} password'\n                values={{\n                    platform: getCFDPlatformLabel(platform),\n                }}\n            />\n        </Text>\n        <Text as='p' align='center' className='cfd-change-password__description' size='xs'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize i18n_default_text='Use this password to log in to your Deriv MT5 accounts on the desktop, web, and mobile apps.' />\n            ) : (\n                <Localize i18n_default_text='Use this password to log in to your Deriv X accounts on the web and mobile apps.' />\n            )}\n        </Text>\n        <Button\n            className='dc-btn dc-btn--primary dc-btn__large dc-modal__container_cfd-reset-password-modal__button'\n            onClick={onConfirm}\n        >\n            <Text size='xs' weight='bold' color='colored-background'>\n                <Localize i18n_default_text='Change password' />\n            </Text>\n        </Button>\n    </div>\n);\n\nconst PasswordReset = ({ email, platform, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const onClickSendEmail = React.useCallback(() => {\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_group === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_group === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n    }, [email, platform, account_group]);\n\n    React.useEffect(() => {\n        onClickSendEmail();\n    }, [onClickSendEmail]);\n\n    return (\n        <SendEmailTemplate\n            title={localize(\"We've sent you an email\")}\n            subtitle={localize('Please click on the link in the email to change your {{platform}} password.', {\n                platform: getCFDPlatformLabel(platform),\n            })}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n        />\n    );\n};\n\nconst TradingPasswordManager = ({ platform, email, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const multi_step_ref = React.useRef<{ goNextStep: () => void; goPrevStep: () => void }>();\n\n    const steps = [\n        {\n            component: <ChangePassword platform={platform} onConfirm={() => multi_step_ref.current?.goNextStep()} />,\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    confirm_label={localize('Confirm')}\n                    platform={platform}\n                    onConfirm={() => multi_step_ref.current?.goNextStep()}\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n        {\n            component: <PasswordReset platform={platform} email={email} account_group={account_group} />,\n        },\n    ];\n\n    return (\n        <div className='cfd-trading-password'>\n            <MultiStep ref={multi_step_ref} steps={steps} />\n        </div>\n    );\n};\n\nexport default TradingPasswordManager;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Field, Form, Formik, FieldProps } from 'formik';\nimport { PasswordInput, PasswordMeter, Text, Button, Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getErrorMessages } from '@deriv/shared';\nimport { TCFDPasswordSuccessMessage, TInvestorPasswordManager, TPasswordManagerModalFormValues } from './props.types';\n\nconst CFDPasswordSuccessMessage = ({ toggleModal, is_investor }: TCFDPasswordSuccessMessage) => (\n    <div className='cfd-password-manager__success'>\n        <Icon icon='IcPasswordUpdated' size={128} />\n        <Text as='p' size='xxs' align='center'>\n            {is_investor ? (\n                <Localize i18n_default_text='Your investor password has been changed.' />\n            ) : (\n                <Localize i18n_default_text='Your password has been changed.' />\n            )}\n        </Text>\n        <Button onClick={toggleModal} className='cfd-password-manager__success-btn' primary large>\n            <p className='dc-btn__text'>{localize('OK')}</p>\n        </Button>\n    </div>\n);\n\nconst InvestorPasswordManager = ({\n    error_message_investor,\n    is_submit_success_investor,\n    multi_step_ref,\n    onSubmit,\n    setPasswordType,\n    toggleModal,\n    validatePassword,\n}: TInvestorPasswordManager) => {\n    if (is_submit_success_investor) {\n        return <CFDPasswordSuccessMessage toggleModal={toggleModal} is_investor />;\n    }\n\n    const type_investor = 'investor';\n\n    const initial_values = { old_password: '', new_password: '', password_type: `${type_investor}` };\n\n    return (\n        <div className='cfd-password-manager__investor-wrapper'>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='Use this password to grant viewing access to another user. While they may view your trading account, they will not be able to trade or take any other actions.' />\n            </Text>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='If this is the first time you try to create a password, or you have forgotten your password, please reset it.' />\n            </Text>\n            {error_message_investor && (\n                <Text\n                    as='p'\n                    color='loss-danger'\n                    size='xs'\n                    className='cfd-password-manager--error-message'\n                    data-testid='dt_error_message_investor'\n                >\n                    {error_message_investor}\n                </Text>\n            )}\n            <Formik initialValues={initial_values} validate={validatePassword} onSubmit={onSubmit}>\n                {({ isSubmitting, errors, setFieldTouched, values, touched }) => (\n                    <Form className='cfd-password-manager__investor-form' noValidate>\n                        <Field name='old_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordInput\n                                    {...field}\n                                    autoComplete='current-password'\n                                    label={localize('Current investor password')}\n                                    error={touched.old_password && errors.old_password}\n                                    required\n                                />\n                            )}\n                        </Field>\n                        <Field name='new_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordMeter\n                                    input={field.value}\n                                    has_error={!!(touched.new_password && errors.new_password)}\n                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                >\n                                    {({ has_warning }: { has_warning: boolean }) => (\n                                        <PasswordInput\n                                            {...field}\n                                            autoComplete='new-password'\n                                            label={localize('New investor password')}\n                                            hint={\n                                                !has_warning &&\n                                                localize(\n                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters and numbers.'\n                                                )\n                                            }\n                                            error={touched.new_password && errors.new_password}\n                                            onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                                                setFieldTouched('new_password', true, true);\n                                                field.onChange(e);\n                                            }}\n                                            className='cfd-password-manager__new-password'\n                                            required\n                                        />\n                                    )}\n                                </PasswordMeter>\n                            )}\n                        </Field>\n                        <div className='cfd-password-manager__actions'>\n                            <Button\n                                className='cfd-password-manager--button'\n                                is_disabled={\n                                    isSubmitting ||\n                                    !values.old_password ||\n                                    !values.new_password ||\n                                    Object.keys(errors).length > 0\n                                }\n                                is_loading={isSubmitting}\n                                text={localize('Change investor password')}\n                                primary\n                                large\n                            />\n                            <Button\n                                className='cfd-password-manager--button'\n                                type='button'\n                                onClick={() => {\n                                    setPasswordType('investor');\n                                    multi_step_ref.current?.goNextStep();\n                                }}\n                                text={localize('Create or reset investor password')}\n                                tertiary\n                                large\n                            />\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nInvestorPasswordManager.propTypes = {\n    error_message_investor: PropTypes.string,\n    is_submit_success_investor: PropTypes.bool,\n    multi_step_ref: PropTypes.object,\n    onSubmit: PropTypes.func,\n    setPasswordType: PropTypes.func,\n    toggleModal: PropTypes.func,\n    validatePassword: PropTypes.func,\n};\n\nexport default InvestorPasswordManager;\n","import React from 'react';\nimport {\n    Icon,\n    Modal,\n    Tabs,\n    Button,\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    MultiStep,\n    PageOverlay,\n    ThemedScrollbars,\n    UILoader,\n    Text,\n} from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport {\n    isMobile,\n    validLength,\n    validPassword,\n    getErrorMessages,\n    getCFDPlatformLabel,\n    CFD_PLATFORMS,\n} from '@deriv/shared';\nimport { FormikErrors } from 'formik';\nimport { connect } from '../Stores/connect';\nimport CFDStore from '../Stores/Modules/CFD/cfd-store';\nimport TradingPasswordManager from './trading-password-manager';\nimport InvestorPasswordManager from './investor-password-manager';\nimport RootStore from '../Stores/index';\nimport {\n    TCountdownComponent,\n    TCFDPasswordReset,\n    TCFDPasswordManagerTabContentWrapper,\n    TCFDPasswordManagerTabContent,\n    TCFDPasswordManagerModal,\n    TFormValues,\n    TPasswordManagerModalFormValues,\n} from './props.types';\n\nconst CountdownComponent = ({ count_from = 60, onTimeout }: TCountdownComponent) => {\n    const [count, setCount] = React.useState<number>(count_from);\n\n    React.useEffect(() => {\n        let interval: ReturnType<typeof setTimeout>;\n\n        if (count !== 0) {\n            interval = setTimeout(() => {\n                setCount(count - 1);\n            }, 1000);\n        } else {\n            onTimeout();\n        }\n\n        return () => {\n            clearTimeout(interval);\n        };\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count]);\n    return <span className='countdown'>{count}</span>;\n};\n\nconst CFDPasswordReset = ({\n    sendVerifyEmail,\n    account_type,\n    account_group,\n    server,\n    context,\n    password_type,\n}: TCFDPasswordReset) => {\n    const [is_resend_verification_requested, setResendVerification] = React.useState<boolean>(false);\n    const [is_resend_verification_sent, setResendVerificationSent] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        localStorage.setItem('cfd_reset_password_intent', [server, account_group, account_type].join('.'));\n        localStorage.setItem('cfd_reset_password_type', password_type);\n        sendVerifyEmail();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickVerification = () => {\n        setResendVerification(true);\n    };\n\n    const resendVerification = () => {\n        sendVerifyEmail();\n        setResendVerificationSent(true);\n    };\n\n    return (\n        <div className='cfd-verification-email-sent'>\n            <Icon icon='IcEmailSent' size={128} />\n            <h2 className='cfd-verification-email-sent__title'>\n                <Localize i18n_default_text=\"We've sent you an email\" />\n            </h2>\n            <Text as='p' size='xs' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n            {!is_resend_verification_requested && (\n                <Button className='cfd-verification-email-sent__resend-button' primary onClick={onClickVerification}>\n                    <Localize i18n_default_text=\"Didn't receive the email?\" />\n                </Button>\n            )}\n            {is_resend_verification_requested && (\n                <>\n                    <Text\n                        as='p'\n                        size='xs'\n                        align='center'\n                        weight='bold'\n                        className='cfd-verification-email-sent__title--sub'\n                    >\n                        <Localize i18n_default_text={\"Didn't receive the email?\"} />\n                    </Text>\n                    <Text as='p' size='xs' align='center'>\n                        <Localize i18n_default_text=\"Check your spam or junk folder. If it's not there, try resending the email.\" />\n                    </Text>\n                    <Button\n                        className='cfd-verification-email-sent__resend-button'\n                        large\n                        primary\n                        disabled={is_resend_verification_sent}\n                        onClick={resendVerification}\n                    >\n                        {!is_resend_verification_sent && <Localize i18n_default_text='Resend email' />}\n                        {is_resend_verification_sent && (\n                            <>\n                                <Localize\n                                    i18n_default_text='Resend in <0 /> seconds'\n                                    components={[\n                                        <CountdownComponent\n                                            key={0}\n                                            onTimeout={() => setResendVerificationSent(false)}\n                                            count_from={60}\n                                        />,\n                                    ]}\n                                />\n                            </>\n                        )}\n                    </Button>\n                </>\n            )}\n        </div>\n    );\n};\n\nconst CFDPasswordManagerTabContentWrapper = ({ multi_step_ref, steps }: TCFDPasswordManagerTabContentWrapper) => (\n    <MultiStep ref={multi_step_ref} steps={steps} className='cfd-password-manager' lbl_previous={localize('Back')} />\n);\n\nconst CFDPasswordManagerTabContent = ({\n    toggleModal,\n    selected_login,\n    email,\n    setPasswordType,\n    multi_step_ref,\n    platform,\n    context,\n    onChangeActiveTabIndex,\n    account_group,\n}: TCFDPasswordManagerTabContent) => {\n    const [active_tab_index, setActiveTabIndex] = React.useState<number>(0);\n    const [error_message_investor, setErrorMessageInvestor] = React.useState<string>('');\n    const [is_submit_success_investor, setSubmitSuccessInvestor] = React.useState<boolean>(false);\n\n    // view height - margin top and bottom of modal - modal title - modal content margin top and bottom - table title\n    const container_height = 'calc(100vh - 84px - 5.6rem - 8.8rem - 4rem)';\n    const validatePassword = (values: TFormValues) => {\n        const errors: FormikErrors<TFormValues> = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        if (!values.old_password && values.old_password !== undefined) {\n            errors.old_password = localize('This field is required');\n        }\n\n        return errors;\n    };\n    const showError = (error_message: string) => {\n        setErrorMessageInvestor(error_message);\n    };\n\n    const hideError = () => {\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(true);\n    };\n\n    const onSubmit = React.useCallback(\n        async (values: TPasswordManagerModalFormValues) => {\n            if (!selected_login) {\n                return;\n            }\n\n            const error = await CFDStore.changePassword({ login: selected_login, ...values });\n            if (error) {\n                showError(error);\n            } else {\n                hideError();\n            }\n        },\n        [selected_login]\n    );\n\n    const updateAccountTabIndex = (index: number) => {\n        setActiveTabIndex(index);\n        onChangeActiveTabIndex(index);\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(false);\n    };\n\n    const trading_password_manager = (\n        <React.Fragment>\n            <DesktopWrapper>\n                <ThemedScrollbars height={container_height} is_bypassed={isMobile()} autohide={false}>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </ThemedScrollbars>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </Div100vhContainer>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n\n    if (platform === CFD_PLATFORMS.DXTRADE) return trading_password_manager;\n\n    return (\n        <Tabs active_index={active_tab_index} onTabItemClick={updateAccountTabIndex} top>\n            <div\n                label={localize('{{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                })}\n            >\n                {trading_password_manager}\n            </div>\n            <div label={localize('Investor password')}>\n                <DesktopWrapper>\n                    <ThemedScrollbars height={container_height}>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </ThemedScrollbars>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </Div100vhContainer>\n                </MobileWrapper>\n            </div>\n        </Tabs>\n    );\n};\n\nconst CFDPasswordManagerModal = ({\n    enableApp,\n    email,\n    disableApp,\n    is_visible,\n    platform,\n    context,\n    selected_login,\n    toggleModal,\n    selected_account_type,\n    selected_account_group,\n    selected_server,\n    sendVerifyEmail,\n}: TCFDPasswordManagerModal) => {\n    const multi_step_ref: React.MutableRefObject<undefined> = React.useRef();\n    const [index, setIndex] = React.useState<number>(0);\n\n    const [password_type, setPasswordType] = React.useState('main');\n\n    if (!selected_login) return null;\n\n    const getTitle = () => {\n        return localize('Manage {{platform}} password', {\n            platform: getCFDPlatformLabel(platform),\n        });\n    };\n\n    const getHeader = (i: number) => {\n        if (i === 0) {\n            return localize('Manage {{platform}} password', {\n                platform: getCFDPlatformLabel(platform),\n            });\n        }\n        return localize('Manage password');\n    };\n\n    const onChangeActiveTabIndex = (i: number) => {\n        setIndex(i);\n    };\n\n    const steps = [\n        {\n            component: (\n                <CFDPasswordManagerTabContent\n                    email={email}\n                    selected_login={selected_login}\n                    toggleModal={toggleModal}\n                    setPasswordType={setPasswordType}\n                    multi_step_ref={multi_step_ref}\n                    platform={platform}\n                    context={context}\n                    onChangeActiveTabIndex={onChangeActiveTabIndex}\n                    account_group={selected_account_group}\n                />\n            ),\n        },\n        {\n            component: (\n                <CFDPasswordReset\n                    server={selected_server}\n                    context={context}\n                    sendVerifyEmail={sendVerifyEmail}\n                    account_type={selected_account_type}\n                    account_group={selected_account_group}\n                    password_type={password_type}\n                />\n            ),\n        },\n    ];\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='cfd-password-manager__modal'\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_open={is_visible}\n                    title={getTitle()}\n                    toggleModal={toggleModal}\n                    height='688px'\n                    width='904px'\n                    should_header_stick_body={false}\n                >\n                    <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <PageOverlay\n                    is_open={is_visible}\n                    portal_id='deriv_app'\n                    header={getHeader(index)}\n                    onClickClose={toggleModal}\n                >\n                    <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                </PageOverlay>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n};\n\nexport default connect(({ modules: { cfd }, client, ui }: RootStore) => ({\n    email: client.email,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_eu: client.is_eu,\n    sendVerifyEmail: cfd.sendVerifyEmail,\n}))(CFDPasswordManagerModal);\n","import { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { SentEmailModal } from '@deriv/account';\nimport { DetailsOfEachMT5Loginid, GetAccountStatus, LandingCompany, Mt5NewAccount } from '@deriv/api-types';\nimport RootStore from '../Stores/index';\nimport {\n    getDxCompanies,\n    getMtCompanies,\n    getFormattedJurisdictionCode,\n    TMtCompanies,\n    TDxCompanies,\n} from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport {\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n    MultiStep,\n} from '@deriv/components';\nimport {\n    CFD_PLATFORMS,\n    getAuthenticationStatusInfo,\n    getCFDPlatformLabel,\n    getErrorMessages,\n    getLegalEntityName,\n    isDesktop,\n    isMobile,\n    Jurisdiction,\n    routes,\n    validLength,\n    validPassword,\n    WS,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport SuccessDialog from '../Components/success-dialog';\nimport 'Sass/cfd.scss';\nimport { connect } from '../Stores/connect';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TExtendedDetailsOfEachMT5Loginid = Omit<DetailsOfEachMT5Loginid, 'market_type'> & {\n    market_type?: 'synthetic' | 'financial' | 'gaming' | 'all';\n};\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    has_mt5_account?: boolean;\n    context: RootStore;\n};\n\ntype TIconTypeProps = {\n    platform: string;\n    type?: string;\n    show_eu_related_content: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: string;\n    context: RootStore;\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    context: RootStore;\n    onSubmit: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    context: RootStore;\n    submitPassword: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\ntype TReviewMsgForMT5 = {\n    is_selected_mt5_verified: boolean;\n    jurisdiction_selected_shortcode: string;\n    manual_status: string;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    account_title: string;\n    account_type: {\n        category?: string;\n        type?: string;\n    };\n    closeModal: () => void;\n    context: RootStore;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_bvi: boolean;\n    is_dxtrade_allowed: boolean;\n    is_real_financial_stp: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    show_eu_related_content: boolean;\n    submitPassword: TOnSubmitPassword;\n};\n\ntype TCFDPasswordModalProps = RouteComponentProps & {\n    account_title: string;\n    context: RootStore;\n    account_type: {\n        category?: string;\n        type?: string;\n    };\n    account_status: GetAccountStatus;\n    disableCFDPasswordModal: () => void;\n    email: string;\n    error_message: string;\n    error_type?: string;\n    form_error?: string;\n    getAccountStatus: (platform: string) => void;\n    is_eu: boolean;\n    is_logged_in: boolean;\n    is_fully_authenticated: boolean;\n    is_cfd_password_modal_enabled: boolean;\n    is_cfd_success_dialog_enabled: boolean;\n    is_dxtrade_allowed: boolean;\n    jurisdiction_selected_shortcode: string;\n    platform: string;\n    has_cfd_error: boolean;\n    landing_companies: LandingCompany;\n    mt5_login_list: TExtendedDetailsOfEachMT5Loginid[];\n    cfd_new_account: Mt5NewAccount;\n    setCFDSuccessDialog: (value: boolean) => void;\n    setMt5Error: (state: boolean, obj?: Error) => void;\n    show_eu_related_content: boolean;\n    submitMt5Password: (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n    submitCFDPassword: (\n        values: TCFDPasswordFormValues & { platform?: string },\n        actions: FormikHelpers<TCFDPasswordFormValues>\n    ) => void;\n    updateAccountStatus: () => void;\n};\n\nconst getAccountTitle = (\n    platform: string,\n    account_type: {\n        category?: string;\n        type?: string;\n    },\n    account_title: string\n) => {\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return getDxCompanies()[account_type.category as keyof TDxCompanies][\n            account_type.type as keyof TDxCompanies['demo' | 'real']\n        ].short_title;\n    }\n\n    return account_title;\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n}: TPasswordModalHeaderProps) => {\n    const element = isMobile() ? 'p' : 'span';\n    const alignment = 'center';\n    const font_size = 's';\n    const style = isMobile()\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size={font_size} align={alignment}>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\nconst ReviewMessageForMT5 = ({\n    is_selected_mt5_verified,\n    jurisdiction_selected_shortcode,\n    manual_status,\n}: TReviewMsgForMT5) => {\n    if (is_selected_mt5_verified) {\n        return (\n            <Localize i18n_default_text='To start trading, top-up funds from your Deriv account into this account.' />\n        );\n    } else if ([Jurisdiction.BVI, Jurisdiction.VANUATU].includes(jurisdiction_selected_shortcode)) {\n        if (manual_status === 'pending') {\n            return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n        }\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 5 minutes.' />;\n    } else if ([Jurisdiction.LABUAN, Jurisdiction.MALTA_INVEST].includes(jurisdiction_selected_shortcode)) {\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n    }\n    return null;\n};\n\nconst IconType = React.memo(({ platform, type, show_eu_related_content }: TIconTypeProps) => {\n    const traders_hub = window.location.pathname === routes.traders_hub;\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return <Icon icon='IcRebrandingDerivx' size={128} />;\n    } else if (traders_hub) {\n        switch (type) {\n            case 'synthetic':\n                return <TradingPlatformIcon icon='Derived' size={128} />;\n            case 'all':\n                return <TradingPlatformIcon icon='SwapFree' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <TradingPlatformIcon icon='CFDs' size={128} />;\n                }\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n            default:\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n        }\n    } else {\n        switch (type) {\n            case 'synthetic':\n                return <Icon icon='IcMt5SyntheticPlatform' size={128} />;\n            case 'all':\n                return <Icon icon='IcMt5SwapFreePlatform' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <Icon icon='IcMt5CfdPlatform' size={128} />;\n                }\n                return <Icon icon='IcMt5FinancialPlatform' size={128} />;\n            default:\n                return <Icon icon='IcMt5FinancialStpPlatform' size={128} />;\n        }\n    }\n});\nIconType.displayName = 'IconType';\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'>) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop() ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({\n    password,\n    platform,\n    validatePassword,\n    context,\n    onSubmit,\n    error_message,\n    is_real_financial_stp,\n}: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text size='s' weight='bold' className='cfd-password-modal__create-password-title'>\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                context={context}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize i18n_default_text='Your MT5 Financial STP account will be opened through Deriv (FX) Ltd. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).' />\n                            </div>\n                        )}\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={true}\n                            context={context}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    context,\n    validatePassword,\n    submitPassword,\n    is_real_financial_stp,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component: (\n                <CreatePassword\n                    password={password}\n                    context={context}\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    onSubmit={onSubmit}\n                    is_real_financial_stp={is_real_financial_stp}\n                />\n            ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                    context={context}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = ({\n    account_title,\n    account_type,\n    closeModal,\n    context,\n    error_message,\n    error_type,\n    form_error,\n    has_mt5_account,\n    is_real_financial_stp,\n    jurisdiction_selected_shortcode,\n    onCancel,\n    onForgotPassword,\n    platform,\n    should_set_trading_password,\n    show_eu_related_content,\n    submitPassword,\n    validatePassword,\n}: TCFDPasswordFormProps) => {\n    const button_label = React.useMemo(() => {\n        if (error_type === 'PasswordReset') {\n            return localize('Try later');\n        }\n        return localize('Add account');\n    }, [error_type]);\n\n    const has_cancel_button = (isDesktop() ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n    const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type });\n\n    const handleCancel = () => {\n        if (!has_cancel_button) {\n            return undefined;\n        }\n        if (should_set_trading_password) {\n            return onCancel();\n        }\n\n        return onForgotPassword();\n    };\n\n    if (error_type === 'PasswordReset') {\n        return (\n            <React.Fragment>\n                <div className='cfd-password-reset'>\n                    <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                        <Text as='p' line_height='24' size='xs'>\n                            <Localize i18n_default_text='Please try again in a minute.' />\n                        </Text>\n                    </div>\n                    <Formik onSubmit={closeModal} initialValues={{}}>\n                        {({ handleSubmit }) => (\n                            <form onSubmit={handleSubmit}>\n                                <FormSubmitButton\n                                    has_cancel={has_cancel_button}\n                                    cancel_label={cancel_button_label}\n                                    onCancel={handleCancel}\n                                    context={context}\n                                    is_absolute={isMobile()}\n                                    label={button_label}\n                                />\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    if (should_set_trading_password) {\n        return (\n            <CFDCreatePasswordForm\n                platform={platform}\n                context={context}\n                error_message={error_message}\n                validatePassword={validatePassword}\n                submitPassword={submitPassword}\n                has_mt5_account={has_mt5_account}\n                is_real_financial_stp={is_real_financial_stp}\n            />\n        );\n    }\n\n    const showJuristiction = () => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return '';\n        } else if (!show_eu_related_content) {\n            return getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        }\n        return 'CFDs';\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                password: '',\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={submitPassword}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                        {!should_set_trading_password && (\n                            <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n                                {account_type.category === 'real' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} {{jurisdiction_shortcode}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            platform_name: platform === CFD_PLATFORMS.MT5 ? 'MT5' : 'Deriv X',\n                                            account: !show_eu_related_content\n                                                ? getAccountTitle(platform, account_type, account_title)\n                                                : '',\n                                            jurisdiction_shortcode: showJuristiction(),\n                                        }}\n                                    />\n                                )}\n                                {account_type.category === 'demo' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            platform_name: platform === CFD_PLATFORMS.MT5 ? 'MT5' : 'Deriv X',\n                                            account: getAccountTitle(platform, account_type, account_title),\n                                        }}\n                                    />\n                                )}\n                            </Text>\n                        )}\n                        <div className='input-element'>\n                            <PasswordInput\n                                autoComplete='new-password'\n                                label={localize('{{platform}} password', {\n                                    platform: getCFDPlatformLabel(platform),\n                                })}\n                                error={\n                                    (touched.password && errors.password) ||\n                                    (values.password.length === 0 ? error_message : '')\n                                }\n                                name='password'\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                    handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                }}\n                                data_testId={`dt_${platform}_password`}\n                            />\n                        </div>\n\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize\n                                    i18n_default_text='Your MT5 Financial STP account will be opened through {{legal_entity_name}}. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).'\n                                    values={{\n                                        legal_entity_name: getLegalEntityName('fx'),\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {error_type === 'PasswordError' && (\n                            <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                <Localize\n                                    i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                    values={{\n                                        platform: getCFDPlatformLabel(platform),\n                                    }}\n                                />\n                            </Text>\n                        )}\n                    </div>\n                    <FormSubmitButton\n                        is_disabled={!values.password}\n                        has_cancel={has_cancel_button}\n                        cancel_label={cancel_button_label}\n                        onCancel={handleCancel}\n                        is_absolute={isMobile()}\n                        is_loading={isSubmitting}\n                        label={button_label}\n                        context={context}\n                        is_center={should_set_trading_password}\n                        form_error={form_error}\n                    />\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDPasswordModal = ({\n    account_title,\n    account_type,\n    account_status,\n    disableCFDPasswordModal,\n    email,\n    error_message,\n    error_type,\n    form_error,\n    getAccountStatus,\n    history,\n    is_logged_in,\n    context,\n    is_cfd_password_modal_enabled,\n    is_cfd_success_dialog_enabled,\n    is_dxtrade_allowed,\n    jurisdiction_selected_shortcode,\n    platform,\n    has_cfd_error,\n    landing_companies,\n    mt5_login_list,\n    cfd_new_account,\n    setCFDSuccessDialog,\n    setMt5Error,\n    submitMt5Password,\n    submitCFDPassword,\n    updateAccountStatus,\n    show_eu_related_content,\n}: TCFDPasswordModalProps) => {\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const is_bvi = landing_companies?.mt_financial_company?.financial_stp?.shortcode === 'bvi';\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = React.useState(false);\n\n    const { poi_verified_for_bvi_labuan, poi_verified_for_vanuatu_maltainvest, poa_verified, manual_status } =\n        getAuthenticationStatusInfo(account_status);\n\n    const [is_selected_mt5_verified, setIsSelectedMT5Verified] = React.useState(false);\n\n    const getVerificationStatus = () => {\n        switch (jurisdiction_selected_shortcode) {\n            case Jurisdiction.SVG:\n                setIsSelectedMT5Verified(true);\n                break;\n            case Jurisdiction.BVI:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan);\n                break;\n            case Jurisdiction.VANUATU:\n                setIsSelectedMT5Verified(poi_verified_for_vanuatu_maltainvest);\n                break;\n            case Jurisdiction.LABUAN:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan && poa_verified);\n                break;\n            case Jurisdiction.MALTA_INVEST:\n                setIsSelectedMT5Verified(poi_verified_for_vanuatu_maltainvest && poa_verified);\n                break;\n            default:\n        }\n    };\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        getVerificationStatus();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [jurisdiction_selected_shortcode, account_status]);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        setMt5Error(false);\n    };\n\n    const closeModal = () => {\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === 'real') {\n            sessionStorage.setItem('cfd_transfer_to_login_id', cfd_new_account.login || '');\n            history.push(routes.cashier_acc_transfer);\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setIsSentEmailModalOpen(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success =\n        !has_cfd_error && is_cfd_success_dialog_enabled && is_cfd_password_modal_enabled && is_password_modal_exited;\n\n    const should_show_sent_email_modal = is_sent_email_modal_open && is_password_modal_exited;\n\n    const is_real_financial_stp = [account_type.category, account_type.type].join('_') === 'real_financial_stp';\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return isMobile();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === 'real') {\n            if (platform === CFD_PLATFORMS.MT5) {\n                return is_selected_mt5_verified ? localize('Transfer now') : localize('OK');\n            }\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [platform, account_type, is_selected_mt5_verified]);\n\n    const getSubmitText = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === 'real' ? localize('real') : localize('demo');\n        const type_label =\n            getMtCompanies(show_eu_related_content)[category as keyof TMtCompanies][\n                type as keyof TMtCompanies['demo' | 'real']\n            ].short_title;\n        const deriv_x_type_label =\n            getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']].short_title;\n        const jurisdiction_label =\n            jurisdiction_selected_shortcode && getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        const mt5_platform_label = jurisdiction_selected_shortcode !== Jurisdiction.MALTA_INVEST ? 'MT5' : '';\n\n        if (category === 'real') {\n            return (\n                <React.Fragment>\n                    <Localize\n                        i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}} {{jurisdiction_selected_shortcode}}</1> account. '\n                        values={{\n                            // TODO: remove below condition once deriv x changes are completed\n                            type: platform === CFD_PLATFORMS.DXTRADE ? deriv_x_type_label : type_label,\n                            platform: platform === CFD_PLATFORMS.MT5 ? mt5_platform_label : 'Deriv X',\n                            category: category_label,\n                            jurisdiction_selected_shortcode:\n                                platform === CFD_PLATFORMS.MT5 && !show_eu_related_content ? jurisdiction_label : '',\n                        }}\n                        components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n                    />\n                    {platform === CFD_PLATFORMS.DXTRADE ? (\n                        <Localize i18n_default_text='To start trading, transfer funds from your Deriv account into this account.' />\n                    ) : (\n                        <ReviewMessageForMT5\n                            is_selected_mt5_verified={is_selected_mt5_verified}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            manual_status={manual_status}\n                        />\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your {{category}} {{deriv_keyword}} <0>{{platform}}</0> <1>{{type}}</1> account.'\n                values={{\n                    deriv_keyword: platform === CFD_PLATFORMS.MT5 ? 'Deriv' : '',\n                    type: platform === CFD_PLATFORMS.DXTRADE ? deriv_x_type_label : type_label,\n                    platform: platform === CFD_PLATFORMS.MT5 ? 'MT5' : getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n            />\n        );\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            is_bvi={is_bvi}\n            context={context}\n            account_title={account_title}\n            account_type={account_type}\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_message}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n            should_set_trading_password={should_set_trading_password}\n            is_real_financial_stp={is_real_financial_stp}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            show_eu_related_content={show_eu_related_content}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    context={context}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width={isMobile() ? '32.8rem' : 'auto'}\n        >\n            {cfd_password_form}\n        </Modal>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n        >\n            <PasswordModalHeader\n                should_set_trading_password={should_set_trading_password}\n                has_mt5_account={has_mt5_account}\n                is_password_reset_error={is_password_reset}\n                platform={platform}\n                context={context}\n            />\n\n            {cfd_password_form}\n        </MobileDialog>\n    );\n\n    return (\n        <React.Fragment>\n            {password_modal}\n            {password_dialog}\n            <SuccessDialog\n                is_open={should_show_success}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={platform === CFD_PLATFORMS.MT5 && !is_selected_mt5_verified ? closeModal : closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSubmitText()}\n                icon={\n                    <IconType\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                has_cancel={\n                    platform === CFD_PLATFORMS.MT5\n                        ? is_selected_mt5_verified && account_type.category === 'real'\n                        : account_type.category === 'real'\n                }\n                has_close_icon={false}\n                width={isMobile() ? '32.8rem' : 'auto'}\n                is_medium_button={isMobile()}\n            />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setIsSentEmailModalOpen(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ client, modules, traders_hub }: RootStore) => ({\n    email: client.email,\n    account_title: modules.cfd.account_title,\n    account_type: modules.cfd.account_type,\n    account_status: client.account_status,\n    disableCFDPasswordModal: modules.cfd.disableCFDPasswordModal,\n    error_message: modules.cfd.error_message,\n    error_type: modules.cfd.error_type,\n    getAccountStatus: modules.cfd.getAccountStatus,\n    has_cfd_error: modules.cfd.has_cfd_error,\n    landing_companies: client.landing_companies,\n    is_eu: client.is_eu,\n    is_eu_country: client.is_eu_country,\n    is_logged_in: client.is_logged_in,\n    is_cfd_success_dialog_enabled: modules.cfd.is_cfd_success_dialog_enabled,\n    is_cfd_password_modal_enabled: modules.cfd.is_cfd_password_modal_enabled,\n    is_dxtrade_allowed: client.is_dxtrade_allowed,\n    jurisdiction_selected_shortcode: modules.cfd.jurisdiction_selected_shortcode,\n    setMt5Error: modules.cfd.setError,\n    setCFDSuccessDialog: modules.cfd.setCFDSuccessDialog,\n    submitMt5Password: modules.cfd.submitMt5Password,\n    submitCFDPassword: modules.cfd.submitCFDPassword,\n    cfd_new_account: modules.cfd.new_account_response,\n    mt5_trading_servers: client.mt5_trading_servers,\n    mt5_login_list: client.mt5_login_list,\n    updateAccountStatus: client.updateAccountStatus,\n    show_eu_related_content: traders_hub.show_eu_related_content,\n}))(withRouter(CFDPasswordModal));\n","import PropTypes from 'prop-types';\nimport { Formik, FormikHelpers } from 'formik';\nimport RootStore from '../Stores/index';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, getErrorMessages, CFD_PLATFORMS, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { connect } from '../Stores/connect';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\n\nconst ResetPasswordIntent = ({ current_list, context, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(financial_stp|financial|synthetic|synthetic_svg|synthetic_bvi|financial_svg|financial_bvi|financial_fx|financial_v)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title = getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']].title;\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = ({\n    current_list,\n    email,\n    is_cfd_reset_password_modal_enabled,\n    is_eu,\n    context,\n    is_logged_in,\n    platform,\n    setCFDPasswordResetModal,\n}: TCFDResetPasswordModal) => {\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            context={context}\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent context={context} current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n};\n\nCFDResetPasswordModal.propTypes = {\n    current_list: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n    email: PropTypes.string,\n    is_cfd_reset_password_modal_enabled: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    platform: PropTypes.string,\n    setCFDPasswordResetModal: PropTypes.func,\n    history: PropTypes.object,\n    context: PropTypes.object,\n};\n\nexport default React.memo(\n    withRouter(\n        connect(({ modules: { cfd }, client, ui }: RootStore) => ({\n            email: client.email,\n            is_eu: client.is_eu,\n            is_cfd_reset_password_modal_enabled: ui.is_cfd_reset_password_modal_enabled,\n            setCFDPasswordResetModal: ui.setCFDPasswordResetModal,\n            current_list: cfd.current_list,\n            is_logged_in: client.is_logged_in,\n        }))(CFDResetPasswordModal)\n    )\n);\n","import React from 'react';\nimport { Dialog, UnhandledErrorModal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\nconst CFDServerErrorDialog = observer(() => {\n    const { ui, modules } = useStore();\n    const { enableApp, disableApp } = ui;\n    const { cfd } = modules;\n    const { clearCFDError, error_message, error_type, has_cfd_error, is_cfd_success_dialog_enabled } = cfd;\n\n    const should_show_error =\n        has_cfd_error &&\n        !is_cfd_success_dialog_enabled &&\n        error_type &&\n        error_type !== 'PasswordReset' &&\n        error_type !== 'PasswordError';\n\n    if (should_show_error) {\n        return error_message ? (\n            <Dialog\n                title={localize('Something’s not right')}\n                confirm_button_text={localize('OK')}\n                onConfirm={clearCFDError}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={should_show_error}\n            >\n                {error_message}\n            </Dialog>\n        ) : (\n            <UnhandledErrorModal />\n        );\n    }\n    return null;\n});\n\nexport default CFDServerErrorDialog;\n","import React from 'react';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport { Icon, Modal, Button, Money, Text } from '@deriv/components';\nimport { getCFDPlatformLabel, CFD_PLATFORMS } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport RootStore from '../Stores/index';\nimport { connect } from '../Stores/connect';\nimport { TDxCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { getTopUpConfig } from '../Helpers/constants';\n\ntype TExtendedCurrentAccount = DetailsOfEachMT5Loginid & {\n    display_login: string;\n    category: string;\n    type: string;\n};\n\ntype TCFDTopUpDemoModalProps = {\n    dxtrade_companies: TDxCompanies;\n    mt5_companies: TMtCompanies;\n    current_account?: TExtendedCurrentAccount;\n    closeSuccessTopUpModal: () => void;\n    closeTopUpModal: () => void;\n    is_top_up_virtual_open: boolean;\n    is_top_up_virtual_in_progress: boolean;\n    is_top_up_virtual_success: boolean;\n    context: RootStore;\n    platform: string;\n    topUpVirtual: (platform: string) => void;\n};\n\nconst CFDTopUpDemoModal = ({\n    dxtrade_companies,\n    mt5_companies,\n    current_account,\n    closeSuccessTopUpModal,\n    closeTopUpModal,\n    is_top_up_virtual_open,\n    is_top_up_virtual_in_progress,\n    is_top_up_virtual_success,\n    platform,\n    context,\n    topUpVirtual,\n}: TCFDTopUpDemoModalProps) => {\n    const getAccountTitle = React.useCallback(() => {\n        let title = '';\n        if ((!mt5_companies && !dxtrade_companies) || !current_account) return '';\n\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                title =\n                    mt5_companies[current_account.category as keyof TMtCompanies][\n                        current_account.type as keyof TMtCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                title =\n                    dxtrade_companies[current_account.category as keyof TDxCompanies][\n                        current_account.type as keyof TDxCompanies['demo' | 'real']\n                    ].title;\n                break;\n            default:\n                break;\n        }\n\n        return title;\n    }, [mt5_companies, dxtrade_companies, current_account]);\n\n    const onCloseSuccess = () => {\n        closeSuccessTopUpModal();\n    };\n\n    const platform_title = getCFDPlatformLabel(platform);\n\n    if ((!mt5_companies && !dxtrade_companies) || !current_account) return null;\n\n    const { minimum_amount, additional_amount } = getTopUpConfig();\n\n    return (\n        <React.Fragment>\n            <Modal\n                toggleModal={closeTopUpModal}\n                is_open={is_top_up_virtual_open}\n                context={context}\n                className='top-up-virtual'\n                title={localize('Fund top up')}\n                width='384px'\n            >\n                <div className='dc-modal__container_top-up-virtual__body'>\n                    <Text\n                        as='p'\n                        align='center'\n                        size='xxs'\n                        line_height='xs'\n                        className='dc-modal__container_top-up-virtual__description'\n                        data-testid='dt_top_up_virtual_description'\n                    >\n                        <Localize\n                            i18n_default_text='You can top up your demo account with an additional <0></0> if your balance is <1></1> or less.'\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                                <Money\n                                    key={1}\n                                    amount={minimum_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </Text>\n                    <h4 className='dc-modal__container_top-up-virtual--h4'>\n                        <Localize\n                            i18n_default_text='{{ platform }} {{ account_title }} account'\n                            values={{\n                                platform: platform_title,\n                                account_title: getAccountTitle(),\n                            }}\n                        />\n                    </h4>\n                    <div>\n                        <Text as='p' align='center' size='xxs'>\n                            <Localize i18n_default_text='Current balance' />\n                        </Text>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money\n                                amount={current_account.display_balance}\n                                currency={current_account.currency}\n                                has_sign={(current_account.balance as number) < 0}\n                            />\n                        </div>\n                    </div>\n                    <div className='dc-modal__container_top-up-virtual--button'>\n                        <Button\n                            is_disabled={(current_account.balance as number) > 1000 || is_top_up_virtual_in_progress}\n                            type='button'\n                            is_loading={is_top_up_virtual_in_progress}\n                            onClick={() => topUpVirtual(platform)}\n                            primary\n                            large\n                        >\n                            {!is_top_up_virtual_in_progress && (\n                                <Localize\n                                    i18n_default_text='Top up &nbsp;<0></0>'\n                                    components={[\n                                        <Money\n                                            key={0}\n                                            amount={additional_amount}\n                                            currency={current_account.currency}\n                                            show_currency\n                                        />,\n                                    ]}\n                                />\n                            )}\n                        </Button>\n                    </div>\n                </div>\n            </Modal>\n            <SuccessDialog\n                is_open={is_top_up_virtual_success}\n                toggleModal={onCloseSuccess}\n                has_close_icon\n                title={localize('Fund top up')}\n                icon={<Icon icon='IcCashierWallet' size={128} />}\n                heading={\n                    <h3 className='cfd-success-topup__heading'>\n                        <Localize\n                            i18n_default_text='<0></0> has been credited into your {{platform}} {{title}} account.'\n                            values={{ platform: platform_title, title: getAccountTitle() }}\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </h3>\n                }\n                message={\n                    <div className='cfd-success-topup__description'>\n                        <p>\n                            <Localize i18n_default_text='New current balance' />\n                        </p>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money amount={current_account.balance} currency={current_account.currency} />\n                        </div>\n                    </div>\n                }\n                icon_size='large'\n                has_cancel={false}\n                has_submit={false}\n                width='384px'\n            />\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ ui, modules }: RootStore) => ({\n    is_top_up_virtual_open: ui.is_top_up_virtual_open,\n    is_top_up_virtual_in_progress: ui.is_top_up_virtual_in_progress,\n    is_top_up_virtual_success: ui.is_top_up_virtual_success,\n    closeTopUpModal: ui.closeTopUpModal,\n    closeSuccessTopUpModal: ui.closeSuccessTopUpModal,\n    current_account: modules.cfd.current_account,\n    dxtrade_companies: modules.cfd.dxtrade_companies,\n    mt5_companies: modules.cfd.mt5_companies,\n    topUpVirtual: modules.cfd.topUpVirtual,\n}))(CFDTopUpDemoModal);\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS, isLandingCompanyEnabled } from '@deriv/shared';\nimport { LandingCompany } from '@deriv/api-types';\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: LandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    mt5: TDxTradeAccountsDescription & { financial_stp: string };\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    synthetic: string;\n    synthetic_eu: string;\n    financial: string;\n    financial_au: string;\n    financial_eu: string | React.ReactNode;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: LandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (\n    | NonNullable<LandingCompany['mt_gaming_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial_stp']\n    | LandingCompany['dxtrade_gaming_company']\n    | LandingCompany['dxtrade_financial_company']\n    | boolean\n    | undefined\n)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, platform, is_logged_in, is_uk }) => {\n    const getLoggedOutTypesCount = () => (platform === CFD_PLATFORMS.MT5 ? 3 : 2);\n    const getLoggedInTypesCount = () =>\n        (\n            (platform === CFD_PLATFORMS.MT5\n                ? [\n                      landing_companies?.mt_gaming_company?.financial,\n                      landing_companies?.mt_financial_company?.financial,\n                      landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5,\n                  ]\n                : [\n                      landing_companies?.dxtrade_gaming_company,\n                      landing_companies?.dxtrade_financial_company,\n                  ]) as TAccountTypesToFilter\n        ).filter(Boolean).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount() : getLoggedOutTypesCount();\n    const financial_eu_trading_instruments = is_uk ? (\n        <div>\n            {localize('Forex, stocks, stock indices, cryptocurrencies')}\n            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                **\n            </Text>\n            {localize(', synthetic indices')}\n        </div>\n    ) : (\n        localize('Forex, stocks, stock indices, cryptocurrencies, synthetic indices')\n    );\n\n    return [\n        {\n            attribute: localize('Account currency'),\n            mt5: {\n                synthetic: localize('USD'),\n                synthetic_eu: localize('EUR'),\n                financial: localize('USD'),\n                financial_au: localize('USD'),\n                financial_eu: localize('EUR/GBP/USD'),\n                financial_stp: localize('USD'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('USD'),\n                synthetic_eu: localize('EUR'),\n                financial: localize('USD'),\n                financial_au: localize('USD'),\n                financial_eu: localize('EUR/GBP'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            mt5: {\n                synthetic: localize('Up to 1:1000'),\n                synthetic_eu: localize('Up to 1:1000'),\n                financial: localize('Up to 1:1000'),\n                financial_au: localize('Up to 1:30'),\n                financial_eu: localize('Up to 1:30'),\n                financial_stp: localize('Up to 1:100'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Up to 1:1000'),\n                synthetic_eu: localize('Up to 1:1000'),\n                financial: localize('Up to 1:1000'),\n                financial_au: localize('Up to 1:30'),\n                financial_eu: localize('Up to 1:30'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            mt5: {\n                synthetic: localize('Market'),\n                synthetic_eu: localize('Market'),\n                financial: localize('Market'),\n                financial_au: localize('Market'),\n                financial_eu: localize('Market'),\n                financial_stp: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Market'),\n                synthetic_eu: localize('Market'),\n                financial: localize('Market'),\n                financial_au: localize('Market'),\n                financial_eu: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            mt5: {\n                synthetic: localize('Fixed/Variable'),\n                synthetic_eu: localize('Fixed/Variable'),\n                financial: localize('Variable'),\n                financial_au: localize('Variable'),\n                financial_eu: localize('Fixed/Variable'),\n                financial_stp: localize('Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Fixed/Variable'),\n                synthetic_eu: localize('Fixed/Variable'),\n                financial: localize('Variable'),\n                financial_au: localize('Variable'),\n                financial_eu: localize('Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            mt5: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                financial_stp: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n            dxtrade: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            mt5: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                financial_stp: localize('No'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            mt5: {\n                synthetic: localize('100%'),\n                synthetic_eu: localize('100%'),\n                financial: localize('100%'),\n                financial_au: localize('100%'),\n                financial_eu: localize('100%'),\n                financial_stp: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('100%'),\n                synthetic_eu: localize('100%'),\n                financial: localize('100%'),\n                financial_au: localize('100%'),\n                financial_eu: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            mt5: {\n                synthetic: localize('50%'),\n                synthetic_eu: localize('50%'),\n                financial: localize('50%'),\n                financial_au: localize('50%'),\n                financial_eu: localize('50%'),\n                financial_stp: localize('50%'),\n                footnote: localize(\n                    \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('50%'),\n                synthetic_eu: localize('50%'),\n                financial: localize('50%'),\n                financial_au: localize('50%'),\n                financial_eu: localize('50%'),\n                footnote: localize(\n                    \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            mt5: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('150+'),\n                financial_au: localize('100+'),\n                financial_eu: localize('50+'),\n                financial_stp: localize('70+'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('90+'),\n                financial_au: localize('90+'),\n                financial_eu: localize('90+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            mt5: {\n                synthetic: localize('N/A'),\n                synthetic_eu: localize('N/A'),\n                financial: localize('24/7'),\n                financial_au: localize('24/7'),\n                financial_eu: localize('24/7'),\n                financial_stp: localize('24/7'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n            dxtrade: {\n                synthetic: localize('N/A'),\n                synthetic_eu: localize('N/A'),\n                financial: localize('24/7'),\n                financial_au: localize('24/7'),\n                financial_eu: localize('24/7'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            mt5: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX-majors (standard/micro lots), FX-minors, basket indices, commodities, cryptocurrencies, and stocks and stock indices'\n                ),\n                financial_au: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies, Stocks, and Stock Indices'\n                ),\n                financial_eu: financial_eu_trading_instruments,\n                financial_stp: localize('FX-majors, FX-minors, FX-exotics, and cryptocurrencies'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX majors (standard/micro lots), FX minors, basket indices, commodities, and cryptocurrencies'\n                ),\n                financial_au: localize('FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies'),\n                financial_eu: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies (except UK)'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(!is_visible);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    is_australian\n) => {\n    const getFinancialObject = (financial?: string, financial_au?: string, financial_eu?: string | React.ReactNode) => {\n        if (is_australian) {\n            return financial_au;\n        }\n        if (is_eu_client) {\n            return financial_eu;\n        }\n        return financial;\n    };\n\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, mt5 = {}, dxtrade = {} }) => {\n            const { synthetic, synthetic_eu, financial, financial_au, financial_eu, footnote } =\n                platform === CFD_PLATFORMS.MT5 ? mt5 : dxtrade;\n            const synthetic_object = { synthetic: is_eu_client ? synthetic_eu : synthetic };\n            const financial_object = { financial: getFinancialObject(financial, financial_au, financial_eu) };\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...(landing_companies?.mt_gaming_company?.financial ? synthetic_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial ? financial_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5\n                        ? { financial_stp: mt5?.financial_stp }\n                        : {}),\n                };\n            }\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...synthetic_object,\n                    ...financial_object,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                ...synthetic_object,\n                ...financial_object,\n                ...{ financial_stp: mt5?.financial_stp },\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['mt5' | 'dxtrade'])\n                            ?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[platform as keyof TAccountsDescription] as TAccountsDescription[\n                                                | 'mt5'\n                                                | 'dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst ModalContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_eu,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState(\n        platform === CFD_PLATFORMS.DXTRADE ? '1.5fr 1fr 2fr' : '1.5fr 1fr 2fr 1fr'\n    );\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n\n        if (is_logged_in && platform === CFD_PLATFORMS.MT5) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.mt_gaming_company?.financial ? '1fr' : ''} ${\n                    landing_companies?.mt_financial_company?.financial ? '2fr' : ''\n                } ${landing_companies?.mt_financial_company?.financial_stp ? ' 1fr ' : ''}`\n            );\n        } else if (is_logged_in && platform === CFD_PLATFORMS.DXTRADE) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.dxtrade_gaming_company ? '1fr' : ''} ${\n                    landing_companies?.dxtrade_financial_company ? '2fr' : ''\n                }`\n            );\n        }\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = platform === CFD_PLATFORMS.MT5 || !is_eu_client;\n    const financial_account_table_head_text = is_eu ? localize('CFDs') : localize('Financial');\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                {is_logged_in ? (\n                                    <React.Fragment>\n                                        {isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) && (\n                                            <Table.Head>{localize('Derived')}</Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial',\n                                        }) && (\n                                            <Table.Head>\n                                                {financial_account_table_head_text}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial_stp',\n                                        }) && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                ) : (\n                                    <React.Fragment>\n                                        <Table.Head>{localize('Derived')}</Table.Head>\n                                        <Table.Head>\n                                            {localize('Financial')}\n                                            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                *\n                                            </Text>\n                                        </Table.Head>\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default ModalContent;\n","import { localize } from '@deriv/translations';\nimport { TCompareAccountContentProps, TCompareAccountFooterButtonData } from '../Containers/props.types';\n\nexport const getEuRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            financial_maltainvest: { text: localize('MT5'), options: { size: 'xxs' } },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            financial_maltainvest: { text: localize('Malta'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            financial_maltainvest: { text: localize('Deriv Investments (Europe) Limited') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator'),\n        values: {\n            financial_maltainvest: {\n                text: localize('Regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n                options: { styles: { padding: '1.8rem 0.8rem' } },\n            },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\nexport const getCrRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            synthetic_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            synthetic_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            synthetic_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            financial_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            financial_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_labuan: {\n                text: localize('Labuan'),\n                options: { weight: 'bold' },\n                tooltip_msg: localize(\n                    'Choosing this jurisdiction will give you a Financial STP account. Your trades will go directly to the market and have tighter spreads.'\n                ),\n            },\n            derivx: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            synthetic_svg: { text: localize('Deriv (SVG) LLC') },\n            synthetic_bvi: { text: localize('Deriv (BVI) Ltd') },\n            synthetic_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_svg: { text: localize('Deriv (SVG) LLC') },\n            financial_bvi: { text: localize('Deriv (BVI) Ltd') },\n            financial_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_labuan: { text: localize('Deriv (FX) Ltd') },\n            derivx: { text: localize('Deriv (SVG) LLC') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator/External dispute resolution'),\n        values: {\n            synthetic_svg: { text: localize('Financial Commission') },\n            synthetic_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            synthetic_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_svg: { text: localize('Financial Commission') },\n            financial_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            financial_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_labuan: { text: localize('Labuan Financial Services Authority (Licence no. MB/18/0024)') },\n            derivx: { text: 'Financial Commission' },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_vanuatu: { text: localize('Up to 1:1000') },\n            financial_labuan: { text: localize('Up to 1:100') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_vanuatu: [\n                { text: localize('Forex') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_labuan: [{ text: localize('Forex') }, { text: localize('Cryptocurrencies') }],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getCrRealFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'synthetic_bvi' },\n    { label: localize('Add'), action: 'synthetic_vanuatu' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'financial_bvi' },\n    { label: localize('Add'), action: 'financial_vanuatu' },\n    { label: localize('Add'), action: 'financial_labuan' },\n    { label: localize('Add'), action: 'derivx' },\n];\nexport const getEuFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'financial_maltainvest' },\n];\n\nexport const getPreappstoreCrDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            financial_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_svg: { text: localize('Up to 1:1000') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getPreappstoreCrDemoFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'derivx' },\n];\n\nexport const getPreappstoreEuDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Table, Button, Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isDesktop, WS, getAuthenticationStatusInfo, CFD_PLATFORMS, ContentFlag, Jurisdiction } from '@deriv/shared';\nimport { connect } from '../Stores/connect';\nimport RootStore from '../Stores/index';\nimport {\n    TDMT5CompareModalContentProps,\n    TCompareAccountContentProps,\n    TCompareAccountFooterButtonData,\n    TCompareAccountContentValues,\n    TCompareAccountRowProps,\n    TCompareAccountRowItem,\n} from './props.types';\nimport {\n    getEuRealContent,\n    getCrRealContent,\n    getCrRealFooterButtons,\n    getPreappstoreCrDemoContent,\n    getPreappstoreCrDemoFooterButtons,\n    getPreappstoreEuDemoContent,\n    getEuFooterButtons,\n} from '../Constants/cfd_compare_account_content';\nimport { GetSettings, GetAccountSettingsResponse } from '@deriv/api-types';\n\nconst Row = ({\n    id,\n    attribute,\n    values,\n    pre_appstore_class,\n    available_accounts_count,\n    classname_for_demo_and_eu,\n    is_pre_appstore_setting,\n    content_flag,\n    is_high_risk_for_mt5,\n    CFDs_restricted_countries,\n    is_preappstore_restricted_cr_demo_account,\n}: TCompareAccountRowProps) => {\n    const is_leverage_row = id === 'leverage';\n    const is_platform_row = id === 'platform';\n    const is_instruments_row = id === 'instruments';\n\n    const getContentSize = () => {\n        if (id === 'counterparty' || id === 'leverage') return isDesktop() ? 'xxs' : 'xxxs';\n        return isDesktop() ? 'xxxs' : 'xxxxs';\n    };\n\n    if (is_platform_row && !is_pre_appstore_setting) {\n        return null;\n    }\n\n    if (is_platform_row && is_pre_appstore_setting && CFDs_restricted_countries) {\n        values.synthetic_bvi = { text: 'MT5' };\n    }\n\n    if (CFDs_restricted_countries) {\n        delete values.derivx;\n    }\n\n    if (is_pre_appstore_setting && is_preappstore_restricted_cr_demo_account) {\n        delete values.synthetic_bvi;\n    }\n\n    if (is_platform_row && content_flag === ContentFlag.HIGH_RISK_CR && is_high_risk_for_mt5) {\n        // needed to adjust the design for high risk\n        values.financial_svg = { text: 'MT5' };\n    }\n    return (\n        <Table.Row\n            className={\n                classname_for_demo_and_eu ??\n                classNames(`cfd-accounts-compare-modal__table-row${pre_appstore_class}`, {\n                    [`cfd-accounts-compare-modal__table-row--leverage${pre_appstore_class}`]: is_leverage_row,\n                    [`cfd-accounts-compare-modal__row-with-columns-count-${available_accounts_count + 1}`]:\n                        available_accounts_count < 6,\n                    [`cfd-accounts-compare-modal__table-row--platform${pre_appstore_class}`]: is_platform_row,\n                    [`cfd-accounts-compare-modal__table-row--instruments${pre_appstore_class}`]: is_instruments_row,\n                })\n            }\n        >\n            <Table.Cell fixed>\n                <Text as='p' weight='bold' color='prominent' size='xxs'>\n                    {attribute}\n                </Text>\n            </Table.Cell>\n\n            {Object.keys(values).map(rowKey => (\n                <Table.Cell\n                    key={rowKey}\n                    className={classNames('cfd-accounts-compare-modal__table-row-item', {\n                        'cfd-accounts-compare-modal__table-row-item--tooltip': (\n                            values[rowKey] as TCompareAccountRowItem\n                        )?.tooltip_msg,\n                    })}\n                >\n                    <>\n                        {Array.isArray(values[rowKey]) ? (\n                            (values[rowKey] as TCompareAccountRowItem[])?.map((item, index) => (\n                                <Text\n                                    key={index}\n                                    as='p'\n                                    color={item?.options?.color ?? 'prominent'}\n                                    weight={item?.options?.weight ?? 'normal'}\n                                    align={item?.options?.align ?? 'center'}\n                                    size={item?.options?.size ?? getContentSize()}\n                                    styles={item?.options?.styles ?? ''}\n                                >\n                                    {item.text}\n                                    {item?.options?.should_show_asterick_at_end && (\n                                        <Text color={'loss-danger'} size={'xxxs'}>\n                                            *\n                                        </Text>\n                                    )}\n                                </Text>\n                            ))\n                        ) : (\n                            <>\n                                <Text\n                                    as='p'\n                                    weight={(values[rowKey] as TCompareAccountRowItem)?.options?.weight ?? 'normal'}\n                                    align={(values[rowKey] as TCompareAccountRowItem)?.options?.align ?? 'center'}\n                                    color={(values[rowKey] as TCompareAccountRowItem)?.options?.color ?? 'prominent'}\n                                    size={(values[rowKey] as TCompareAccountRowItem)?.options?.size ?? getContentSize()}\n                                    styles={(values[rowKey] as TCompareAccountRowItem)?.options?.styles ?? ''}\n                                >\n                                    {(values[rowKey] as TCompareAccountRowItem)?.text}\n                                </Text>\n                                {(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg && (\n                                    <Popover\n                                        alignment='left'\n                                        className='cfd-compare-accounts-tooltip'\n                                        classNameBubble='cfd-compare-accounts-tooltip--msg'\n                                        icon='info'\n                                        disable_message_icon\n                                        is_bubble_hover_enabled\n                                        message={(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg}\n                                        zIndex={9999}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </>\n                </Table.Cell>\n            ))}\n        </Table.Row>\n    );\n};\n\nconst DMT5CompareModalContent = ({\n    content_flag,\n    account_settings,\n    account_status,\n    clearCFDError,\n    current_list,\n    has_real_account,\n    is_demo_tab,\n    is_logged_in,\n    is_pre_appstore_setting,\n    is_preappstore_cr_demo_account,\n    is_preappstore_restricted_cr_demo_account,\n    is_real_enabled,\n    is_virtual,\n    openDerivRealAccountNeededModal,\n    openPasswordModal,\n    openSwitchToRealAccountModal,\n    real_account_creation_unlock_date,\n    setAccountSettings,\n    setAccountType,\n    setAppstorePlatform,\n    setJurisdictionSelectedShortcode,\n    setShouldShowCooldownModal,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n    should_show_derivx,\n    show_eu_related_content,\n    toggleCFDVerificationModal,\n    toggleCompareAccounts,\n    trading_platform_available_accounts,\n    upgradeable_landing_companies,\n    updateMT5Status,\n    no_CR_account,\n    is_eu_user,\n    no_MF_account,\n    CFDs_restricted_countries,\n}: TDMT5CompareModalContentProps) => {\n    const [has_submitted_personal_details, setHasSubmittedPersonalDetails] = React.useState(false);\n\n    const mt5_platforms = trading_platform_available_accounts.map(\n        account => `${account.market_type === 'gaming' ? 'synthetic' : account.market_type}_${account.shortcode}`\n    );\n\n    const has_synthetic = trading_platform_available_accounts.some(account => account.market_type === 'gaming');\n    const available_accounts_keys = [...mt5_platforms, ...(should_show_derivx && has_synthetic ? ['derivx'] : [])];\n\n    const logged_out_available_accounts_count = show_eu_related_content ? 1 : 6;\n    const available_accounts_count = is_logged_in\n        ? available_accounts_keys.length\n        : logged_out_available_accounts_count;\n    const synthetic_accounts_count =\n        !is_logged_in && !show_eu_related_content\n            ? 2\n            : available_accounts_keys.filter(key => key.startsWith('synthetic')).length;\n    const financial_accounts_count =\n        !is_logged_in && !show_eu_related_content\n            ? 4\n            : available_accounts_keys.filter(key => key.startsWith('financial')).length || 1;\n\n    const is_high_risk_for_mt5 = synthetic_accounts_count === 1 && financial_accounts_count === 1;\n    const {\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_vanuatu_maltainvest,\n        poi_acknowledged_for_bvi_labuan,\n        poa_acknowledged,\n        poa_pending,\n    } = getAuthenticationStatusInfo(account_status);\n\n    React.useEffect(() => {\n        if (is_logged_in && !is_virtual) {\n            updateMT5Status();\n        }\n        if (!has_submitted_personal_details) {\n            let get_settings_response: GetSettings = {};\n            if (!account_settings) {\n                WS.authorized.storage.getSettings().then((response: GetAccountSettingsResponse) => {\n                    get_settings_response = response.get_settings as GetSettings;\n                    setAccountSettings(response.get_settings as GetSettings);\n                });\n            } else {\n                get_settings_response = account_settings;\n            }\n            const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n                get_settings_response;\n            if (citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason) {\n                setHasSubmittedPersonalDetails(true);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const getAvailableAccountsContent = (modal_content: TCompareAccountContentProps[]) => {\n        if (!is_logged_in) {\n            if (show_eu_related_content) {\n                return modal_content;\n            }\n            const mt5_data = modal_content.map(item => {\n                const { derivx, ...rest } = item.values; // eslint-disable-line @typescript-eslint/no-unused-vars\n                return { ...item, values: rest };\n            });\n            return mt5_data;\n        }\n        return modal_content.map(row_data => {\n            const available_accounts_values = Object.entries(row_data.values).reduce(\n                (acc, [key, value]) => (available_accounts_keys.includes(key) ? { ...acc, [key]: value } : acc),\n                {} as TCompareAccountContentValues\n            );\n            const content_data = { ...row_data, values: {} as TCompareAccountContentValues };\n            const col_num = should_show_derivx ? 7 : 6;\n            if (available_accounts_keys.length < col_num && !show_eu_related_content) {\n                // order of the values matters for data to be correctly displayed in the table\n                const sorted_values = [\n                    'synthetic_svg',\n                    'synthetic_bvi',\n                    'financial_svg',\n                    'financial_bvi',\n                    'financial_vanuatu',\n                    'financial_labuan',\n                    ...(should_show_derivx && synthetic_accounts_count > 0 ? ['derivx'] : []),\n                ];\n                content_data.values = sorted_values.reduce(\n                    (acc, el) => (available_accounts_keys.includes(el) ? { ...acc, [el]: undefined } : acc),\n                    {}\n                );\n                available_accounts_keys.forEach(key => {\n                    if (row_data.id === 'leverage' && (key === 'financial_svg' || key === 'financial_bvi')) {\n                        content_data.values[key] = row_data.values.financial_vanuatu;\n                    } else if (row_data.id === 'instruments' && key === 'synthetic_bvi') {\n                        content_data.values[key] = row_data.values.synthetic_svg;\n                    } else if (row_data.id === 'instruments' && key === 'financial_bvi') {\n                        content_data.values[key] = row_data.values.financial_svg;\n                    }\n                });\n            }\n            return { ...content_data, values: { ...content_data.values, ...available_accounts_values } };\n        });\n    };\n\n    const getAvailableAccountsFooterButtons = (footer_button_data: TCompareAccountFooterButtonData[]) => {\n        return footer_button_data.filter(data => {\n            if (CFDs_restricted_countries) {\n                //remove derivx button if user is from restricted countries\n                if (data.action === 'derivx') return false;\n            }\n            return available_accounts_keys.includes(data.action);\n        });\n    };\n\n    const onSelectRealAccount = (item: TCompareAccountFooterButtonData) => {\n        const selected_account_type = () => {\n            if (item.action === 'derivx') return 'all';\n            return item.action.startsWith('financial') ? 'financial' : 'synthetic';\n        };\n\n        const type_of_account = {\n            category: is_demo_tab ? 'demo' : 'real',\n            type: selected_account_type(),\n        };\n        clearCFDError();\n        setAccountType(type_of_account);\n\n        switch (item.action) {\n            case 'synthetic_svg':\n            case 'financial_svg':\n                setAppstorePlatform(CFD_PLATFORMS.MT5);\n                setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                openPasswordModal(type_of_account);\n                break;\n            case 'synthetic_bvi':\n            case 'financial_bvi':\n                setAppstorePlatform(CFD_PLATFORMS.MT5);\n                setJurisdictionSelectedShortcode(Jurisdiction.BVI);\n                if (\n                    poi_acknowledged_for_bvi_labuan &&\n                    !poi_or_poa_not_submitted &&\n                    !should_restrict_bvi_account_creation &&\n                    has_submitted_personal_details &&\n                    poa_acknowledged\n                ) {\n                    openPasswordModal(type_of_account);\n                } else {\n                    toggleCFDVerificationModal();\n                }\n                break;\n            case 'synthetic_vanuatu':\n            case 'financial_vanuatu':\n                setAppstorePlatform(CFD_PLATFORMS.MT5);\n                setJurisdictionSelectedShortcode(Jurisdiction.VANUATU);\n                if (\n                    poi_acknowledged_for_vanuatu_maltainvest &&\n                    !poi_or_poa_not_submitted &&\n                    !should_restrict_vanuatu_account_creation &&\n                    has_submitted_personal_details &&\n                    poa_acknowledged\n                ) {\n                    openPasswordModal(type_of_account);\n                } else {\n                    toggleCFDVerificationModal();\n                }\n                break;\n            case 'financial_labuan':\n                setAppstorePlatform(CFD_PLATFORMS.MT5);\n                setJurisdictionSelectedShortcode(Jurisdiction.LABUAN);\n                if (poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_personal_details) {\n                    openPasswordModal(type_of_account);\n                } else {\n                    toggleCFDVerificationModal();\n                }\n                break;\n            case 'financial_maltainvest':\n                setAppstorePlatform(CFD_PLATFORMS.MT5);\n                setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                if ((poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged) || is_demo_tab) {\n                    openPasswordModal(type_of_account);\n                } else {\n                    toggleCFDVerificationModal();\n                }\n                break;\n            case 'derivx':\n                setAppstorePlatform(CFD_PLATFORMS.DXTRADE);\n                openPasswordModal(type_of_account);\n                break;\n            default:\n        }\n    };\n\n    const isMt5AccountAdded = (item: TCompareAccountFooterButtonData) =>\n        Object.entries(current_list).some(([key, value]) => {\n            const [market, type] = item.action.split('_');\n            const current_account_type = is_demo_tab ? 'demo' : 'real';\n            return (\n                value.market_type === market &&\n                value.landing_company_short === type &&\n                value.account_type === current_account_type &&\n                key.includes(CFD_PLATFORMS.MT5)\n            );\n        });\n\n    const isDxtradeAccountAdded = () =>\n        Object.entries(current_list).some(([key, value]) => {\n            const current_account_type = is_demo_tab ? 'demo' : 'real';\n            return value.account_type === current_account_type && key.includes(CFD_PLATFORMS.DXTRADE);\n        });\n\n    const onButtonClick = (item: TCompareAccountFooterButtonData) => {\n        const if_no_corresponding_real_account = is_pre_appstore_setting\n            ? (no_CR_account && !is_eu_user) || (no_MF_account && is_eu_user)\n            : !has_real_account;\n\n        const should_show_missing_real_account =\n            is_logged_in &&\n            if_no_corresponding_real_account &&\n            upgradeable_landing_companies?.length > 0 &&\n            is_real_enabled;\n\n        toggleCompareAccounts();\n        if (should_show_missing_real_account) {\n            if (real_account_creation_unlock_date && item.action === 'financial_maltainvest') {\n                setShouldShowCooldownModal(true);\n            } else {\n                openDerivRealAccountNeededModal();\n            }\n        } else if (\n            is_virtual &&\n            !['synthetic_svg', 'financial_svg', 'derivx', 'financial_maltainvest'].includes(item.action)\n        ) {\n            openSwitchToRealAccountModal();\n        } else {\n            onSelectRealAccount(item);\n        }\n    };\n\n    const getModalContent = () => {\n        if (is_preappstore_cr_demo_account) {\n            return getPreappstoreCrDemoContent();\n        } else if (show_eu_related_content) {\n            if (is_pre_appstore_setting && content_flag === ContentFlag.EU_DEMO) {\n                return getPreappstoreEuDemoContent();\n            }\n            return getEuRealContent();\n        }\n        return getCrRealContent();\n    };\n\n    const modal_footer = () => {\n        if (is_preappstore_cr_demo_account) return getPreappstoreCrDemoFooterButtons();\n        else if (is_demo_tab && show_eu_related_content) return getEuFooterButtons();\n        return show_eu_related_content ? getEuFooterButtons() : getCrRealFooterButtons();\n    };\n\n    const shouldShowPendingStatus = (item: TCompareAccountFooterButtonData) => {\n        const type = item.action.split('_')[1];\n        if (isMt5AccountAdded(item)) {\n            return false;\n        } else if (item.action === 'derivx') {\n            return false;\n        } else if (type === 'bvi' && should_restrict_bvi_account_creation && poa_pending) {\n            return true;\n        } else if (type === 'vanuatu' && should_restrict_vanuatu_account_creation && poa_pending) {\n            return true;\n        }\n\n        return false;\n    };\n\n    const pre_appstore_class = should_show_derivx && synthetic_accounts_count ? '__pre-appstore' : '';\n\n    const getClassNamesForDemoAndEu = () => {\n        if (is_preappstore_cr_demo_account) return 'cfd-accounts-compare-modal-row-demo';\n        else if (show_eu_related_content) return 'cfd-accounts-compare-modal-row-eu';\n        return null;\n    };\n\n    const classname_for_demo_and_eu = getClassNamesForDemoAndEu();\n\n    return (\n        <div className='cfd-accounts-compare-modal'>\n            <div className='cfd-accounts-compare-modal__table-wrapper'>\n                <Table className='cfd-accounts-compare-modal__table'>\n                    <Table.Header>\n                        <Table.Row\n                            className={\n                                classname_for_demo_and_eu ??\n                                classNames(`cfd-accounts-compare-modal__table-header${pre_appstore_class}`, {\n                                    [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}-financial-${financial_accounts_count}${pre_appstore_class}`]:\n                                        available_accounts_count < 6 && !CFDs_restricted_countries,\n                                    [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}${pre_appstore_class}`]:\n                                        CFDs_restricted_countries,\n                                })\n                            }\n                        >\n                            <Table.Head fixed className='cfd-accounts-compare-modal__table-empty-cell' />\n                            {!show_eu_related_content && synthetic_accounts_count > 0 && (\n                                <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                    {localize('Derived')}\n                                </Table.Head>\n                            )}\n                            {!CFDs_restricted_countries && financial_accounts_count > 0 && (\n                                <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                    {show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                                </Table.Head>\n                            )}\n                            {!CFDs_restricted_countries && should_show_derivx && synthetic_accounts_count > 0 && (\n                                <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                    {localize('Deriv X')}\n                                </Table.Head>\n                            )}\n                        </Table.Row>\n                    </Table.Header>\n\n                    <React.Fragment>\n                        <Table.Body>\n                            {getAvailableAccountsContent(getModalContent()).map(row => (\n                                <Row\n                                    key={row.id}\n                                    {...row}\n                                    pre_appstore_class={pre_appstore_class}\n                                    available_accounts_count={available_accounts_count}\n                                    classname_for_demo_and_eu={classname_for_demo_and_eu}\n                                    is_pre_appstore_setting={is_pre_appstore_setting}\n                                    content_flag={content_flag}\n                                    is_high_risk_for_mt5={is_high_risk_for_mt5}\n                                    CFDs_restricted_countries={CFDs_restricted_countries}\n                                    is_preappstore_restricted_cr_demo_account={\n                                        is_preappstore_restricted_cr_demo_account\n                                    }\n                                />\n                            ))}\n                        </Table.Body>\n                        {is_logged_in && (\n                            <Table.Row\n                                className={\n                                    classname_for_demo_and_eu ??\n                                    classNames(`cfd-accounts-compare-modal__table-footer${pre_appstore_class}`, {\n                                        [`cfd-accounts-compare-modal__row-with-columns-count-${\n                                            available_accounts_count + 1\n                                        }`]: available_accounts_count < 6,\n                                    })\n                                }\n                            >\n                                <Table.Cell\n                                    fixed\n                                    className={\n                                        'cfd-accounts-compare-modal__table-empty-cell cfd-accounts-compare-modal__table-footer__item'\n                                    }\n                                />\n\n                                {getAvailableAccountsFooterButtons(modal_footer()).map((item, index) => (\n                                    <Table.Cell\n                                        key={index}\n                                        className={classNames('cfd-accounts-compare-modal__table-footer__item', {\n                                            [`cfd-accounts-compare-modal__table-footer__item--eu-pre_appstore}`]:\n                                                is_pre_appstore_setting && show_eu_related_content,\n                                        })}\n                                    >\n                                        {!is_demo_tab && shouldShowPendingStatus(item) ? (\n                                            <div className='cfd-accounts-compare-modal__table-footer__item--verification-pending'>\n                                                <Text size={isDesktop ? 'xxs' : 'xxxs'} align='center'>\n                                                    {localize('Pending verification')}\n                                                </Text>\n                                            </div>\n                                        ) : (\n                                            <Button\n                                                className='cfd-accounts-compare-modal__table-footer__button'\n                                                disabled={\n                                                    item.action === 'derivx'\n                                                        ? isDxtradeAccountAdded()\n                                                        : isMt5AccountAdded(item)\n                                                }\n                                                type='button'\n                                                primary_light\n                                                onClick={() => onButtonClick(item)}\n                                            >\n                                                {item.label}\n                                            </Button>\n                                        )}\n                                    </Table.Cell>\n                                ))}\n                            </Table.Row>\n                        )}\n                    </React.Fragment>\n                </Table>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(({ modules, client, common, ui, traders_hub }: RootStore) => ({\n    account_settings: client.account_settings,\n    account_status: client.account_status,\n    account_type: modules.cfd.account_type,\n    clearCFDError: modules.cfd.clearCFDError,\n    current_list: modules.cfd.current_list,\n    has_real_account: client.has_active_real_account,\n    has_real_mt5_login: client.has_real_mt5_login,\n    is_virtual: client.is_virtual,\n    openSwitchToRealAccountModal: ui.openSwitchToRealAccountModal,\n    setAccountSettings: client.setAccountSettings,\n    setAccountType: modules.cfd.setAccountType,\n    setJurisdictionSelectedShortcode: modules.cfd.setJurisdictionSelectedShortcode,\n    should_restrict_bvi_account_creation: client.should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation: client.should_restrict_vanuatu_account_creation,\n    toggleCFDVerificationModal: modules.cfd.toggleCFDVerificationModal,\n    trading_platform_available_accounts: client.trading_platform_available_accounts,\n    updateMT5Status: client.updateMT5Status,\n    upgradeable_landing_companies: client.upgradeable_landing_companies,\n    setAppstorePlatform: common.setAppstorePlatform,\n    no_CR_account: traders_hub.no_CR_account,\n    is_eu_user: traders_hub.is_eu_user,\n    no_MF_account: traders_hub.no_MF_account,\n    CFDs_restricted_countries: traders_hub.CFDs_restricted_countries,\n}))(DMT5CompareModalContent);\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS } from '@deriv/shared';\nimport { LandingCompany, CurrencyConfigStructure } from '@deriv/api-types';\n\n// TODO: Remove this temporary type when api-types updates\ntype TLandingCompany = LandingCompany & {\n    /**\n     * Available Deriv X financial account types (all except Synthetic Indices).\n     */\n    dxtrade_all_company?: {\n        /**\n         * Landing Company details.\n         */\n        standard?: {\n            /**\n             * Landing Company address\n             */\n            address?: string[] | null;\n            /**\n             * Special conditions for changing sensitive fields\n             */\n            changeable_fields?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company country of incorporation\n             */\n            country?: string;\n            currency_config?: CurrencyConfigStructure;\n            /**\n             * Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.\n             */\n            has_reality_check?: 0 | 1;\n            /**\n             * Allowed contract types\n             */\n            legal_allowed_contract_categories?: string[];\n            /**\n             * Allowable currencies\n             */\n            legal_allowed_currencies?: string[];\n            /**\n             * Allowable markets\n             */\n            legal_allowed_markets?: string[];\n            /**\n             * Default account currency\n             */\n            legal_default_currency?: string;\n            /**\n             * Landing Company legal name\n             */\n            name?: string;\n            /**\n             * Legal requirements for the Landing Company\n             */\n            requirements?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company short code\n             */\n            shortcode?: string;\n            /**\n             * Flag that indicates whether the landing company supports professional accounts or not\n             */\n            support_professional_client?: 0 | 1;\n        };\n    };\n};\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: TLandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    derivx: string;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: TLandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (TLandingCompany['dxtrade_all_company'] | boolean | undefined)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, is_logged_in }) => {\n    const getLoggedInTypesCount = ([landing_companies?.dxtrade_all_company] as TAccountTypesToFilter).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount : 2;\n\n    return [\n        {\n            attribute: localize('Currency'),\n            dxtrade: {\n                derivx: localize('USD'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            dxtrade: {\n                derivx: localize('Up to 1:1000'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            dxtrade: {\n                derivx: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            dxtrade: {\n                derivx: localize('Fixed/Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            dxtrade: {\n                derivx: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, named margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            dxtrade: {\n                derivx: localize('50%'),\n                footnote: localize(\n                    'If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Negative Balance Protection'),\n            dxtrade: {\n                derivx: localize('Available'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            dxtrade: {\n                derivx: localize('110+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            dxtrade: {\n                derivx: localize('N/A'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            dxtrade: {\n                derivx: localize(\n                    'Synthetics, Baskets, Derived FX, Forex: standard/micro, Stocks, Stock indices, Commodities, Cryptocurrencies'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(prev => !prev);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform\n) => {\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, dxtrade = {} }) => {\n            const { derivx, footnote } = dxtrade;\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    derivx,\n                };\n            }\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['dxtrade'])?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[\n                                                platform as keyof TAccountsDescription\n                                            ] as TAccountsDescription['dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst CfdDxtradeCompareContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState('1fr 1.5fr');\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n        updateColumnsStyle('1fr 1.5fr');\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = !is_eu_client;\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                <Table.Head>{localize('Deriv X')}</Table.Head>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default CfdDxtradeCompareContent;\n","import React from 'react';\nimport { Button, Modal, DesktopWrapper, MobileDialog, MobileWrapper, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from '../Stores/connect';\nimport RootStore from '../Stores/index';\nimport { CFD_PLATFORMS, isLandingCompanyEnabled, ContentFlag } from '@deriv/shared';\nimport { LandingCompany } from '@deriv/api-types';\nimport ModalContent from './compare-accounts-content';\nimport DMT5CompareModalContent from './mt5-compare-table-content';\nimport CfdDxtradeCompareContent from '../Components/cfd-dxtrade-compare-content';\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: LandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCompareAccountsModalProps = TCompareAccountsReusedProps & {\n    disableApp: () => void;\n    enableApp: () => void;\n    is_compare_accounts_visible: boolean;\n    is_loading: boolean;\n    is_eu: boolean;\n    is_real_enabled: boolean;\n    residence: string;\n    is_demo_tab: boolean;\n    has_unmerged_account: boolean;\n    toggleCompareAccounts: () => void;\n    openPasswordModal: (account_type: TOpenAccountTransferMeta) => void;\n    openDerivRealAccountNeededModal: () => void;\n    context: RootStore;\n    real_account_creation_unlock_date: string;\n    show_eu_related_content: boolean;\n    setShouldShowCooldownModal: (value: boolean) => void;\n    is_eu_user: string;\n    is_cr_demo_account: boolean;\n    upgradeable_landing_companies: unknown[];\n    landing_company_shortcode: string;\n    content_flag: string;\n    CFDs_restricted_countries: string[];\n};\n\ntype TDxtradeCompareAccountContent = TCompareAccountsReusedProps & {\n    is_demo_tab: boolean;\n    is_eu_client: boolean;\n    has_unmerged_account: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\n// TODO: Remove this component and use one component for both when real released.\nconst DxtradeCompareAccountContent = ({\n    is_demo_tab,\n    is_logged_in,\n    landing_companies,\n    platform,\n    is_eu_client,\n    has_unmerged_account,\n    residence,\n    is_eu,\n    is_uk,\n}: TDxtradeCompareAccountContent) => {\n    if (is_demo_tab || !has_unmerged_account) {\n        return (\n            <CfdDxtradeCompareContent\n                is_logged_in={is_logged_in}\n                landing_companies={landing_companies}\n                platform={platform}\n                is_eu_client={is_eu_client}\n                residence={residence}\n                is_eu={is_eu}\n                is_uk={is_uk}\n            />\n        );\n    }\n\n    return (\n        <ModalContent\n            is_logged_in={is_logged_in}\n            landing_companies={landing_companies}\n            platform={platform}\n            is_eu_client={is_eu_client}\n            residence={residence}\n            is_eu={is_eu}\n            is_uk={is_uk}\n        />\n    );\n};\n\nconst CompareAccountsModal = ({\n    context,\n    disableApp,\n    enableApp,\n    has_unmerged_account,\n    is_compare_accounts_visible,\n    is_demo_tab,\n    is_eu,\n    is_loading,\n    is_logged_in,\n    is_real_enabled,\n    is_uk,\n    landing_companies,\n    openDerivRealAccountNeededModal,\n    openPasswordModal,\n    platform,\n    real_account_creation_unlock_date,\n    residence,\n    setShouldShowCooldownModal,\n    toggleCompareAccounts,\n    content_flag,\n    show_eu_related_content,\n    CFDs_restricted_countries,\n}: TCompareAccountsModalProps) => {\n    const location = window.location.pathname;\n    const is_pre_appstore_setting = location.startsWith('/appstore/traders-hub');\n\n    // TODO : should change the type to all after changing derivx api\n    const has_derivx =\n        isLandingCompanyEnabled({\n            landing_companies,\n            platform: CFD_PLATFORMS.DXTRADE,\n            type: 'financial',\n        }) ||\n        isLandingCompanyEnabled({\n            landing_companies,\n            platform: CFD_PLATFORMS.DXTRADE,\n            type: 'gaming',\n        }) ||\n        isLandingCompanyEnabled({\n            landing_companies,\n            platform: CFD_PLATFORMS.DXTRADE,\n            type: 'all',\n        });\n\n    const should_show_derivx = is_pre_appstore_setting && has_derivx && !show_eu_related_content;\n\n    const show_preappstore_eu_demo = is_pre_appstore_setting && show_eu_related_content && is_demo_tab;\n    const is_preappstore_cr_demo_account = is_pre_appstore_setting && content_flag === ContentFlag.CR_DEMO;\n\n    const is_preappstore_restricted_cr_demo_account =\n        is_pre_appstore_setting && CFDs_restricted_countries && content_flag === ContentFlag.CR_DEMO;\n\n    const is_dxtrade = platform && platform === CFD_PLATFORMS.DXTRADE;\n    const mt5_accounts = [\n        landing_companies?.mt_gaming_company?.financial,\n        landing_companies?.mt_financial_company?.financial,\n        landing_companies?.mt_financial_company?.financial_stp,\n    ];\n\n    const cfd_account_button_label =\n        mt5_accounts.filter(Boolean).length === 1 ||\n        (is_demo_tab && platform === CFD_PLATFORMS.DXTRADE) ||\n        (!has_unmerged_account && platform === CFD_PLATFORMS.DXTRADE)\n            ? localize('Account Information')\n            : localize('Compare accounts');\n\n    const getCFDModalTitle = () => {\n        if (is_pre_appstore_setting && show_eu_related_content) {\n            return is_demo_tab ? localize('Deriv MT5 CFDs demo account') : localize('Deriv MT5 CFDs real account');\n        } else if (should_show_derivx) {\n            return is_demo_tab ? localize('Compare CFDs demo accounts') : localize('Compare CFDs real accounts');\n        }\n        return is_dxtrade ? cfd_account_button_label : localize('Compare available accounts');\n    };\n    const getModalStyle = () => {\n        if (is_dxtrade) {\n            return {\n                height: '696px',\n                width: '903px',\n            };\n        } else if (is_preappstore_cr_demo_account) {\n            return {\n                height: '404px',\n                width: '610px',\n            };\n        } else if (show_eu_related_content) {\n            if (is_pre_appstore_setting) {\n                if (content_flag === ContentFlag.EU_DEMO) {\n                    return {\n                        height: '350px',\n                        width: '483px',\n                    };\n                }\n                return {\n                    height: '560px',\n                    width: '483px',\n                };\n            }\n            return {\n                height: '525px',\n                width: '300px',\n            };\n        } else if (is_pre_appstore_setting && should_show_derivx) {\n            return {\n                height: '600px',\n                width: '1115px',\n            };\n        }\n        return {\n            height: '506px',\n            width: '996px',\n        };\n    };\n\n    const getModalContent = () => {\n        return is_dxtrade ? (\n            <DxtradeCompareAccountContent\n                is_demo_tab={is_demo_tab}\n                is_logged_in={is_logged_in}\n                landing_companies={landing_companies}\n                platform={platform}\n                is_eu_client={!!show_eu_related_content}\n                residence={residence}\n                has_unmerged_account={has_unmerged_account}\n                is_eu={is_eu}\n                is_uk={is_uk}\n            />\n        ) : (\n            <DMT5CompareModalContent\n                content_flag={content_flag}\n                context={context}\n                is_demo_tab={is_demo_tab}\n                is_logged_in={is_logged_in}\n                is_pre_appstore_setting={is_pre_appstore_setting}\n                is_preappstore_cr_demo_account={is_preappstore_cr_demo_account}\n                is_preappstore_restricted_cr_demo_account={is_preappstore_restricted_cr_demo_account}\n                is_real_enabled={is_real_enabled}\n                openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                openPasswordModal={openPasswordModal}\n                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                should_show_derivx={should_show_derivx}\n                show_eu_related_content={show_eu_related_content}\n                show_preappstore_eu_demo={show_preappstore_eu_demo}\n                toggleCompareAccounts={toggleCompareAccounts}\n            />\n        );\n    };\n\n    return (\n        <>\n            <div className='cfd-compare-accounts-modal__wrapper' style={{ marginTop: is_dxtrade ? '5rem' : '2.4rem' }}>\n                {!(is_demo_tab && platform === 'mt5') && !is_pre_appstore_setting && (\n                    <Button\n                        className='cfd-dashboard__welcome-message--button'\n                        has_effect\n                        text={cfd_account_button_label}\n                        onClick={toggleCompareAccounts}\n                        secondary\n                        disabled={is_loading}\n                    />\n                )}\n                <React.Suspense fallback={<UILoader />}>\n                    <DesktopWrapper>\n                        <Modal\n                            className={is_dxtrade ? 'cfd-dashboard__compare-accounts' : 'cfd-accounts-compare-modal'}\n                            disableApp={disableApp}\n                            enableApp={enableApp}\n                            is_open={is_compare_accounts_visible}\n                            title={getCFDModalTitle()}\n                            toggleModal={toggleCompareAccounts}\n                            type='button'\n                            height={getModalStyle().height}\n                            width={getModalStyle().width}\n                            exit_classname={is_dxtrade ? '' : 'cfd-modal--custom-exit'}\n                        >\n                            {getModalContent()}\n                        </Modal>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <MobileDialog\n                            portal_element_id='deriv_app'\n                            title={getCFDModalTitle()}\n                            wrapper_classname='cfd-dashboard__compare-accounts'\n                            visible={is_compare_accounts_visible}\n                            onClose={toggleCompareAccounts}\n                            header_classname={is_dxtrade ? '' : 'cfd-accounts-compare-modal-mobile-header'}\n                            has_full_height\n                        >\n                            {getModalContent()}\n                        </MobileDialog>\n                    </MobileWrapper>\n                </React.Suspense>\n            </div>\n        </>\n    );\n};\n\nexport default connect(({ modules, ui, client, traders_hub }: RootStore) => ({\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    is_compare_accounts_visible: modules.cfd.is_compare_accounts_visible,\n    is_loading: client.is_populating_mt5_account_list,\n    is_eu: client.is_eu,\n    is_uk: client.is_uk,\n    is_eu_country: client.is_eu_country,\n    is_logged_in: client.is_logged_in,\n    landing_companies: client.landing_companies,\n    residence: client.residence,\n    toggleCompareAccounts: modules.cfd.toggleCompareAccountsModal,\n    openDerivRealAccountNeededModal: ui.openDerivRealAccountNeededModal,\n    selected_region: traders_hub.selected_region,\n    is_eu_user: traders_hub.is_eu_user,\n    content_flag: traders_hub.content_flag,\n    show_eu_related_content: traders_hub.show_eu_related_content,\n    CFDs_restricted_countries: traders_hub.CFDs_restricted_countries,\n}))(CompareAccountsModal);\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionVerificationItems, TJurisdictionVerificationStatus } from 'Components/props.types';\n\ntype TJurisdictionVerificationContents = {\n    short_description: string;\n    required_verification_docs: TJurisdictionVerificationItems;\n    status_references: Array<TJurisdictionVerificationStatus>;\n};\n\nexport const jurisdictionVerificationContents = (): TJurisdictionVerificationContents => ({\n    short_description: localize('We need you to submit these in order to get this account:'),\n    required_verification_docs: {\n        document_number: {\n            icon: 'IcDocumentNumberVerification',\n            text: localize('Document number (identity card, passport)'),\n        },\n        selfie: {\n            icon: 'IcSelfieVerification',\n            text: localize('A selfie of yourself.'),\n        },\n        identity_document: {\n            icon: 'IcIdentityDocumentVerification',\n            text: localize('A copy of your identity document (identity card, passport)'),\n        },\n        name_and_address: {\n            icon: 'IcNameAndAddressVerification',\n            text: localize(\n                'A recent utility bill (electricity, water or gas) or recent bank statement or government-issued letter with your name and address.'\n            ),\n        },\n        not_applicable: {\n            icon: 'IcNotApplicableVerification',\n            text: '',\n        },\n    },\n    status_references: [\n        {\n            icon: 'IcVerificationStatusYellow',\n            text: localize('Your document is pending for verification.'),\n            color: 'yellow',\n        },\n        {\n            icon: 'IcVerificationStatusRed',\n            text: localize('Verification failed. Resubmit during account creation.'),\n            color: 'red',\n        },\n        { icon: 'IcVerificationStatusGreen', text: localize('Your document is verified.'), color: 'green' },\n    ],\n});\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { jurisdictionVerificationContents } from 'Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionCardBackProps } from 'Containers/props.types';\n\nconst JurisdictionCardBack = ({\n    card_classname,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    verification_docs,\n}: TJurisdictionCardBackProps) => (\n    <div\n        data-testid='dt_jurisdiction_card_back_container'\n        className={classNames(card_classname, 'cfd-card-back', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div\n            data-testid='dt_jurisdiction_card_back'\n            className={classNames(\n                `${card_classname}__card-content-container`,\n                `${card_classname}__card-flipped-container`\n            )}\n        >\n            <div>\n                <Icon\n                    onClick={toggleCardFlip}\n                    className='cfd-card-back-section-back-button'\n                    icon='IcBackButton'\n                    size={20}\n                />\n            </div>\n            <Text as='div' size='xxs'>\n                {jurisdictionVerificationContents().short_description}\n            </Text>\n            <div className={classNames('cfd-card-back-section-items-container')}>\n                {verification_docs?.map(verification_item => (\n                    <div key={verification_item} className='cfd-card-back-section-items-sub-container'>\n                        <div>\n                            <Icon\n                                icon={\n                                    jurisdictionVerificationContents().required_verification_docs[verification_item]\n                                        ?.icon\n                                }\n                            />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {jurisdictionVerificationContents().required_verification_docs[verification_item]?.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n            <div className='cfd-card-section-divider' />\n            <div className='cfd-card-back-section-items-container'>\n                {jurisdictionVerificationContents().status_references.map(status_item => (\n                    <div className='cfd-card-back-section-items-sub-container' key={status_item.color}>\n                        <div>\n                            <Icon icon={status_item.icon} />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {status_item.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardBack;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionClickableDescriptionProps } from 'Containers/props.types';\n\nconst JurisdictionClickableDescription = ({\n    clickable_description,\n    toggleCardFlip,\n}: TJurisdictionClickableDescriptionProps) => (\n    <div>\n        {clickable_description.map(description_part => {\n            return description_part.type === 'link' ? (\n                <span key={description_part.text} onClick={toggleCardFlip}>\n                    <Text\n                        data-testid='dt_jurisdiction_clickable_description'\n                        as='span'\n                        size='xxs'\n                        className='cfd-card-clickable-description-link'\n                    >\n                        {description_part.text}\n                    </Text>\n                    &nbsp;\n                </span>\n            ) : (\n                <Text key={description_part.text} as='span' size='xxs'>\n                    {description_part.text}\n                </Text>\n            );\n        })}\n    </div>\n);\n\nexport default JurisdictionClickableDescription;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo, Jurisdiction } from '@deriv/shared';\nimport { jurisdictionVerificationContents } from 'Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionTitleIndicatorProps } from 'Containers/props.types';\nimport { TJurisdictionCardItemVerificationItem, TJurisdictionCardVerificationStatus } from 'Components/props.types';\n\nconst JurisdictionTitleIndicator = ({\n    account_status,\n    title_indicators,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionTitleIndicatorProps) => {\n    const {\n        poi_pending_for_bvi_labuan,\n        poi_resubmit_for_bvi_labuan,\n        poi_verified_for_bvi_labuan,\n        poi_pending_for_vanuatu_maltainvest,\n        poi_resubmit_for_vanuatu_maltainvest,\n        poi_verified_for_vanuatu_maltainvest,\n        poa_pending,\n        need_poa_resubmission,\n        poa_verified,\n    } = getAuthenticationStatusInfo(account_status);\n\n    const getVerificationIconVariant = (verification_document: TJurisdictionCardItemVerificationItem): string => {\n        let icon_variant: TJurisdictionCardVerificationStatus = 'Default';\n        if ([Jurisdiction.BVI, Jurisdiction.LABUAN].includes(type_of_card)) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_bvi_labuan) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_bvi_labuan) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_bvi_labuan) {\n                    icon_variant = 'Verified';\n                }\n            }\n        } else if ([Jurisdiction.VANUATU, Jurisdiction.MALTA_INVEST].includes(type_of_card)) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_vanuatu_maltainvest) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_vanuatu_maltainvest) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_vanuatu_maltainvest) {\n                    icon_variant = 'Verified';\n                }\n            }\n        }\n        if (verification_document === 'name_and_address') {\n            if (poa_pending) {\n                icon_variant = 'Pending';\n            } else if (need_poa_resubmission) {\n                icon_variant = 'Failed';\n            } else if (poa_verified) {\n                icon_variant = 'Verified';\n            }\n        }\n        return icon_variant;\n    };\n\n    return title_indicators.type === 'displayText' ? (\n        <Text\n            as='span'\n            color='colored-background'\n            weight='bold'\n            align='center'\n            size='xxxs'\n            className={classNames(\n                'cfd-card-section-title-indicator',\n                `cfd-card-section-title-indicator__${title_indicators.display_text_skin_color}`\n            )}\n        >\n            {title_indicators.display_text}\n        </Text>\n    ) : (\n        <div\n            data-testid='dt_jurisdiction_title_indicator_icon'\n            className='cfd-card-section-title-indicator-icon-container'\n        >\n            {verification_docs?.map(verification_document => (\n                <div\n                    data-testid={`dt_jurisdiction_title_indicator_${getVerificationIconVariant(\n                        verification_document\n                    )}_icon`}\n                    key={verification_document}\n                >\n                    <Icon\n                        size={24}\n                        icon={jurisdictionVerificationContents().required_verification_docs[\n                            verification_document\n                        ]?.icon.concat(getVerificationIconVariant(verification_document))}\n                    />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default JurisdictionTitleIndicator;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionCardSectionProps } from '../props.types';\nimport JurisdictionClickableDescription from './jurisdiction-clickable-description';\nimport JurisdictionTitleIndicator from './jurisdiction-title-indicator';\n\nconst JurisdictionCardSection = ({\n    account_status,\n    card_section_item,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardSectionProps) => (\n    <div className='cfd-card-section'>\n        <div className='cfd-card-title-container'>\n            <Text as='span' weight='bold' size='xs'>\n                {card_section_item.title}\n            </Text>\n            {card_section_item.title_indicators && (\n                <JurisdictionTitleIndicator\n                    account_status={account_status}\n                    title_indicators={card_section_item.title_indicators}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n            )}\n        </div>\n        {(card_section_item.clickable_description || card_section_item.description) && (\n            <div className={`cfd-card-section-description-height-${card_section_item.key.toLowerCase()}`}>\n                {card_section_item.clickable_description ? (\n                    <JurisdictionClickableDescription\n                        clickable_description={card_section_item.clickable_description}\n                        toggleCardFlip={toggleCardFlip}\n                    />\n                ) : (\n                    card_section_item.description && (\n                        <Text as='span' size='xxs'>\n                            {card_section_item.description}\n                        </Text>\n                    )\n                )}\n            </div>\n        )}\n    </div>\n);\n\nexport default JurisdictionCardSection;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCardFrontProps } from 'Containers/props.types';\nimport JurisdictionCardSection from './jurisdiction-card-section';\n\nconst JurisdictionCardFront = ({\n    account_status,\n    card_classname,\n    card_data,\n    card_values,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardFrontProps) => (\n    <div\n        className={classNames(card_classname, 'cfd-card-front', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div className={`${card_classname}__card-content-container`}>\n            {card_values.is_over_header_available ? (\n                <Text\n                    as='div'\n                    weight='bold'\n                    color='info-blue'\n                    align='center'\n                    size='xs'\n                    className={`${card_classname}__card-content-over-header`}\n                >\n                    <Localize i18n_default_text={card_values.over_header} />\n                </Text>\n            ) : (\n                <div className={`${card_classname}__card-content-over-header-blank`} />\n            )}\n            <Text\n                as='p'\n                weight='bold'\n                color='prominent'\n                align='center'\n                size='xsm'\n                className={`${card_classname}__h2-header`}\n            >\n                <Localize i18n_default_text={card_values.header} />\n            </Text>\n            <div className={`${card_classname}__card-section-container`}>\n                {card_data.map((item, index) => (\n                    <React.Fragment key={item.key}>\n                        <JurisdictionCardSection\n                            account_status={account_status}\n                            card_section_item={item}\n                            toggleCardFlip={toggleCardFlip}\n                            type_of_card={type_of_card}\n                            verification_docs={verification_docs}\n                        />\n                        {index < card_data.length - 1 && <div className='cfd-card-section-divider' />}\n                    </React.Fragment>\n                ))}\n            </div>\n            {disabled && (\n                <div className={`${card_classname}__card-content-footer`}>\n                    <Text\n                        as='div'\n                        weight='bold'\n                        color='colored-background'\n                        align='center'\n                        size='xs'\n                        className={`${card_classname}__card-content-footer-text`}\n                    >\n                        <Localize i18n_default_text='Added' />\n                    </Text>\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardFront;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { getJurisdictionContents } from '../../Constants/jurisdiction-contents/jurisdiction-contents';\nimport { TJurisdictionCardProps } from '../props.types';\nimport JurisdictionCardBack from './jurisdiction-card-back';\nimport JurisdictionCardFront from './jurisdiction-card-front';\n\nconst JurisdictionCard = ({\n    account_status,\n    account_type,\n    disabled,\n    is_non_idv_design = false,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    type_of_card,\n}: TJurisdictionCardProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n    const is_synthetic = account_type === 'synthetic';\n    const is_swapfree = account_type === 'all';\n    const card_values = getJurisdictionContents()[type_of_card];\n    const non_synthetic_card_data = is_swapfree\n        ? card_values?.swapfree_contents ?? []\n        : card_values?.financial_contents;\n    const card_data = is_synthetic ? card_values?.synthetic_contents : non_synthetic_card_data;\n    const [is_card_flipped, setIsCardFlipped] = React.useState(false);\n    const is_card_selected = jurisdiction_selected_shortcode === type_of_card;\n    let verification_docs = is_synthetic\n        ? card_values?.synthetic_verification_docs\n        : card_values?.financial_verification_docs;\n    if ([Jurisdiction.BVI, Jurisdiction.VANUATU, Jurisdiction.LABUAN].includes(type_of_card) && is_non_idv_design) {\n        verification_docs = ['selfie', 'identity_document', 'name_and_address'];\n    }\n\n    const cardSelection = (cardType: string) => {\n        setJurisdictionSelectedShortcode(jurisdiction_selected_shortcode === cardType ? '' : cardType);\n    };\n\n    const toggleCardFlip: React.MouseEventHandler<HTMLSpanElement> = event => {\n        event.stopPropagation();\n        setIsCardFlipped(!is_card_flipped);\n    };\n\n    return (\n        <div className='cfd-card-perspective'>\n            <div\n                data-testid='dt_jurisdiction_card'\n                className={classNames('cfd-card-container', `${account_type}`, {\n                    'cfd-card-flipped': is_card_flipped,\n                    'cfd-card-disabled': disabled,\n                })}\n                onClick={disabled ? () => undefined : () => cardSelection(type_of_card)}\n            >\n                <JurisdictionCardFront\n                    account_status={account_status}\n                    card_classname={card_classname}\n                    card_data={card_data}\n                    card_values={card_values}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n                <JurisdictionCardBack\n                    card_classname={card_classname}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    verification_docs={verification_docs}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default JurisdictionCard;\n","import { TJurisdictionCardItems } from 'Components/props.types';\nimport { getJurisdictionBviContents } from './jurisdiction-bvi-contents';\nimport { getJurisdictionLabuanContents } from './jurisdiction-labuan-contents';\nimport { getJurisdictionSvgContents } from './jurisdiction-svg-contents';\nimport { getJurisdictionVanuatuContents } from './jurisdiction-vanuatu-contents';\nimport { getJurisdictionMaltainvestContents } from './jurisdiction_maltainvest_contents';\n\ntype TJurisdictionContent = {\n    svg: TJurisdictionCardItems;\n    vanuatu: TJurisdictionCardItems;\n    labuan: TJurisdictionCardItems;\n    maltainvest: TJurisdictionCardItems;\n    bvi: TJurisdictionCardItems;\n};\n\nexport const getJurisdictionContents = (): TJurisdictionContent => ({\n    svg: getJurisdictionSvgContents(),\n    bvi: getJurisdictionBviContents(),\n    vanuatu: getJurisdictionVanuatuContents(),\n    labuan: getJurisdictionLabuanContents(),\n    maltainvest: getJurisdictionMaltainvestContents(),\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionSvgContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('St. Vincent & Grenadines'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Basket indices and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    swapfree_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock Indices, Cryptocurrencies, and ETFs'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    synthetic_verification_docs: ['not_applicable'],\n    financial_verification_docs: ['not_applicable'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionBviContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('British Virgin Islands'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Basket indices and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionVanuatuContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Vanuatu'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Basket indices and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stock indices, Commodities and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('90+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionLabuanContents = (): TJurisdictionCardItems => ({\n    over_header: localize('Straight-through processing'),\n    is_over_header_available: true,\n    header: localize('Labuan'),\n    synthetic_contents: [\n        { key: 'assets', title: localize('Assets'), description: localize('Forex and Cryptocurrencies') },\n        { key: 'leverage', title: localize('Leverage') },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('80+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:100'),\n                display_text_skin_color: 'yellow-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionMaltainvestContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Malta'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    synthetic_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n    financial_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n});\n","import React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { TJurisdictionModalContentProps } from '../props.types';\nimport JurisdictionCard from './jurisdiction-card';\n\nconst JurisdictionModalContent = ({\n    account_status,\n    account_type,\n    is_non_idv_design = false,\n    is_virtual,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    synthetic_available_accounts,\n    financial_available_accounts,\n    real_synthetic_accounts_existing_data,\n    real_financial_accounts_existing_data,\n    real_swapfree_accounts_existing_data,\n    swapfree_available_accounts,\n}: TJurisdictionModalContentProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n\n    const cardsToBeShown = (type_of_card: string) => {\n        switch (account_type) {\n            case 'synthetic':\n                return synthetic_available_accounts?.some(account => account.shortcode === type_of_card);\n            case 'all':\n                return swapfree_available_accounts?.some(account => account.shortcode === type_of_card);\n            default:\n                return financial_available_accounts?.some(account => account.shortcode === type_of_card);\n        }\n    };\n\n    const disableCard = (type_of_card: string) => {\n        if (is_virtual && type_of_card !== 'svg') {\n            return true;\n        }\n        switch (account_type) {\n            case 'synthetic':\n                return real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            case 'all':\n                return real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            default:\n                return real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n        }\n    };\n\n    const jurisdiction_cards_array = [\n        Jurisdiction.SVG,\n        Jurisdiction.BVI,\n        Jurisdiction.VANUATU,\n        Jurisdiction.LABUAN,\n        Jurisdiction.MALTA_INVEST,\n    ];\n\n    return (\n        <div data-testid='dt-jurisdiction-modal-content' className={`${card_classname}__wrapper`}>\n            {jurisdiction_cards_array.map(\n                card =>\n                    cardsToBeShown(card) && (\n                        <JurisdictionCard\n                            account_status={account_status}\n                            account_type={account_type}\n                            disabled={disableCard(card)}\n                            is_non_idv_design={is_non_idv_design}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            key={card}\n                            setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                            type_of_card={card}\n                        />\n                    )\n            )}\n        </div>\n    );\n};\n\nexport default JurisdictionModalContent;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { isMobile, Jurisdiction } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCheckBoxProps } from '../props.types';\n\nconst JurisdictionCheckBox = ({\n    class_name,\n    is_checked,\n    jurisdiction_selected_shortcode,\n    onCheck,\n    context,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionCheckBoxProps) => {\n    const shouldShowCheckBox = () => {\n        if (\n            !jurisdiction_selected_shortcode ||\n            jurisdiction_selected_shortcode === Jurisdiction.SVG ||\n            (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n            (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n        ) {\n            return false;\n        }\n        return true;\n    };\n\n    const dbvi_company_names: { [key: string]: { [key: string]: string } } = {\n        bvi: { name: 'Deriv (BVI) Ltd', tnc_url: 'tnc/deriv-(bvi)-ltd.pdf' },\n        labuan: { name: 'Deriv (FX) Ltd', tnc_url: 'tnc/deriv-(fx)-ltd.pdf' },\n        maltainvest: {\n            name: 'Deriv Investments (Europe) Limited',\n            tnc_url: 'tnc/deriv-investments-(europe)-limited.pdf',\n        },\n        vanuatu: { name: 'Deriv (V) Ltd', tnc_url: 'tnc/general-terms.pdf' },\n    };\n\n    const getCheckboxLabel = () => (\n        <Text as='p' align='center' size={isMobile() ? 'xxs' : 'xs'} line_height='xs'>\n            <Localize\n                i18n_default_text=\"I confirm and accept {{company}} 's <0>Terms and Conditions</0>\"\n                values={{ company: dbvi_company_names[jurisdiction_selected_shortcode].name }}\n                components={[\n                    <StaticUrl\n                        key={0}\n                        className='link--no-bold'\n                        href={dbvi_company_names[jurisdiction_selected_shortcode].tnc_url}\n                    />,\n                ]}\n            />\n        </Text>\n    );\n    return (\n        <React.Fragment>\n            {shouldShowCheckBox() && (\n                <div className={class_name}>\n                    <Checkbox\n                        context={context}\n                        value={is_checked}\n                        onChange={onCheck}\n                        label={getCheckboxLabel()}\n                        defaultChecked={!!is_checked}\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile, Jurisdiction, getMT5Title } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionModalFootNoteProps } from '../props.types';\n\nconst FooterNote = ({\n    account_status,\n    account_type,\n    context,\n    card_classname,\n    jurisdiction_selected_shortcode,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionModalFootNoteProps) => {\n    const account_type_name = getMT5Title(account_type);\n\n    const { poa_pending } = getAuthenticationStatusInfo(account_status);\n\n    if (jurisdiction_selected_shortcode === Jurisdiction.SVG) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0> account under Deriv (SVG) LLC (company no. 273 LLC 2020).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (\n        (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n        (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n    ) {\n        return poa_pending ? (\n            <Localize\n                i18n_default_text='<0>You can open this account once your submitted documents have been verified.</0>'\n                components={[<span key={0} className={`${card_classname}__footnote--pending`} />]}\n            />\n        ) : (\n            <Localize i18n_default_text='To create this account first we need you to resubmit your proof of address.' />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.BVI) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (BVI) Ltd, regulated by the British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.VANUATU) {\n        return (\n            <Localize\n                i18n_default_text='Add Your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (V) Ltd, regulated by the Vanuatu Financial Services Commission.'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.LABUAN) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  STP account under Deriv (FX) Ltd regulated by Labuan Financial Services Authority (Licence no. MB/18/0024).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n        return (\n            <Localize i18n_default_text='Add your Deriv MT5 CFDs account under Deriv Investments (Europe) Limited, regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156).' />\n        );\n    }\n\n    return null;\n};\n\nconst JurisdictionModalFootNote = (props: TJurisdictionModalFootNoteProps) => {\n    return (\n        <React.Fragment>\n            {props.jurisdiction_selected_shortcode && (\n                <div data-testid='dt-jurisdiction-footnote' className={`${props.card_classname}__footnote`}>\n                    <Text\n                        as='p'\n                        color='prominent'\n                        align='center'\n                        size={isMobile() ? 'xxs' : 'xs'}\n                        weight='bold'\n                        line_height='xs'\n                    >\n                        <FooterNote {...props} />\n                    </Text>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionModalFootNote;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile, Jurisdiction } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TJurisdictionModalContentWrapperProps } from '../props.types';\nimport { connect } from '../../Stores/connect';\nimport RootStore from '../../Stores/index';\nimport JurisdictionModalContent from './jurisdiction-modal-content';\nimport JurisdictionCheckBox from './jurisdiction-modal-checkbox';\nimport JurisdictionModalFootNote from './jurisdiction-modal-foot-note';\n\nconst JurisdictionModalContentWrapper = ({\n    account_status,\n    account_type,\n    context,\n    fetchAccountSettings,\n    has_submitted_cfd_personal_details,\n    is_jurisdiction_modal_visible,\n    is_virtual,\n    jurisdiction_selected_shortcode,\n    openPasswordModal,\n    real_financial_accounts_existing_data,\n    real_swapfree_accounts_existing_data,\n    real_synthetic_accounts_existing_data,\n    residence,\n    residence_list,\n    setJurisdictionSelectedShortcode,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n    show_eu_related_content,\n    toggleCFDVerificationModal,\n    trading_platform_available_accounts,\n    toggleJurisdictionModal,\n    updateMT5Status,\n}: TJurisdictionModalContentWrapperProps) => {\n    const [checked, setChecked] = React.useState(false);\n\n    const {\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_bvi_labuan,\n        poi_acknowledged_for_vanuatu_maltainvest,\n        poa_acknowledged,\n        need_poa_resubmission,\n    } = getAuthenticationStatusInfo(account_status);\n\n    React.useEffect(() => {\n        if (is_jurisdiction_modal_visible) {\n            if (!is_virtual) {\n                updateMT5Status();\n                fetchAccountSettings();\n            }\n            setJurisdictionSelectedShortcode('');\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_jurisdiction_modal_visible]);\n\n    React.useEffect(() => {\n        if (jurisdiction_selected_shortcode) {\n            setChecked(false);\n        }\n    }, [jurisdiction_selected_shortcode, is_jurisdiction_modal_visible]);\n\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'financial' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'gaming' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const is_svg_selected = jurisdiction_selected_shortcode === Jurisdiction.SVG;\n    const is_bvi_selected = jurisdiction_selected_shortcode === Jurisdiction.BVI;\n    const is_vanuatu_selected = jurisdiction_selected_shortcode === Jurisdiction.VANUATU;\n    const is_labuan_selected = jurisdiction_selected_shortcode === Jurisdiction.LABUAN;\n    const is_maltainvest_selected = jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST;\n\n    const is_idv_country =\n        residence_list.find(elem => elem?.value === residence)?.identity?.services?.idv?.is_country_supported === 1;\n    const has_idv_attempts = (account_status?.authentication?.identity?.services?.idv?.submissions_left ?? 0) > 0;\n    const is_non_idv_design = !is_idv_country || (is_idv_country && !has_idv_attempts);\n\n    const swapfree_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'all' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const isNextButtonDisabled = () => {\n        if (jurisdiction_selected_shortcode) {\n            let is_account_created;\n            if (account_type.type === 'synthetic') {\n                is_account_created = real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else if (account_type.type === 'all') {\n                is_account_created = real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else {\n                is_account_created = real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            }\n            if (!is_account_created) {\n                if (\n                    is_svg_selected ||\n                    (is_bvi_selected && should_restrict_bvi_account_creation && need_poa_resubmission) ||\n                    (is_vanuatu_selected && should_restrict_vanuatu_account_creation && need_poa_resubmission)\n                ) {\n                    return false;\n                }\n                return !checked;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    const onSelectRealAccount = () => {\n        const type_of_account = {\n            category: account_type.category,\n            type: account_type.type,\n        };\n\n        if (is_svg_selected) {\n            openPasswordModal(type_of_account);\n        } else if (is_vanuatu_selected) {\n            if (\n                poi_acknowledged_for_vanuatu_maltainvest &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_vanuatu_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_bvi_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_bvi_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_labuan_selected) {\n            if (poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_cfd_personal_details) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_maltainvest_selected) {\n            if (poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        }\n    };\n\n    return (\n        <div className='jurisdiction-modal__content-wrapper'>\n            <div className='jurisdiction-modal__scrollable-content'>\n                <JurisdictionModalContent\n                    account_status={account_status}\n                    account_type={account_type.type}\n                    financial_available_accounts={financial_available_accounts}\n                    is_non_idv_design={is_non_idv_design}\n                    is_virtual={is_virtual}\n                    real_financial_accounts_existing_data={real_financial_accounts_existing_data}\n                    real_synthetic_accounts_existing_data={real_synthetic_accounts_existing_data}\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    real_swapfree_accounts_existing_data={real_swapfree_accounts_existing_data}\n                    setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                    swapfree_available_accounts={swapfree_available_accounts}\n                    synthetic_available_accounts={synthetic_available_accounts}\n                />\n                <div\n                    className={classNames(\n                        'jurisdiction-modal__footer-content',\n                        `cfd-jurisdiction-card--${account_type.type}__footer-wrapper`\n                    )}\n                >\n                    <div className={`cfd-jurisdiction-card--${account_type.type}__footnotes-container`}>\n                        <JurisdictionModalFootNote\n                            account_status={account_status}\n                            account_type={account_type.type}\n                            card_classname={`cfd-jurisdiction-card--${account_type.type}`}\n                            context={context}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                        <JurisdictionCheckBox\n                            is_checked={checked}\n                            context={context}\n                            onCheck={() => setChecked(!checked)}\n                            class_name={`cfd-jurisdiction-card--${account_type.type}__jurisdiction-checkbox`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Modal.Footer className='jurisdiction-modal__footer-button' has_separator>\n                <Button\n                    disabled={isNextButtonDisabled()}\n                    primary\n                    style={{ width: isMobile() ? '100%' : 'unset' }}\n                    onClick={() => {\n                        toggleJurisdictionModal();\n                        onSelectRealAccount();\n                    }}\n                >\n                    {localize('Next')}\n                </Button>\n            </Modal.Footer>\n        </div>\n    );\n};\nexport default connect(({ modules: { cfd }, client, traders_hub }: RootStore) => ({\n    account_status: client.account_status,\n    account_type: cfd.account_type,\n    fetchAccountSettings: client.fetchAccountSettings,\n    has_submitted_cfd_personal_details: cfd.has_submitted_cfd_personal_details,\n    is_jurisdiction_modal_visible: cfd.is_jurisdiction_modal_visible,\n    is_virtual: client.is_virtual,\n    jurisdiction_selected_shortcode: cfd.jurisdiction_selected_shortcode,\n    real_financial_accounts_existing_data: cfd.real_financial_accounts_existing_data,\n    real_swapfree_accounts_existing_data: cfd.real_swapfree_accounts_existing_data,\n    real_synthetic_accounts_existing_data: cfd.real_synthetic_accounts_existing_data,\n    residence: client.residence,\n    residence_list: client.residence_list,\n    setJurisdictionSelectedShortcode: cfd.setJurisdictionSelectedShortcode,\n    should_restrict_bvi_account_creation: client.should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation: client.should_restrict_vanuatu_account_creation,\n    show_eu_related_content: traders_hub.show_eu_related_content,\n    toggleCFDVerificationModal: cfd.toggleCFDVerificationModal,\n    trading_platform_available_accounts: client.trading_platform_available_accounts,\n    toggleJurisdictionModal: cfd.toggleJurisdictionModal,\n    updateMT5Status: client.updateMT5Status,\n}))(JurisdictionModalContentWrapper);\n","import React from 'react';\nimport { DesktopWrapper, MobileDialog, MobileWrapper, Modal, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from '../../Stores/connect';\nimport RootStore from '../../Stores/index';\nimport { getMT5Title } from '@deriv/shared';\nimport { TJurisdictionModalProps } from '../props.types';\nimport JurisdictionModalContentWrapper from './jurisdiction-modal-content-wrapper';\n\nconst JurisdictionModal = ({\n    account_type,\n    context,\n    disableApp,\n    enableApp,\n    is_jurisdiction_modal_visible,\n    openPasswordModal,\n    show_eu_related_content,\n    toggleJurisdictionModal,\n}: TJurisdictionModalProps) => {\n    const modal_title = show_eu_related_content\n        ? localize('Choose a jurisdiction for your Deriv MT5 CFDs account')\n        : localize('Choose a jurisdiction for your Deriv MT5 {{account_type}} account', {\n              account_type: getMT5Title(account_type.type),\n          });\n\n    return (\n        <div>\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        className='jurisdiction-modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        exit_classname='cfd-modal--custom-exit'\n                        is_open={is_jurisdiction_modal_visible}\n                        title={modal_title}\n                        toggleModal={toggleJurisdictionModal}\n                        type='button'\n                        context={context}\n                        width={account_type.type === 'financial' ? '1200px' : '1040px'}\n                    >\n                        <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} context={context} />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <MobileDialog\n                        portal_element_id='deriv_app'\n                        title={modal_title}\n                        context={context}\n                        visible={is_jurisdiction_modal_visible}\n                        onClose={toggleJurisdictionModal}\n                    >\n                        <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} context={context} />\n                    </MobileDialog>\n                </MobileWrapper>\n            </React.Suspense>\n        </div>\n    );\n};\n\nexport default connect(({ modules: { cfd }, ui, traders_hub }: RootStore) => ({\n    account_type: cfd.account_type,\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    is_jurisdiction_modal_visible: cfd.is_jurisdiction_modal_visible,\n    show_eu_related_content: traders_hub.show_eu_related_content,\n    toggleJurisdictionModal: cfd.toggleJurisdictionModal,\n}))(JurisdictionModal);\n","import React from 'react';\nimport { Text, Button, Icon, Money, Popover } from '@deriv/components';\nimport { TPasswordBoxProps, TTradingPlatformAccounts, TCFDDashboardContainer } from '../Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport {\n    CFD_PLATFORMS,\n    isMobile,\n    getCFDAccountDisplay,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    getUrlBase,\n    getCFDAccountKey,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { CFDAccountCopy } from '../Components/cfd-account-copy';\nimport { getPlatformMt5DownloadLink, getMT5WebTerminalLink } from '../Helpers/constants';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\n\ntype TMT5TradeModalProps = {\n    mt5_trade_account: DetailsOfEachMT5Loginid;\n    show_eu_related_content: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        arg3: string,\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n};\n\nexport type TSpecBoxProps = {\n    value: string | undefined;\n    is_bold?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-trade-modal__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst getTitle = (market_type: string, show_eu_related_content: boolean) => {\n    if (show_eu_related_content) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst DMT5TradeModal = ({\n    mt5_trade_account,\n    show_eu_related_content,\n    onPasswordManager,\n    toggleModal,\n}: TMT5TradeModalProps) => {\n    const getCompanyShortcode = () => {\n        if (\n            (mt5_trade_account.account_type === 'demo' &&\n                mt5_trade_account.market_type === 'financial' &&\n                mt5_trade_account.landing_company_short === 'labuan') ||\n            mt5_trade_account.account_type === 'real'\n        ) {\n            return mt5_trade_account.landing_company_short;\n        }\n        return undefined;\n    };\n\n    const getHeadingTitle = () =>\n        getCFDAccountDisplay({\n            market_type: mt5_trade_account.market_type,\n            sub_account_type: mt5_trade_account.sub_account_type,\n            platform: CFD_PLATFORMS.MT5,\n            is_eu: show_eu_related_content,\n            shortcode: getCompanyShortcode(),\n            is_mt5_trade_modal: true,\n        });\n    const getAccountTitle = () => {\n        if (show_eu_related_content) return 'CFDs';\n        else if (mt5_trade_account.market_type === 'synthetic') return 'Derived';\n        else if (mt5_trade_account.market_type === 'all') return 'SwapFree';\n        return 'Financial';\n    };\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                <TradingPlatformIcon icon={getAccountTitle()} size={24} />\n                <div className='cfd-trade-modal__desc'>\n                    <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                        {getHeadingTitle()}\n                    </Text>\n                    {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                        <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                            {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                        </Text>\n                    )}\n                </div>\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Broker')}</Text>\n                    <SpecBox is_bold value={'Deriv Limited'} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Server')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Login ID')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.display_login} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                    <div className='cfd-trade-modal--paragraph'>\n                        <PasswordBox\n                            platform='mt5'\n                            onClick={() => {\n                                const account_type = getCFDAccountKey({\n                                    market_type: mt5_trade_account.market_type,\n                                    sub_account_type: mt5_trade_account.sub_account_type,\n                                    platform: CFD_PLATFORMS.DMT5,\n                                    shortcode: mt5_trade_account.landing_company_short,\n                                });\n                                onPasswordManager(\n                                    mt5_trade_account?.login,\n                                    getTitle(mt5_trade_account.market_type || '', show_eu_related_content),\n                                    mt5_trade_account.account_type || '',\n                                    account_type,\n                                    (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                );\n                                toggleModal();\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcRebrandingMt5Logo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 web')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getMT5WebTerminalLink({\n                            category: mt5_trade_account.account_type,\n                            loginid: (mt5_trade_account as TTradingPlatformAccounts).display_login,\n                            server_name: (mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment,\n                        })}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Open')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcWindowsLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Windows app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('windows')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcMacosLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 MacOS app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('macos')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcLinuxLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Linux app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('linux')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Learn more')}\n                        </Text>\n                    </a>\n                </div>\n            </div>\n            <Text\n                align='center'\n                as='div'\n                className='cfd-trade-modal__download-center-text'\n                size={isMobile() ? 'xxxs' : 'xxs'}\n                weight='bold'\n            >\n                {localize(\n                    'Download {{ platform }} on your phone to trade with the {{ platform }} {{ account }} account',\n                    {\n                        platform: getCFDPlatformLabel(CFD_PLATFORMS.MT5),\n                        account: getAccountTitle(),\n                    }\n                )}\n            </Text>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <a href={getPlatformMt5DownloadLink('ios')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationApple' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('huawei')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                    </a>\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        <img src={getUrlBase('/public/images/common/mt5_download.png')} width={80} height={80} />\n                        <Text align='center' size='xxs'>\n                            {localize('Scan the QR code to download {{ platform }}.', {\n                                platform: getPlatformSettings('mt5').name,\n                            })}\n                        </Text>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default DMT5TradeModal;\n","import React from 'react';\nimport { Text, Button, Icon, Money, Popover } from '@deriv/components';\nimport { TPasswordBoxProps, TTradingPlatformAccounts, TCFDDashboardContainer } from '../Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport {\n    CFD_PLATFORMS,\n    getCFDAccountDisplay,\n    getCFDPlatformLabel,\n    getCFDAccountKey,\n    getPlatformSettings,\n    isMobile,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFDAccountCopy } from '../Components/cfd-account-copy';\nimport { QRCode } from 'react-qrcode';\nimport {\n    getDXTradeWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformMt5DownloadLink,\n} from '../Helpers/constants';\n\ntype TDxTradeModalProps = {\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>;\n    is_eu_user: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        arg3: string,\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    is_demo: string;\n};\n\nexport type TSpecBoxProps = {\n    value: string | undefined;\n    is_bold?: boolean;\n};\n\ntype TDxtradeDesktopDownloadProps = {\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    is_demo: string;\n};\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-trade-modal__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst mobileDownloadLink = (platform: string, type: 'ios' | 'android' | 'huawei') => {\n    return platform === CFD_PLATFORMS.MT5 ? getPlatformMt5DownloadLink(type) : getPlatformDXTradeDownloadLink(type);\n};\n\nconst getTitle = (market_type: string, is_eu_user: boolean) => {\n    if (is_eu_user) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst DxtradeDesktopDownload = ({ dxtrade_tokens, is_demo }: TDxtradeDesktopDownloadProps) => {\n    return (\n        <React.Fragment>\n            <a\n                className='cfd-trade-modal__dxtrade-button'\n                href={getDXTradeWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    dxtrade_tokens && dxtrade_tokens[is_demo ? 'demo' : 'real']\n                )}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon\n                    className='cfd-trade-modal__dxtrade-button-icon'\n                    icon='IcRebrandingDerivxWordmark'\n                    height={32}\n                    width={42}\n                    description={<Localize i18n_default_text='derivX wordmark' />}\n                />\n                <div className='cfd-trade-modal__dxtrade-button-text'>\n                    <Text color='colored-background' size='xxs' weight='bold'>\n                        <Localize i18n_default_text='Web terminal' />\n                    </Text>\n                </div>\n            </a>\n        </React.Fragment>\n    );\n};\n\nconst DerivXTradeModal = ({\n    mt5_trade_account,\n    is_eu_user,\n    onPasswordManager,\n    toggleModal,\n    dxtrade_tokens,\n    is_demo,\n}: TDxTradeModalProps) => {\n    const getCompanyShortcode = () => {\n        if (\n            (mt5_trade_account.account_type === 'demo' &&\n                mt5_trade_account.market_type === 'financial' &&\n                mt5_trade_account.landing_company_short === 'labuan') ||\n            mt5_trade_account.account_type === 'real'\n        ) {\n            return mt5_trade_account.landing_company_short;\n        }\n        return undefined;\n    };\n\n    const getHeadingTitle = () =>\n        getCFDAccountDisplay({\n            market_type: mt5_trade_account.market_type,\n            sub_account_type: mt5_trade_account.sub_account_type,\n            platform: CFD_PLATFORMS.DXTRADE,\n            is_eu: is_eu_user,\n            shortcode: getCompanyShortcode(),\n            is_mt5_trade_modal: true,\n        });\n\n    const trade_modal_title =\n        mt5_trade_account.account_type === 'demo' ? `${getHeadingTitle()} ${localize('Demo')}` : getHeadingTitle();\n\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                <Icon icon='IcRebrandingDerivX' size={24} />\n                <div className='cfd-trade-modal__desc'>\n                    <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                        {trade_modal_title}\n                    </Text>\n                    {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                        <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                            {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                        </Text>\n                    )}\n                </div>\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Username')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.login} />\n                </div>\n\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                    <div className='cfd-trade-modal--paragraph'>\n                        <PasswordBox\n                            platform='dxtrade'\n                            onClick={() => {\n                                const account_type = getCFDAccountKey({\n                                    market_type: mt5_trade_account.market_type,\n                                    sub_account_type: mt5_trade_account.sub_account_type,\n                                    platform: CFD_PLATFORMS.DMT5,\n                                    shortcode: mt5_trade_account.landing_company_short,\n                                });\n                                onPasswordManager(\n                                    mt5_trade_account?.login,\n                                    getTitle(mt5_trade_account.market_type, is_eu_user),\n                                    mt5_trade_account.account_type,\n                                    account_type,\n                                    (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                );\n                                toggleModal();\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('Run Deriv X on your browser')}\n                    </Text>\n                    <DxtradeDesktopDownload is_demo={is_demo} dxtrade_tokens={dxtrade_tokens} />\n                </div>\n            </div>\n            <Text\n                align='center'\n                as='div'\n                className='cfd-trade-modal__download-center-text'\n                size={isMobile() ? 'xxxs' : 'xxs'}\n                weight='bold'\n            >\n                {localize('Download Deriv X on your phone to trade with the Deriv X account')}\n            </Text>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <div className='cfd-trade-modal__download-center-options--mobile-links--apple'>\n                        <a href={getPlatformDXTradeDownloadLink('ios')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationApple' width={isMobile() ? '160' : '130'} height={40} />\n                        </a>\n                    </div>\n                    <a href={getPlatformDXTradeDownloadLink('android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <div className='cfd-trade-modal__download-center-options--mobile-links--huawei'>\n                        <a href={getPlatformDXTradeDownloadLink('huawei')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                        </a>\n                    </div>\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        <QRCode\n                            value={mobileDownloadLink('dxtrade', 'android')}\n                            size={5}\n                            style={{ height: 'auto', maxWidth: '100%', width: '80%' }}\n                        />\n                        <Text align='center' size='xxs'>\n                            {localize('Scan the QR code to download {{ platform }}.', {\n                                platform: getPlatformSettings('dxtrade').name,\n                            })}\n                        </Text>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default DerivXTradeModal;\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, Modal, MobileWrapper, PageOverlay, UILoader } from '@deriv/components';\nimport { connect } from '../Stores/connect';\nimport RootStore from '../Stores/index';\nimport { localize } from '@deriv/translations';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAvailableAccount } from '../../types';\nimport { TCFDDashboardContainer } from '../Components/props.types';\nimport DMT5TradeModal from './dmt5-trade-modal';\nimport DerivXTradeModal from './derivx-trade-modal';\n\ntype TMT5TradeModalProps = {\n    mt5_trade_account: Required<\n        DetailsOfEachMT5Loginid & { market_type?: TTradingPlatformAvailableAccount['market_type'] | 'synthetic' }\n    >;\n    is_eu_user: boolean;\n    is_open: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        arg3: string,\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    platform: 'mt5' | 'dxtrade';\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    is_demo: string;\n    show_eu_related_content: boolean;\n};\n\nconst MT5TradeModal = ({\n    mt5_trade_account,\n    is_eu_user,\n    is_open,\n    onPasswordManager,\n    toggleModal,\n    dxtrade_tokens,\n    platform,\n    is_demo,\n    show_eu_related_content,\n}: TMT5TradeModalProps) => {\n    const CFDTradeModal = () => {\n        if (platform === 'mt5') {\n            return (\n                <DMT5TradeModal\n                    mt5_trade_account={mt5_trade_account}\n                    show_eu_related_content={show_eu_related_content}\n                    onPasswordManager={onPasswordManager}\n                    toggleModal={toggleModal}\n                    dxtrade_tokens={dxtrade_tokens}\n                />\n            );\n        }\n        return (\n            <DerivXTradeModal\n                mt5_trade_account={mt5_trade_account}\n                is_eu_user={is_eu_user}\n                onPasswordManager={onPasswordManager}\n                toggleModal={toggleModal}\n                dxtrade_tokens={dxtrade_tokens}\n                is_demo={is_demo}\n            />\n        );\n    };\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    is_open={is_open}\n                    title={localize('Trade')}\n                    toggleModal={toggleModal}\n                    should_header_stick_body={false}\n                    width='600px'\n                    exit_classname='cfd-modal--custom-exit'\n                >\n                    <CFDTradeModal />\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <PageOverlay\n                    is_open={is_open}\n                    portal_id='deriv_app'\n                    header='Trade'\n                    onClickClose={toggleModal}\n                    header_classname='cfd-trade-modal__mobile-title'\n                >\n                    <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                        <CFDTradeModal />\n                    </Div100vhContainer>\n                </PageOverlay>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n};\n\nexport default connect(({ modules: { cfd }, modules, common, traders_hub }: RootStore) => ({\n    dxtrade_tokens: cfd.dxtrade_tokens,\n    platform: common.platform,\n    mt5_trade_account: modules.cfd.mt5_trade_account,\n    show_eu_related_content: traders_hub.show_eu_related_content,\n}))(MT5TradeModal);\n","import { OSDetect } from '@deriv/shared';\n\nconst REAL_DXTRADE_URL = 'https://dx.deriv.com';\nconst DEMO_DXTRADE_URL = 'https://dx-demo.deriv.com';\n\nconst DXTRADE_IOS_APP_URL = 'https://apps.apple.com/us/app/deriv-x/id1563337503';\nconst DXTRADE_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.dx';\nconst DXTRADE_HUAWEI_APP_URL = 'https://appgallery.huawei.com/app/C104633219';\n\nconst getBrokerName = () => 'Deriv Limited';\n\nconst getTopUpConfig = () => {\n    return {\n        minimum_amount: 1000,\n        additional_amount: 10000,\n    };\n};\n\nconst getPlatformDXTradeDownloadLink = (platform: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'ios':\n            return DXTRADE_IOS_APP_URL;\n        case 'huawei':\n            return DXTRADE_HUAWEI_APP_URL;\n        default:\n            return DXTRADE_ANDROID_APP_URL;\n    }\n};\n\nconst getPlatformMt5DownloadLink = (platform: string | undefined = undefined) => {\n    switch (platform || OSDetect()) {\n        case 'windows':\n            return 'https://download.mql5.com/cdn/web/deriv.limited/mt5/derivmt5setup.exe';\n        case 'linux':\n            return 'https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux';\n        case 'ios':\n            return 'https://apps.apple.com/us/app/metatrader-5/id413251709';\n        case 'macos':\n            return 'https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg';\n        case 'huawei':\n            return 'https://appgallery.huawei.com/#/app/C102015329';\n        case 'android':\n            return 'https://download.mql5.com/cdn/mobile/mt5/android?server=Deriv-Demo,Deriv-Server';\n        default:\n            return getMT5WebTerminalLink({ category: 'real' }); // Web\n    }\n};\n\nconst getDXTradeWebTerminalLink = (category: string, token?: string) => {\n    let url = category === 'real' ? REAL_DXTRADE_URL : DEMO_DXTRADE_URL;\n\n    if (token) {\n        url += `?token=${token}`;\n    }\n\n    return url;\n};\n\nconst getMT5WebTerminalLink = ({\n    category,\n    loginid,\n    server_name = 'Deriv-Server',\n}: {\n    category?: string;\n    loginid?: string;\n    server_name?: string;\n}) => {\n    const is_demo = category === 'demo';\n    const server = is_demo ? 'Deriv-Demo' : server_name;\n    const login = loginid ?? '';\n\n    return `https://trade.mql5.com/trade?servers=${server}&trade_server=${server}${login && `&login=${login}`}`;\n};\n\nexport {\n    REAL_DXTRADE_URL,\n    DEMO_DXTRADE_URL,\n    getBrokerName,\n    getPlatformDXTradeDownloadLink,\n    getPlatformMt5DownloadLink,\n    getDXTradeWebTerminalLink,\n    getMT5WebTerminalLink,\n    getTopUpConfig,\n};\n","import { localize } from '@deriv/translations';\nimport { Jurisdiction } from '@deriv/shared';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean) => {\n    // TODO: Move this to the getDxCompanies for real release and when separating MT5 and DerivX components.\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: localize('Swap-Free'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? localize('CFDs') : localize('Financial'),\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","class Errors {\n    constructor() {\n        this.errors = {};\n    }\n\n    add(attribute, message) {\n        if (!this.has(attribute)) {\n            this.errors[attribute] = [];\n        }\n\n        if (this.errors[attribute].indexOf(message) === -1) {\n            this.errors[attribute].push(message);\n        }\n    }\n\n    all() {\n        return this.errors;\n    }\n\n    first(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute][0];\n        }\n        return null;\n    }\n\n    get(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute];\n        }\n\n        return [];\n    }\n\n    has(attribute) {\n        return Object.prototype.hasOwnProperty.call(this.errors, attribute);\n    }\n}\n\nexport default Errors;\n","import { template } from '_common/utility';\nimport { getPreBuildDVRs } from '@deriv/shared';\nimport Error from './errors';\n\nclass Validator {\n    constructor(input, rules, store = null) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Error();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute, rule, error_message) {\n        let message = error_message || rule.options.message || getPreBuildDVRs()[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max ? rule.options.min : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min]);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1, rule.options.name2]);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            this.rules[attribute].forEach(rule => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute],\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(this.input[attribute], ruleObject.options, this.store, this.input);\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object = {\n            name: is_rule_string ? rule : rule[0],\n            options: is_rule_string ? {} : rule[1] || {},\n        };\n\n        rule_object.validator = rule_object.name === 'custom' ? rule[1].func : getPreBuildDVRs()[rule_object.name].func;\n\n        return rule_object;\n    }\n}\n\nexport default Validator;\n","import Validator from './validator';\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\n\nimport Validator from '../Utils/Validator';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction, runInAction, makeObservable, override } from 'mobx';\nimport { getAccountListKey, getAccountTypeFields, CFD_PLATFORMS, WS, Jurisdiction } from '@deriv/shared';\nimport BaseStore from 'Stores/base-store';\nimport { getDxCompanies, getMtCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_compare_accounts_visible = false;\n    is_cfd_personal_details_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    is_mt5_trade_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n\n    account_type = {\n        category: undefined,\n        type: undefined,\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    is_cfd_verification_modal_visible = false;\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_cfd_personal_details_modal_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            current_account: observable,\n            is_cfd_verification_modal_visible: observable,\n            error_type: observable,\n            dxtrade_tokens: observable,\n            account_title: computed,\n            current_list: computed,\n            has_created_account_for_selected_jurisdiction: computed,\n            has_submitted_cfd_personal_details: computed,\n            is_high_risk_client_for_mt5: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            storeProofOfAddress: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            toggleCFDVerificationModal: action.bound,\n            setDxtradeToken: action.bound,\n            loadDxtradeTokens: action.bound,\n        });\n\n        reaction(\n            () => [this.root_store.client.dxtrade_accounts_list],\n            () => {\n                if (this.root_store.client.dxtrade_accounts_list.length > 0) {\n                    this.loadDxtradeTokens();\n                }\n            }\n        );\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content)[this.account_type.category][\n                  this.account_type.type\n              ].title\n            : '';\n    }\n\n    get has_submitted_cfd_personal_details() {\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            this.root_store.client.account_settings;\n        return !!(citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason);\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n    get has_created_account_for_selected_jurisdiction() {\n        switch (this.account_type.type) {\n            case 'synthetic':\n                return this.real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            case 'all':\n                return this.real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            default:\n                return this.real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n        }\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    getName() {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[this.account_type.category][this.account_type.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            ...(this.account_type.type === 'all' ? { sub_account_category: 'swap_free' } : {}),\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode ? { company: this.jurisdiction_selected_shortcode } : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: values.password,\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type: this.account_type.type === 'dxtrade' ? 'all' : this.account_type.type,\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    storeProofOfAddress(file_uploader_ref, values, { setStatus }) {\n        return new Promise((resolve, reject) => {\n            setStatus({ msg: '' });\n            this.setState({ is_btn_loading: true });\n\n            WS.setSettings(values).then(data => {\n                if (data.error) {\n                    setStatus({ msg: data.error.message });\n                    reject(data);\n                } else {\n                    this.root_store.fetchAccountSettings();\n                    // force request to update settings cache since settings have been updated\n                    file_uploader_ref.current.upload().then(api_response => {\n                        if (api_response.warning) {\n                            setStatus({ msg: api_response.message });\n                            reject(api_response);\n                        } else {\n                            WS.authorized.storage.getAccountStatus().then(({ error, get_account_status }) => {\n                                if (error) {\n                                    reject(error);\n                                }\n                                const { identity } = get_account_status.authentication;\n                                const has_poi = !(identity && identity.status === 'none');\n                                resolve({\n                                    identity,\n                                    has_poi,\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        const response = await this.openMT5Account(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n            const mt5_login_list_response = await WS.authorized.mt5LoginList();\n            this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            this.setCFDNewAccount(response.mt5_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        if (this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n            const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n            this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.setCFDNewAccount(response.trading_platform_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DXTRADE,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    toggleCFDVerificationModal() {\n        this.is_cfd_verification_modal_visible = !this.is_cfd_verification_modal_visible;\n    }\n\n    get is_high_risk_client_for_mt5() {\n        const { trading_platform_available_accounts } = this.root_store.client;\n        const financial_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'financial'\n        );\n\n        const synthetic_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'gaming'\n        );\n\n        return (\n            financial_available_accounts.length === 1 &&\n            financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n            synthetic_available_accounts.length === 1 &&\n            synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n        );\n    }\n}\n","import { useObserver } from 'mobx-react';\nimport React from 'react';\n\nconst isClassComponent = Component =>\n    !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent);\n\nexport const MobxContent = React.createContext(null);\n\nfunction injectStorePropsToComponent(propsToSelectFn, BaseComponent) {\n    const Component = own_props => {\n        const store = React.useContext(MobxContent);\n\n        let ObservedComponent = BaseComponent;\n\n        if (isClassComponent(BaseComponent)) {\n            const FunctionalWrapperComponent = props => <BaseComponent {...props} />;\n            ObservedComponent = FunctionalWrapperComponent;\n        }\n\n        //  This is a temporary approach to pass stores from different packages\n        const context = own_props.context || store;\n        return useObserver(() => ObservedComponent({ ...own_props, ...propsToSelectFn(context, own_props) }));\n    };\n\n    Component.displayName = BaseComponent.name;\n    return Component;\n}\n\nexport const MobxContentProvider = ({ store, children }) => {\n    return <MobxContent.Provider value={{ ...store, mobxStores: store }}>{children}</MobxContent.Provider>;\n};\n\nexport const connect = propsToSelectFn => Component => injectStorePropsToComponent(propsToSelectFn, Component);\n","const template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[+index - 1]);\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","import React from 'react';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TMissingRealAccount } from './props.types';\n\nconst MissingRealAccount = ({ onClickSignup, platform }: TMissingRealAccount) => (\n    <div className='cfd-dashboard__missing-real'>\n        <div className='cfd-dashboard__missing-real-wrapper'>\n            <Text className='cfd-dashboard__missing-real--heading' as='h1' weight='bold' line_height='l'>\n                {platform === CFD_PLATFORMS.MT5 ? (\n                    <Localize i18n_default_text='You need a real account (fiat currency or cryptocurrency) in Deriv to create a real Deriv MT5 account.' />\n                ) : (\n                    <Localize i18n_default_text='To create a Deriv X real account, create a Deriv real account first.' />\n                )}\n            </Text>\n        </div>\n        <div>\n            <Button className='cfd-dashboard__missing-real--button' onClick={onClickSignup} type='button' primary large>\n                <span className='btn__text'>\n                    <Localize i18n_default_text='Create a Deriv account' />\n                </span>\n            </Button>\n        </div>\n    </div>\n);\n\nexport default MissingRealAccount;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype LoadingProps = {\n    className?: string;\n    is_invisible?: boolean;\n    theme?: string;\n    id?: string;\n};\n\nconst Loading = ({ className, is_invisible, theme, id }: LoadingProps) => (\n    <div\n        id={id}\n        data-testid='dt_barspinner'\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport Loading from '../templates/_common/components/loading';\n\nconst LoadingCFDRealAccountDisplay = () => (\n    <div className='cfd-real-accounts-display'>\n        <Loading />\n    </div>\n);\n\nexport default LoadingCFDRealAccountDisplay;\n","import { CFD_PLATFORMS } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nexport const general_messages = {\n    getWelcomeHeader: (is_logged_in, platform) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (is_logged_in) return localize('Welcome to your Deriv X dashboard');\n            return localize('Welcome to Deriv X');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            return localize('Welcome to Deriv MT5 dashboard');\n        }\n        return localize('');\n    },\n    getDownloadHeader: platform => {\n        if (platform === CFD_PLATFORMS.DXTRADE)\n            return localize('Run Deriv X on your browser or download the mobile app');\n        else if (platform === CFD_PLATFORMS.MT5)\n            return localize('Run MT5 from your browser or download the MT5 app for your devices');\n        return '';\n    },\n    getFinancialAccountDescriptor: (platform, show_eu_related_content) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return localize('Trade forex, basket indices, commodities, and cryptocurrencies with high leverage.');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (show_eu_related_content) {\n                return localize(\n                    'Trade CFDs on forex, stocks, stock indices, synthetic indices, cryptocurrencies, and commodities with leverage.'\n                );\n            }\n            return localize('Trade CFDs on forex, stocks & stock indices, commodities, and crypto.');\n        }\n        return '';\n    },\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { QRCode } from 'react-qrcode';\nimport { Icon, Text, DesktopWrapper, MobileWrapper } from '@deriv/components';\nimport { CFD_PLATFORMS, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    getDXTradeWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformMt5DownloadLink,\n} from '../Helpers/constants';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { TCFDDashboardContainer } from './props.types';\n\ntype TDxtradeDesktopDownloadProps = {\n    active_index: TCFDDashboardContainer['active_index'];\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n};\n\ntype TMobileDownloadProps = {\n    is_dark_mode_on: TCFDDashboardContainer['is_dark_mode_on'];\n    platform: TCFDDashboardContainer['platform'];\n};\n\nconst mobileDownloadLink = (platform: string, type: 'ios' | 'android' | 'huawei') => {\n    return platform === CFD_PLATFORMS.MT5 ? getPlatformMt5DownloadLink(type) : getPlatformDXTradeDownloadLink(type);\n};\n\nconst DxtradeDesktopDownload = ({ active_index, dxtrade_tokens }: TDxtradeDesktopDownloadProps) => (\n    <React.Fragment>\n        <h1 className='cfd-dashboard__download-container-heading'>{localize('Run Deriv X on your browser')}</h1>\n        <a\n            className='cfd-dashboard__download-container-dxtrade-button'\n            href={getDXTradeWebTerminalLink(\n                active_index === 0 ? 'real' : 'demo',\n                dxtrade_tokens && dxtrade_tokens[active_index === 0 ? 'real' : 'demo']\n            )}\n            target='_blank'\n            rel='noopener noreferrer'\n        >\n            <Icon\n                className='cfd-dashboard__download-container-dxtrade-button-icon'\n                icon='IcRebrandingDxtrade'\n                size={32}\n            />\n            <div className='cfd-dashboard__download-container-dxtrade-button-text'>\n                <Text color='colored-background' size='xxs' weight='bold'>\n                    <Localize i18n_default_text='Web terminal' />\n                </Text>\n            </div>\n        </a>\n    </React.Fragment>\n);\n\nconst MT5DesktopDownload = () => (\n    <React.Fragment>\n        <div className='cfd-dashboard__download-container-links-icons'>\n            <Icon icon='IcMt5DeviceDesktop' width={118} height={85} />\n            <Icon icon='IcMt5DeviceLaptop' width={75} height={51} />\n        </div>\n        <div className='cfd-dashboard__download-container-links-download-buttons'>\n            <a href={getPlatformMt5DownloadLink('windows')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationWindows' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('macos')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationMacos' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('linux')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationLinux' width={138} height={40} />\n            </a>\n        </div>\n        <Text as='p' align='center' size='xxxs' className='cfd-dashboard__download-center--hint'>\n            <Localize i18n_default_text='The MT5 desktop app is not supported by Windows XP, Windows 2003, and Windows Vista.' />\n        </Text>\n    </React.Fragment>\n);\n\nconst MobileDownload = ({ is_dark_mode_on, platform }: TMobileDownloadProps) => (\n    <React.Fragment>\n        {platform === CFD_PLATFORMS.DXTRADE && (\n            <h1 className='cfd-dashboard__download-container-heading'>{localize('Download the Deriv X mobile app')}</h1>\n        )}\n        <div\n            className={classnames({\n                'cfd-dashboard__download-container-links-icons': isMobile() || platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            {isMobile() && platform === CFD_PLATFORMS.DXTRADE && (\n                <React.Fragment>\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDeviceTabletLight' : 'IcDxtradeDeviceTablet'}\n                        width={133}\n                        height={106}\n                    />\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDevicePhoneLight' : 'IcDxtradeDevicePhone'}\n                        width={48}\n                        height={74}\n                    />\n                </React.Fragment>\n            )}\n            {platform === CFD_PLATFORMS.MT5 && (\n                <React.Fragment>\n                    <Icon icon='IcMt5DeviceTablet' width={133} height={106} />\n                    <Icon icon='IcMt5DevicePhone' width={48} height={74} />\n                </React.Fragment>\n            )}\n        </div>\n        <div\n            className={classnames('cfd-dashboard__download-container-links-download-buttons', {\n                'cfd-dashboard__download-container-links-download-buttons--column':\n                    isMobile() && platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'ios')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationApple' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'android')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationGoogle' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'huawei')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationHuawei' width={135} height={40} />\n            </a>\n        </div>\n    </React.Fragment>\n);\n\nconst QRCodeBox = ({ platform }: { platform: string }) => (\n    <DesktopWrapper>\n        <div className='cfd-dashboard__download-container-qrcode'>\n            <QRCode value={mobileDownloadLink(platform, 'android')} size={160} />\n            <span className='cfd-dashboard__download-container-qrcode__hint'>\n                {localize('Scan the QR code to download the Deriv X Mobile App')}\n            </span>\n        </div>\n    </DesktopWrapper>\n);\n\nconst CFDDownloadContainer = ({ platform, is_dark_mode_on, active_index, dxtrade_tokens }: TCFDDashboardContainer) => (\n    <React.Fragment>\n        <MobileWrapper>\n            <Text\n                className='cfd-dashboard__download-container-mobile-hint'\n                color='general'\n                size='xxs'\n                weight='400'\n                align='center'\n            >\n                <Localize i18n_default_text='If you have the app, launch it to start trading.' />\n            </Text>\n        </MobileWrapper>\n        <div\n            className={classnames('cfd-dashboard__download-container', {\n                'cfd-dashboard__download-container--is-mt5': platform === CFD_PLATFORMS.MT5,\n            })}\n            data-testid='dt_cfd_dashboard_download_center_container'\n        >\n            {platform === CFD_PLATFORMS.MT5 && (\n                <h1 className='cfd-dashboard__download-container-heading'>\n                    {isDesktop() ? general_messages.getDownloadHeader(platform) : localize('Download the MT5 app')}\n                </h1>\n            )}\n            <div\n                className={classnames('cfd-dashboard__download-container-links', {\n                    'cfd-dashboard__download-container-links--is-mt5': platform === CFD_PLATFORMS.MT5,\n                })}\n            >\n                <DesktopWrapper>\n                    <div className='cfd-dashboard__download-container-links--desktop'>\n                        {platform === CFD_PLATFORMS.DXTRADE && (\n                            <DxtradeDesktopDownload active_index={active_index} dxtrade_tokens={dxtrade_tokens} />\n                        )}\n                        {platform === CFD_PLATFORMS.MT5 && <MT5DesktopDownload />}\n                    </div>\n                </DesktopWrapper>\n\n                <div className='cfd-dashboard__download-container-links--mobile'>\n                    <MobileDownload is_dark_mode_on={is_dark_mode_on} platform={platform} />\n                </div>\n            </div>\n\n            {platform === CFD_PLATFORMS.DXTRADE && <QRCodeBox platform={platform} />}\n        </div>\n    </React.Fragment>\n);\n\nexport default CFDDownloadContainer;\n","import React from 'react';\nimport { Dialog, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport RootStore from '../Stores/index';\nimport { connect } from '../Stores/connect';\n\ntype TSwitchToRealAccountModal = {\n    is_open: boolean;\n    onClose: () => void;\n    disableApp: () => void;\n    enableApp: () => void;\n};\n\nconst SwitchToRealAccountModal = ({ is_open, onClose, disableApp, enableApp }: TSwitchToRealAccountModal) => {\n    return (\n        <Dialog\n            className='switch-to-real-account-modal'\n            confirm_button_text={localize('Ok')}\n            onConfirm={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_closed_on_confirm\n            is_visible={is_open}\n        >\n            <Icon icon={'IcPoaLock'} size={60} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                size={isMobile() ? 'xxs' : 'xs'}\n                color='general'\n                line_height='m'\n                align='center'\n            >\n                {localize('Switch to your real account to create a Deriv MT5 account')}\n            </Text>\n        </Dialog>\n    );\n};\n\nexport default connect(({ ui }: RootStore) => ({\n    is_open: ui.is_switch_to_deriv_account_modal_visible,\n    onClose: ui.openSwitchToRealAccountModal,\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n}))(SwitchToRealAccountModal);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, Money, Button, Text, DesktopWrapper, MobileWrapper, Popover } from '@deriv/components';\nimport { isMobile, mobileOSDetect, getCFDPlatformLabel, CFD_PLATFORMS, isDesktop } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from '../Stores/connect';\nimport RootStore from '../Stores/index';\nimport { CFDAccountCopy } from './cfd-account-copy';\nimport { getDXTradeWebTerminalLink, getPlatformDXTradeDownloadLink } from '../Helpers/constants';\nimport {\n    TAccountIconValues,\n    TSpecBoxProps,\n    TPasswordBoxProps,\n    TCFDAccountCardActionProps,\n    TCFDAccountCard,\n    TTradingPlatformAccounts,\n    TTradingPlatformAvailableAccount,\n} from './props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { FormikValues } from 'formik';\n\nconst account_icons: { [key: string]: TAccountIconValues } = {\n    mt5: {\n        synthetic: 'IcMt5SyntheticPlatform',\n        financial: 'IcMt5FinancialPlatform',\n        financial_stp: 'IcMt5FinancialStpPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcMt5SwapFreePlatform',\n    },\n    // TODO: Line 30, 31 and 32 should be removed after real released.\n    dxtrade: {\n        synthetic: 'IcDxtradeSyntheticPlatform',\n        financial: 'IcDxtradeFinancialPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcDxtradeDerivxPlatform',\n    },\n};\n\nconst AddAccountButton = React.forwardRef<HTMLDivElement, { onSelectAccount: () => void; is_disabled?: boolean }>(\n    ({ onSelectAccount, is_disabled }, ref) => {\n        return (\n            <div\n                onClick={is_disabled ? () => undefined : onSelectAccount}\n                className={classNames('cfd-account-card__add-server', {\n                    'cfd-account-card__add-server--disabled': is_disabled,\n                })}\n                ref={ref}\n            >\n                <span className='cfd-account-card__add-server--icon'>+</span>\n                <Localize i18n_default_text='Add account' />\n            </div>\n        );\n    }\n);\n\nAddAccountButton.displayName = 'AddAccountButton';\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-account-card__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-account-card__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-account-card__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-account-card__password-box'>\n        <div className='cfd-account-card__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-account-card__password-tooltip'\n            >\n                <Text size='xs'>•••••••••••••••</Text>\n            </Popover>\n        </div>\n        <Popover alignment='bottom' message={localize('Change Password')}>\n            <Button\n                className='cfd-account-card__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst CFDAccountCardAction = ({\n    button_label,\n    handleClickSwitchAccount,\n    has_real_account,\n    is_accounts_switcher_on,\n    is_button_primary,\n    is_disabled,\n    is_virtual,\n    onSelectAccount,\n    type,\n    platform,\n    title,\n    real_account_creation_unlock_date,\n    setShouldShowCooldownModal,\n}: TCFDAccountCardActionProps) => {\n    if (\n        is_virtual &&\n        type.category === 'real' &&\n        typeof handleClickSwitchAccount === 'function' &&\n        (platform === CFD_PLATFORMS.MT5 ? has_real_account && type.type === 'financial_stp' : true)\n    ) {\n        return (\n            <div className='cfd-account-card__action-wrapper'>\n                <Localize\n                    i18n_default_text='<0>Switch to your real account</0><1> to create a {{platform}} {{account_title}} account.</1>'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account_title: title === 'Deriv X' ? '' : title,\n                    }}\n                    components={[\n                        <a\n                            className={classNames('cfd-account-card__action-wrapper__link link link--orange', {\n                                'cfd-account-card__action-wrapper__link--disabled': is_accounts_switcher_on,\n                            })}\n                            key={0}\n                            onClick={handleClickSwitchAccount}\n                        />,\n                        <Text key={1} line_height='s' size='xxs' />,\n                    ]}\n                />\n            </div>\n        );\n    }\n    const lbl_add_account =\n        type.category === 'real' ? (\n            <Localize i18n_default_text='Add real account' />\n        ) : (\n            <Localize i18n_default_text='Add demo account' />\n        );\n    const cta_label = button_label || lbl_add_account;\n    return (\n        <Button\n            className='cfd-account-card__account-selection'\n            onClick={() => {\n                if (real_account_creation_unlock_date) {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    onSelectAccount();\n                }\n            }}\n            type='button'\n            is_disabled={is_disabled}\n            primary={is_button_primary}\n            secondary={!is_button_primary}\n            large\n        >\n            {cta_label}\n        </Button>\n    );\n};\n\nconst CFDAccountCardComponent = ({\n    button_label,\n    commission_message,\n    descriptor,\n    dxtrade_tokens,\n    existing_accounts_data,\n    has_banner,\n    has_cfd_account_error,\n    has_real_account,\n    is_accounts_switcher_on,\n    is_button_primary,\n    is_disabled,\n    is_eu,\n    is_logged_in,\n    is_virtual,\n    isEligibleForMoreDemoMt5Svg,\n    isEligibleForMoreRealMt5,\n    onClickFund,\n    onPasswordManager,\n    onSelectAccount,\n    platform,\n    setAccountType,\n    setJurisdictionSelectedShortcode,\n    setIsAcuityModalOpen,\n    setMT5TradeAccount,\n    specs,\n    title,\n    toggleAccountsDialog,\n    toggleCFDVerificationModal,\n    toggleMT5TradeModal,\n    toggleShouldShowRealAccountsList,\n    type,\n    updateAccountStatus,\n    real_account_creation_unlock_date,\n    setShouldShowCooldownModal,\n    setAppstorePlatform,\n    show_eu_related_content,\n}: TCFDAccountCard) => {\n    const existing_data = existing_accounts_data?.length ? existing_accounts_data?.[0] : existing_accounts_data;\n\n    const should_show_extra_add_account_button =\n        is_logged_in &&\n        !show_eu_related_content &&\n        platform === CFD_PLATFORMS.MT5 &&\n        (type.category === 'demo'\n            ? isEligibleForMoreDemoMt5Svg(type.type as TTradingPlatformAvailableAccount['market_type'] | 'synthetic') &&\n              !!existing_data\n            : isEligibleForMoreRealMt5(type.type as TTradingPlatformAvailableAccount['market_type'] | 'synthetic') &&\n              !!existing_data);\n\n    const platform_icon = show_eu_related_content && platform === CFD_PLATFORMS.MT5 ? 'cfd' : type.type;\n\n    const icon: React.ReactNode | null = type.type ? (\n        <Icon icon={account_icons[type.platform][platform_icon]} size={64} />\n    ) : null;\n    const has_popular_banner: boolean = type.type === 'synthetic';\n    const has_demo_banner: boolean = type.category === 'demo';\n    const has_server_banner =\n        is_logged_in &&\n        existing_data &&\n        type.category === 'real' &&\n        type.type === 'synthetic' &&\n        (existing_data as DetailsOfEachMT5Loginid)?.server_info;\n\n    const ref = React.useRef<HTMLDivElement | null>(null);\n    const wrapper_ref = React.useRef<HTMLDivElement | null>(null);\n    const button_ref = React.useRef<HTMLDivElement | null>(null);\n\n    const handleClickSwitchAccount: () => void = () => {\n        toggleShouldShowRealAccountsList?.(true);\n        toggleAccountsDialog?.(true);\n    };\n\n    const getDxtradeDownloadLink: () => string = () => {\n        const os = mobileOSDetect();\n        if (os === 'iOS') {\n            return getPlatformDXTradeDownloadLink('ios');\n        }\n        return getPlatformDXTradeDownloadLink('android');\n    };\n\n    const checkMultipleSvgAcc = () => {\n        const all_svg_acc: DetailsOfEachMT5Loginid[] = [];\n        existing_accounts_data?.map(acc => {\n            if (acc.landing_company_short === 'svg') {\n                if (all_svg_acc.length) {\n                    all_svg_acc.forEach(svg_acc => {\n                        if (svg_acc.server !== acc.server) all_svg_acc.push(acc);\n                        return all_svg_acc;\n                    });\n                } else {\n                    all_svg_acc.push(acc);\n                }\n            }\n        });\n        return all_svg_acc;\n    };\n\n    const getServerName: (value: DetailsOfEachMT5Loginid) => string = React.useCallback(server => {\n        if (server) {\n            const server_region = (server as DetailsOfEachMT5Loginid).server_info?.geolocation?.region;\n            if (server_region) {\n                return `${server_region} ${\n                    (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence === 1\n                        ? ''\n                        : (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence\n                }`;\n            }\n        }\n        return '';\n    }, []);\n\n    const getBannerStatus = (account: DetailsOfEachMT5Loginid) => {\n        const { landing_company_short, status } = account;\n        if (landing_company_short && status && ['proof_failed', 'verification_pending'].includes(status)) {\n            const should_show_pending_button = status === 'verification_pending';\n            return (\n                <Button\n                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                    type='button'\n                    onClick={() => {\n                        setAccountType({\n                            category: type.category,\n                            type: type.type,\n                        });\n                        setJurisdictionSelectedShortcode(landing_company_short);\n                        updateAccountStatus();\n                        toggleCFDVerificationModal();\n                    }}\n                    primary\n                    large\n                    disabled={should_show_pending_button}\n                >\n                    {should_show_pending_button ? (\n                        <Localize i18n_default_text='Pending verification' />\n                    ) : (\n                        <Localize i18n_default_text='Resubmit document' />\n                    )}\n                </Button>\n            );\n        }\n        return null;\n    };\n\n    const is_web_terminal_unsupported = isMobile() && platform === CFD_PLATFORMS.DXTRADE;\n    const tbody_content = platform === CFD_PLATFORMS.DXTRADE && (\n        <React.Fragment>\n            <tr className='cfd-account-card__login-specs-table-row'>\n                <td className='cfd-account-card__login-specs-table-attribute'>\n                    <div className='cfd-account-card--paragraph'>{localize('Username')}</div>\n                </td>\n                <td className='cfd-account-card__login-specs-table-data'>\n                    <div className='cfd-account-card--paragraph'>\n                        <SpecBox value={existing_data?.login} is_bold />\n                    </div>\n                </td>\n            </tr>\n        </React.Fragment>\n    );\n\n    return (\n        <div ref={wrapper_ref} className='cfd-account-card__wrapper'>\n            <div\n                className={classNames('cfd-account-card', { 'cfd-account-card__logged-out': !is_logged_in })}\n                ref={ref}\n            >\n                {has_popular_banner && (\n                    <div className='cfd-account-card__banner'>\n                        <Localize i18n_default_text='Most popular' />\n                    </div>\n                )}\n                {has_demo_banner && (\n                    <div className='cfd-account-card__banner cfd-account-card__banner--demo'>\n                        <Localize i18n_default_text='DEMO' />\n                    </div>\n                )}\n                <div\n                    className={classNames('cfd-account-card__type', {\n                        'cfd-account-card__type--has-banner': has_banner || has_popular_banner || has_server_banner,\n                    })}\n                    id={`${platform === CFD_PLATFORMS.DXTRADE ? CFD_PLATFORMS.DXTRADE : CFD_PLATFORMS.MT5}_${\n                        type.category\n                    }_${type.type}`}\n                >\n                    {icon}\n                    <div className='cfd-account-card__type--description'>\n                        <Text size='xxl' className='cfd-account-card--heading'>\n                            {title}\n                        </Text>\n                        {platform === CFD_PLATFORMS.DXTRADE ? (\n                            (!existing_data || !is_logged_in) && (\n                                <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                            )\n                        ) : (\n                            <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                        )}\n                        {existing_data?.display_balance && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                            <Text size='xxl' className='cfd-account-card__balance--value'>\n                                <Money\n                                    amount={existing_data.display_balance}\n                                    currency={existing_data.currency}\n                                    has_sign={existing_data.balance ? existing_data.balance < 0 : false}\n                                    show_currency\n                                />\n                            </Text>\n                        )}\n                        {(existing_data as TTradingPlatformAccounts)?.display_login &&\n                            is_logged_in &&\n                            platform === CFD_PLATFORMS.DXTRADE && (\n                                <Text color='less-prominent' size='xxxs' line_height='s'>\n                                    {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                </Text>\n                            )}\n                    </div>\n                </div>\n                {platform === CFD_PLATFORMS.MT5 && isDesktop() && is_logged_in && (\n                    <div className='cfd-account-card__acuity-container'>\n                        {type.type === 'financial' && (\n                            <Button\n                                onClick={() => setIsAcuityModalOpen(true)}\n                                className='cfd-account-card__acuity-banner'\n                                type='button'\n                                transparent\n                            >\n                                <div className='cfd-account-card__acuity-banner--wrapper'>\n                                    <Icon icon='icMt5Acuity' />\n                                    <Text as='p' size='xxs' weight='bold' color='prominent'>\n                                        <Localize i18n_default_text='Get Acuity trading tools' />\n                                    </Text>\n                                    <Icon icon='IcAddOutline' color='secondary' />\n                                </div>\n                            </Button>\n                        )}\n                    </div>\n                )}\n                {existing_data && <div className='cfd-account-card__divider' />}\n\n                <div className='cfd-account-card__cta' style={!existing_data?.login ? { marginTop: 'auto' } : {}}>\n                    <div className='cfd-account-card__cta-wrapper'>\n                        {platform === CFD_PLATFORMS.DXTRADE && (!existing_data?.login || !is_logged_in) && (\n                            <div className='cfd-account-card__specs'>\n                                <table className='cfd-account-card__specs-table'>\n                                    <tbody>\n                                        {typeof specs !== 'undefined' &&\n                                            Object.keys(specs).map((spec_attribute, idx) => (\n                                                <tr key={idx} className='cfd-account-card__specs-table-row'>\n                                                    <td className='cfd-account-card__specs-table-attribute'>\n                                                        <p className='cfd-account-card--paragraph'>\n                                                            {specs[spec_attribute].key()}\n                                                        </p>\n                                                    </td>\n                                                    <td className='cfd-account-card__specs-table-data'>\n                                                        <p className='cfd-account-card--paragraph'>\n                                                            {specs[spec_attribute].value()}\n                                                        </p>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        )}\n                        {existing_data?.login &&\n                            is_logged_in &&\n                            platform === CFD_PLATFORMS.MT5 &&\n                            type.category === 'demo' &&\n                            existing_accounts_data?.length &&\n                            existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                <div className='cfd-account-card__item' key={index}>\n                                    {acc?.display_balance && is_logged_in && acc.landing_company_short === 'labuan' && (\n                                        <div className='cfd-account-card__item--banner'>\n                                            <Localize i18n_default_text={'Labuan'} />\n                                        </div>\n                                    )}\n                                    {(acc as TTradingPlatformAccounts)?.display_login && (\n                                        <div\n                                            className={`cfd-account-card--login-id${\n                                                acc.landing_company_short === 'labuan' ? '' : '-demo'\n                                            }`}\n                                        >\n                                            <Text size='xxxs' weight='bold'>\n                                                {(acc as TTradingPlatformAccounts)?.display_login}\n                                            </Text>\n                                        </div>\n                                    )}\n                                    {acc?.display_balance && is_logged_in && (\n                                        <div className='cfd-account-card__balance'>\n                                            <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                <Money\n                                                    amount={acc.display_balance}\n                                                    currency={acc.currency}\n                                                    has_sign={!!acc.balance && acc.balance < 0}\n                                                    show_currency\n                                                />\n                                            </Text>\n                                        </div>\n                                    )}\n                                    <div className='cfd-account-card__manage--mt5'>\n                                        {acc && is_logged_in && (\n                                            <Button onClick={() => onClickFund(acc)} type='button' secondary>\n                                                <Localize i18n_default_text='Top up' />\n                                            </Button>\n                                        )}\n                                        {acc && is_logged_in && !is_web_terminal_unsupported && (\n                                            <Button\n                                                className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                type='button'\n                                                onClick={() => {\n                                                    setAppstorePlatform(platform);\n                                                    toggleMT5TradeModal();\n                                                    setMT5TradeAccount(acc);\n                                                }}\n                                                primary\n                                                large\n                                            >\n                                                <Localize i18n_default_text='Trade' />\n                                            </Button>\n                                        )}\n                                    </div>\n                                </div>\n                            ))}\n                        {existing_data?.login &&\n                            is_logged_in &&\n                            platform === CFD_PLATFORMS.MT5 &&\n                            !existing_accounts_data?.length &&\n                            type.category === 'demo' && (\n                                <div className='cfd-account-card__item'>\n                                    {(existing_data as TTradingPlatformAccounts)?.display_login && (\n                                        <div className='cfd-account-card--login-id-demo'>\n                                            <Text size='xxxs' weight='bold'>\n                                                {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                            </Text>\n                                        </div>\n                                    )}\n                                    {existing_data?.display_balance && is_logged_in && (\n                                        <div className='cfd-account-card__balance'>\n                                            <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                <Money\n                                                    amount={existing_data.display_balance}\n                                                    currency={existing_data.currency}\n                                                    has_sign={!!existing_data.balance && existing_data.balance < 0}\n                                                    show_currency\n                                                />\n                                            </Text>\n                                        </div>\n                                    )}\n                                    <div className='cfd-account-card__manage--mt5'>\n                                        {existing_data && is_logged_in && (\n                                            <Button onClick={() => onClickFund(existing_data)} type='button' secondary>\n                                                <Localize i18n_default_text='Top up' />\n                                            </Button>\n                                        )}\n                                        {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                            <Button\n                                                className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                type='button'\n                                                onClick={() => {\n                                                    setAppstorePlatform(platform);\n                                                    toggleMT5TradeModal();\n                                                    setMT5TradeAccount(existing_data);\n                                                }}\n                                                primary\n                                                large\n                                            >\n                                                <Localize i18n_default_text='Trade' />\n                                            </Button>\n                                        )}\n                                    </div>\n                                </div>\n                            )}\n                        {existing_data?.login &&\n                            is_logged_in &&\n                            platform === CFD_PLATFORMS.MT5 &&\n                            type.category === 'real' &&\n                            existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                <div className='cfd-account-card__item' key={index}>\n                                    {existing_data?.display_balance && is_logged_in && !show_eu_related_content && (\n                                        <div className='cfd-account-card__item--banner'>\n                                            <Localize\n                                                i18n_default_text={\n                                                    acc.landing_company_short &&\n                                                    !['svg', 'bvi'].includes(acc?.landing_company_short)\n                                                        ? acc.landing_company_short?.charAt(0).toUpperCase() +\n                                                          acc.landing_company_short.slice(1)\n                                                        : acc.landing_company_short?.toUpperCase()\n                                                }\n                                            />\n                                        </div>\n                                    )}\n                                    {(acc as TTradingPlatformAccounts)?.display_login && (\n                                        <div className='cfd-account-card--login-id'>\n                                            <Text size='xxxs' weight='bold'>\n                                                {(acc as TTradingPlatformAccounts)?.display_login}\n                                            </Text>\n                                        </div>\n                                    )}\n                                    {existing_data?.display_balance && is_logged_in && (\n                                        <div className='cfd-account-card__balance'>\n                                            <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                <Money\n                                                    amount={acc.display_balance}\n                                                    currency={acc.currency}\n                                                    has_sign={!!acc.balance && acc.balance < 0}\n                                                    show_currency\n                                                />\n                                            </Text>\n                                            {checkMultipleSvgAcc()?.length > 1 &&\n                                                acc.landing_company_short === 'svg' && (\n                                                    <Text\n                                                        className='cfd-account-card__balance--region'\n                                                        color='colored-background'\n                                                        size='xxxs'\n                                                        weight='bold'\n                                                    >\n                                                        {getServerName(acc)}\n                                                    </Text>\n                                                )}\n                                        </div>\n                                    )}\n                                    <div className='cfd-account-card__manage--mt5'>\n                                        {getBannerStatus(acc) ?? (\n                                            <React.Fragment>\n                                                {existing_data && is_logged_in && (\n                                                    <Button\n                                                        onClick={() => {\n                                                            const selected_account_data = existing_accounts_data?.find(\n                                                                data =>\n                                                                    data.landing_company_short ===\n                                                                        acc.landing_company_short &&\n                                                                    data.login === acc.login\n                                                            );\n\n                                                            onClickFund(\n                                                                selected_account_data as DetailsOfEachMT5Loginid\n                                                            );\n                                                        }}\n                                                        type='button'\n                                                        secondary\n                                                    >\n                                                        <Localize i18n_default_text='Top up' />\n                                                    </Button>\n                                                )}\n                                                {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                    <Button\n                                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                        type='button'\n                                                        onClick={() => {\n                                                            const selected_account_data = existing_accounts_data?.find(\n                                                                data =>\n                                                                    data.landing_company_short ===\n                                                                        acc.landing_company_short &&\n                                                                    data.login === acc.login\n                                                            );\n                                                            setAppstorePlatform(platform);\n                                                            toggleMT5TradeModal();\n                                                            setMT5TradeAccount(selected_account_data);\n                                                        }}\n                                                        primary\n                                                        large\n                                                    >\n                                                        <Localize i18n_default_text='Trade' />\n                                                    </Button>\n                                                )}\n                                            </React.Fragment>\n                                        )}\n                                    </div>\n                                </div>\n                            ))}\n                        {existing_data?.login && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                            <React.Fragment>\n                                <div className='cfd-account-card__login-specs'>\n                                    <table className='cfd-account-card__login-specs-table'>\n                                        <tbody>\n                                            {tbody_content}\n                                            <tr className='cfd-account-card__login-specs-table-row cfd-account-card__login-specs-table-row--account-id'>\n                                                <td className='cfd-account-card__login-specs-table-attribute'>\n                                                    <div className='cfd-account-card--paragraph'>\n                                                        {localize('Password')}\n                                                    </div>\n                                                </td>\n                                                <td className='cfd-account-card__login-specs-table-data'>\n                                                    <div className='cfd-account-card--paragraph'>\n                                                        <PasswordBox\n                                                            platform={platform}\n                                                            onClick={() => {\n                                                                onPasswordManager(\n                                                                    existing_data?.login,\n                                                                    title,\n                                                                    type.category,\n                                                                    type.type,\n                                                                    (existing_data as DetailsOfEachMT5Loginid)?.server\n                                                                );\n                                                            }}\n                                                        />\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </React.Fragment>\n                        )}\n                        {((!existing_data && commission_message) || !is_logged_in) &&\n                            platform === CFD_PLATFORMS.DXTRADE && (\n                                <div className='cfd-account-card__commission'>\n                                    <Text as='p' color='general' size='xs' styles={{ margin: '1.6rem auto' }}>\n                                        {commission_message}\n                                    </Text>\n                                </div>\n                            )}\n                        {existing_data && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                            <div className='cfd-account-card__manage'>\n                                <Button onClick={() => onClickFund(existing_data)} type='button' secondary>\n                                    {type.category === 'real' && <Localize i18n_default_text='Fund transfer' />}\n                                    {type.category === 'demo' && <Localize i18n_default_text='Top up' />}\n                                </Button>\n                            </div>\n                        )}\n                        {existing_data &&\n                            is_logged_in &&\n                            !is_web_terminal_unsupported &&\n                            platform === CFD_PLATFORMS.DXTRADE && (\n                                <a\n                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                    type='button'\n                                    href={getDXTradeWebTerminalLink(\n                                        type.category,\n                                        dxtrade_tokens[type.category as 'demo' | 'real']\n                                    )}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Localize i18n_default_text='Trade on web terminal' />\n                                </a>\n                            )}\n                        {existing_data && is_logged_in && is_web_terminal_unsupported && (\n                            <a\n                                className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                type='button'\n                                href={getDxtradeDownloadLink()}\n                                target='_blank'\n                                rel='noopener noreferrer'\n                            >\n                                <Localize i18n_default_text='Download the app' />\n                            </a>\n                        )}\n                        {!existing_data && is_logged_in && (\n                            <CFDAccountCardAction\n                                button_label={button_label}\n                                handleClickSwitchAccount={handleClickSwitchAccount}\n                                has_real_account={has_real_account}\n                                is_accounts_switcher_on={is_accounts_switcher_on}\n                                is_button_primary={is_button_primary}\n                                is_disabled={is_disabled}\n                                is_virtual={is_virtual}\n                                onSelectAccount={onSelectAccount}\n                                type={type}\n                                platform={platform}\n                                title={title}\n                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                            />\n                        )}\n                    </div>\n                </div>\n                <React.Fragment>\n                    {should_show_extra_add_account_button && (\n                        <MobileWrapper>\n                            <AddAccountButton\n                                ref={button_ref}\n                                onSelectAccount={onSelectAccount}\n                                is_disabled={has_cfd_account_error}\n                            />\n                        </MobileWrapper>\n                    )}\n                </React.Fragment>\n            </div>\n            <DesktopWrapper>\n                <CSSTransition\n                    in={should_show_extra_add_account_button}\n                    timeout={0}\n                    classNames='cfd-account-card__add-server'\n                    unmountOnExit\n                >\n                    <AddAccountButton\n                        ref={button_ref}\n                        onSelectAccount={onSelectAccount}\n                        is_disabled={has_cfd_account_error}\n                    />\n                </CSSTransition>\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nconst CFDAccountCard = connect(({ modules: { cfd }, client, ui, common, traders_hub }: RootStore) => ({\n    dxtrade_tokens: cfd.dxtrade_tokens,\n    isEligibleForMoreDemoMt5Svg: client.isEligibleForMoreDemoMt5Svg,\n    isEligibleForMoreRealMt5: client.isEligibleForMoreRealMt5,\n    setAccountType: cfd.setAccountType,\n    setJurisdictionSelectedShortcode: cfd.setJurisdictionSelectedShortcode,\n    setIsAcuityModalOpen: ui.setIsAcuityModalOpen,\n    setMT5TradeAccount: cfd.setMT5TradeAccount,\n    setAppstorePlatform: common.setAppstorePlatform,\n    toggleCFDVerificationModal: cfd.toggleCFDVerificationModal,\n    updateAccountStatus: client.updateAccountStatus,\n    show_eu_related_content: traders_hub.show_eu_related_content,\n}))(CFDAccountCardComponent);\n\nexport { CFDAccountCard };\n","import { localize } from '@deriv/translations';\n\ntype TMT5 = {\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n};\n\ntype TDXTrade = {\n    demo_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n};\n\nexport type TSpecifications = {\n    mt5: TMT5;\n    dxtrade: TDXTrade;\n};\n\nconst mt5 = {\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('150+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('40+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('50+') },\n    },\n    real_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('100+') },\n    },\n    demo_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n};\n\n// TODO: Edit this after real accounts release\nconst dxtrade = {\n    demo_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n};\n\nconst specifications = {\n    mt5,\n    dxtrade,\n};\n\nexport default specifications;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport specifications from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<\n        string,\n        DetailsOfEachMT5Loginid & {\n            enabled: number;\n        }\n    >;\n    openPasswordManager: (login?: string, title?: string, group?: string, type?: string, server?: string) => void;\n    landing_companies?: LandingCompany;\n};\n\nconst CFDDxtradeDemoAccountDisplay = ({\n    has_cfd_account_error,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n}: TCFDDemoAccountDisplayProps) => {\n    const existing_accounts_data = (acc_type: 'dxtrade') => {\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(`${platform}.demo.${acc_type}`) && current_list[key].enabled === 1\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.${acc_type}`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const current_list_index = Object.keys(current_list).find(key => key.startsWith(`${platform}.demo.dxtrade`)) || '';\n\n    return (\n        <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <CFDAccountCard\n                    key='cfd'\n                    title={localize('Deriv X')}\n                    type={{\n                        category: 'demo',\n                        platform: 'dxtrade',\n                        type: 'all',\n                    }}\n                    is_disabled={has_cfd_account_error || standpoint.malta}\n                    is_logged_in={is_logged_in}\n                    existing_accounts_data={existing_accounts_data('dxtrade')}\n                    commission_message={localize('No commission')}\n                    onSelectAccount={() =>\n                        onSelectAccount({\n                            category: 'demo',\n                            platform: 'dxtrade',\n                            type: 'all',\n                        })\n                    }\n                    onPasswordManager={openPasswordManager}\n                    onClickFund={() =>\n                        openAccountTransfer(current_list[current_list_index], {\n                            category: 'demo',\n                            type: 'all',\n                        })\n                    }\n                    platform={platform}\n                    descriptor={localize(\n                        'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n                    )}\n                    specs={specifications.dxtrade.demo_all_specs}\n                    has_banner\n                />\n            )}\n        </div>\n    );\n};\n\nexport default CFDDxtradeDemoAccountDisplay;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_maltainvest_account: boolean;\n    has_cfd_account_error: boolean;\n    openAccountNeededModal: (target: string, target_label: string, target_dmt5_label: string) => void;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isFinancialCardVisible: () => boolean;\n    isSwapFreeCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    current_list: Record<string, DetailsOfEachMT5Loginid>;\n    openPasswordManager: (login?: string, title?: string, group?: string, type?: string, server?: string) => void;\n    residence: string;\n    landing_companies?: LandingCompany;\n    toggleMT5TradeModal: () => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDMT5DemoAccountDisplay = ({\n    is_eu,\n    is_eu_country,\n    has_maltainvest_account,\n    has_cfd_account_error,\n    openAccountNeededModal,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isSwapFreeCardVisible,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n    residence,\n    toggleMT5TradeModal,\n    show_eu_related_content,\n}: TCFDDemoAccountDisplayProps) => {\n    const is_eu_user = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n\n    const openAccountTransferList = (type: DetailsOfEachMT5Loginid['market_type']) => {\n        return Object.keys(current_list).find((key: string) => key.startsWith(`${platform}.demo.${type}`)) || '';\n    };\n\n    const openCFDAccount = () => {\n        if (is_eu && !has_maltainvest_account && standpoint.iom) {\n            openAccountNeededModal('maltainvest', localize('Deriv Multipliers'), localize('demo CFDs'));\n        } else {\n            onSelectAccount({\n                category: 'demo',\n                type: 'financial',\n                platform,\n            });\n        }\n    };\n\n    const financial_accounts_data = () => {\n        const acc = Object.keys(current_list).some(key => key.startsWith(`${platform}.demo.financial`))\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.financial`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        if (residence === 'au') {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [is_logged_in, is_eu, is_eu_country, residence, platform]);\n\n    return (\n        <React.Fragment>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n                    {isSyntheticCardVisible('demo') && (\n                        <CFDAccountCard\n                            title={localize('Derived')}\n                            type={{\n                                category: 'demo',\n                                type: 'synthetic',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('synthetic')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('synthetic')], {\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize('Trade CFDs on our synthetics, baskets, and derived FX.')}\n                            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n                            has_banner\n                            toggleMT5TradeModal={toggleMT5TradeModal}\n                        />\n                    )}\n\n                    {isFinancialCardVisible() && (\n                        <CFDAccountCard\n                            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                            is_disabled={has_cfd_account_error}\n                            is_logged_in={is_logged_in}\n                            is_eu={is_eu_user}\n                            type={{\n                                category: 'demo',\n                                type: 'financial',\n                                platform,\n                            }}\n                            existing_accounts_data={financial_accounts_data()}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={openCFDAccount}\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('financial')], {\n                                    category: 'demo',\n                                    type: 'financial',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={general_messages.getFinancialAccountDescriptor(\n                                platform,\n                                show_eu_related_content\n                            )}\n                            specs={financial_specs}\n                            has_banner\n                            toggleMT5TradeModal={toggleMT5TradeModal}\n                        />\n                    )}\n\n                    {isSwapFreeCardVisible() && (\n                        <CFDAccountCard\n                            title={localize('Swap-Free')}\n                            type={{\n                                category: 'demo',\n                                type: 'all',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('all')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'all',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('all')], {\n                                    category: 'demo',\n                                    type: 'all',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize(\n                                'Trade swap-free CFDs on MT5 with synthetics, forex, stocks, stock indices, cryptocurrencies and ETFs.'\n                            )}\n                            specs={specifications[platform as keyof TSpecifications].real_all_specs}\n                            has_banner\n                            toggleMT5TradeModal={toggleMT5TradeModal}\n                        />\n                    )}\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CFDMT5DemoAccountDisplay;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { localize } from '@deriv/translations';\nimport { DesktopWrapper, MobileWrapper, Carousel } from '@deriv/components';\nimport { getAccountTypeFields, getAccountListKey, getCFDAccountKey } from '@deriv/shared';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCurrentList = DetailsOfEachMT5Loginid & {\n    enabled: number;\n};\n\ntype TCFDRealAccountDisplayProps = {\n    has_real_account: boolean;\n    is_accounts_switcher_on: boolean;\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading?: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isDxtradeAllCardVisible: (account_category: string) => boolean;\n    is_virtual: boolean;\n    isFinancialCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    realSyntheticAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    realFinancialAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    isAccountOfTypeDisabled: (\n        account: Array<DetailsOfEachMT5Loginid> & { [key: string]: DetailsOfEachMT5Loginid }\n    ) => boolean;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<string, TCurrentList>;\n    openPasswordManager: (login?: string, title?: string, group?: string, type?: string, server?: string) => void;\n    toggleAccountsDialog: (is_accounts_switcher_on?: boolean) => void;\n    toggleMT5TradeModal: (is_accounts_switcher_on?: boolean) => void;\n    toggleShouldShowRealAccountsList: (is_should_show_real_acc_list?: boolean) => void;\n    residence: string;\n    account_status?: object;\n    openDerivRealAccountNeededModal: () => void;\n    should_enable_add_button?: boolean;\n    setIsAcuityModalOpen: (value: boolean) => void;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDRealAccountDisplay = ({\n    has_real_account,\n    is_accounts_switcher_on,\n    is_eu,\n    is_eu_country,\n    has_cfd_account_error,\n    is_virtual,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isDxtradeAllCardVisible,\n    onSelectAccount,\n    realSyntheticAccountsExistingData,\n    realFinancialAccountsExistingData,\n    openAccountTransfer,\n    isAccountOfTypeDisabled,\n    current_list,\n    openPasswordManager,\n    platform,\n    standpoint,\n    is_logged_in,\n    toggleAccountsDialog,\n    toggleMT5TradeModal,\n    toggleShouldShowRealAccountsList,\n    residence,\n    openDerivRealAccountNeededModal,\n    should_enable_add_button,\n    setIsAcuityModalOpen,\n    real_account_creation_unlock_date,\n    setShouldShowCooldownModal,\n    show_eu_related_content,\n}: TCFDRealAccountDisplayProps) => {\n    const is_eu_user = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        const is_australian = residence === 'au';\n        if (is_australian) {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [residence, is_logged_in, is_eu, is_eu_country, platform]);\n\n    const onSelectRealAccount = (type: string) => {\n        if (should_enable_add_button) {\n            openDerivRealAccountNeededModal();\n        } else {\n            onSelectAccount({ type, category: 'real', platform });\n        }\n    };\n\n    const onClickFundReal = (account: DetailsOfEachMT5Loginid) => {\n        if (platform === 'dxtrade') {\n            return openAccountTransfer(current_list[getAccountListKey(account, platform)], {\n                category: account.account_type as keyof TOpenAccountTransferMeta,\n                type: getCFDAccountKey({\n                    market_type: account.market_type,\n                    sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                    platform,\n                }),\n            });\n        }\n        return openAccountTransfer(account, {\n            category: account.account_type as keyof TOpenAccountTransferMeta,\n            type: getCFDAccountKey({\n                market_type: account.market_type,\n                sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                platform: 'mt5',\n            }),\n        });\n    };\n\n    const isMT5AccountCardDisabled = (sub_account_type: string) => {\n        if (has_cfd_account_error) return true;\n\n        if (sub_account_type === 'synthetic' && standpoint.malta) return true;\n\n        if (is_eu) {\n            const account = getAccountTypeFields({ category: 'real', type: sub_account_type });\n            return isAccountOfTypeDisabled(account?.account_type);\n        }\n\n        switch (sub_account_type) {\n            case 'synthetic':\n            case 'financial':\n                return should_enable_add_button ? false : !has_real_account;\n            default:\n                return false;\n        }\n    };\n\n    const existing_accounts_data = (acc_type: 'synthetic' | 'financial' | 'all') => {\n        // We need to check enabled property for DXTRADE accounts only.\n        const account_key =\n            acc_type === 'all' ? `${platform}.real.${platform}@${acc_type}` : `${platform}.real.${acc_type}`;\n        // TODO: This condition should be removed after separating the DXTRADE and MT5 component.\n        const should_be_enabled = (list_item: TCurrentList) =>\n            platform === 'dxtrade' ? list_item.enabled === 1 : true;\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(account_key) && should_be_enabled(current_list[key])\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(account_key))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    realSyntheticAccountsExistingData(existing_accounts_data('synthetic'));\n    realFinancialAccountsExistingData(existing_accounts_data('financial'));\n\n    const synthetic_account_items = isSyntheticCardVisible('real') && (\n        <CFDAccountCard\n            key='real.synthetic'\n            has_cfd_account_error={has_cfd_account_error}\n            title={platform === 'mt5' ? localize('Derived') : localize('Synthetic')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={isMT5AccountCardDisabled('synthetic')}\n            is_logged_in={is_logged_in}\n            type={{\n                category: 'real',\n                type: 'synthetic',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('synthetic')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('synthetic')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={\n                platform === 'mt5'\n                    ? localize('Trade CFDs on our synthetics, baskets, and derived FX.')\n                    : localize('Trade CFDs on our synthetic indices that simulate real-world market movements.')\n            }\n            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n            toggleMT5TradeModal={toggleMT5TradeModal}\n        />\n    );\n\n    const financial_account = isFinancialCardVisible() && (\n        <CFDAccountCard\n            key='real.financial'\n            has_real_account={has_real_account}\n            is_disabled={isMT5AccountCardDisabled('financial')}\n            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n            type={{\n                category: 'real',\n                type: 'financial',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('financial')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('financial')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={general_messages.getFinancialAccountDescriptor(platform, show_eu_related_content)}\n            specs={financial_specs}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_eu={is_eu_user}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n            toggleMT5TradeModal={toggleMT5TradeModal}\n            setIsAcuityModalOpen={setIsAcuityModalOpen}\n            real_account_creation_unlock_date={real_account_creation_unlock_date}\n            setShouldShowCooldownModal={setShouldShowCooldownModal}\n        />\n    );\n\n    const derivx_all_account = platform === 'dxtrade' && isDxtradeAllCardVisible('real') && (\n        <CFDAccountCard\n            commission_message={localize('No commission')}\n            descriptor={localize(\n                'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n            )}\n            existing_accounts_data={existing_accounts_data('all')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={has_cfd_account_error || standpoint.malta}\n            is_eu={is_eu_user}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            key='cfd'\n            onClickFund={onClickFundReal}\n            onPasswordManager={openPasswordManager}\n            onSelectAccount={() => onSelectRealAccount('all')}\n            platform={platform}\n            specs={specifications.dxtrade.real_all_specs}\n            title={localize('Deriv X')}\n            toggleAccountsDialog={toggleAccountsDialog}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            type={{\n                category: 'real',\n                type: 'all',\n                platform,\n            }}\n        />\n    );\n\n    const items = [synthetic_account_items, financial_account, derivx_all_account].filter(Boolean);\n\n    return (\n        <div data-testid='dt_cfd_real_accounts_display' className={classNames('cfd-real-accounts-display')}>\n            <DesktopWrapper>\n                <Carousel\n                    list={items}\n                    width={328}\n                    nav_position='middle'\n                    show_bullet={false}\n                    item_per_window={2}\n                    is_mt5={true}\n                />\n            </DesktopWrapper>\n            <MobileWrapper>{items}</MobileWrapper>\n        </div>\n    );\n};\n\nexport { CFDRealAccountDisplay };\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { Icon, Tabs, PageError, Loading, Text } from '@deriv/components';\nimport {\n    isEmptyObject,\n    isMobile,\n    routes,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    CFD_PLATFORMS,\n    isLandingCompanyEnabled,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { ResetTradingPasswordModal } from '@deriv/account';\nimport { connect } from '../Stores/connect';\nimport MissingRealAccount from './missing-real-account';\nimport LoadingCFDRealAccountDisplay from './loading-cfd-real-account-display';\nimport CompareAccountsModal from './compare-accounts-modal';\nimport JurisdictionModal from './jurisdiction-modal/jurisdiction-modal';\nimport MT5TradeModal from './mt5-trade-modal';\nimport CFDDbviOnboarding from './cfd-dbvi-onboarding';\nimport CFDDownloadContainer from '../Components/cfd-download-container';\nimport CFDPasswordManagerModal from './cfd-password-manager-modal';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\nimport CFDTopUpDemoModal from './cfd-top-up-demo-modal';\nimport CFDResetPasswordModal from './cfd-reset-password-modal';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport SwitchToRealAccountModal from './switch-to-real-account';\nimport 'Sass/cfd-dashboard.scss';\nimport RootStore from '../Stores/index';\nimport { LandingCompany, ResidenceList, DetailsOfEachMT5Loginid } from '@deriv/api-types';\n// TODO: Change these imports after real released\nimport CFDDxtradeDemoAccountDisplay from '../Components/cfd-dxtrade-demo-account-display';\nimport CFDMT5DemoAccountDisplay from '../Components/cfd-mt5-demo-account-display';\nimport { CFDRealAccountDisplay } from '../Components/cfd-real-account-display';\nimport { TTradingPlatformAccounts } from 'Components/props.types';\n\ndeclare module 'react' {\n    interface HTMLAttributes<T> extends React.AriaAttributes, React.DOMAttributes<T> {\n        label?: string;\n        hash?: string;\n    }\n}\n\ntype TLoadTab = {\n    children: React.ReactNode;\n    is_loading: boolean;\n    loading_component: () => JSX.Element;\n    active_index: number;\n    top: boolean;\n    center: boolean;\n    is_logged_in: boolean;\n    onTabItemClick: (index: number) => void;\n    should_update_hash: boolean;\n    landing_companies?: LandingCompany;\n};\n\nconst LoadTab = ({ children, is_loading, loading_component, ...props }: TLoadTab) => {\n    const LoadingComponent = loading_component;\n    if (is_loading) {\n        return <LoadingComponent />;\n    }\n\n    return <Tabs {...props}>{children}</Tabs>;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\ntype TMt5StatusServerType = {\n    all: number;\n    platform: number;\n    server_number: number;\n    deposits?: number;\n    withdrawals?: number;\n};\n\ntype TDXTraderStatusServerType = Record<'all' | 'demo' | 'real', number>;\n\ntype TMt5StatusServer = Record<'demo' | 'real', TMt5StatusServerType[]>;\n\nexport type TObjectCFDAccount = { category: string; type: string; set_password?: number; platform?: string };\n\nexport type TCFDDashboardProps = RouteComponentProps & {\n    account_status: object;\n    beginRealSignupForMt5: () => void;\n    country: string;\n    context: Record<string, any>;\n    createCFDAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<\n        string,\n        DetailsOfEachMT5Loginid & {\n            enabled: number;\n        }\n    >;\n    dxtrade_accounts_list_error: null;\n    isAccountOfTypeDisabled: (account: Record<string, DetailsOfEachMT5Loginid>) => boolean;\n    is_accounts_switcher_on: boolean;\n    is_dark_mode_on: boolean;\n    is_eu: boolean;\n    is_eu_country: boolean;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    is_logging_in: boolean;\n    is_mt5_allowed: boolean;\n    is_mt5_trade_modal_visible: boolean;\n    is_dxtrade_allowed: boolean;\n    is_virtual: boolean;\n    landing_companies: LandingCompany;\n    has_maltainvest_account: boolean;\n    has_mt5_real_account_error: boolean;\n    has_mt5_demo_account_error: boolean;\n    has_dxtrade_real_account_error: boolean;\n    has_dxtrade_demo_account_error: boolean;\n    mt5_disabled_signup_types: {\n        real: boolean;\n        demo: boolean;\n    };\n    dxtrade_disabled_signup_types: {\n        real: boolean;\n        demo: boolean;\n    };\n    dxtrade_tokens: {\n        demo: string;\n        real: string;\n    };\n    has_real_account: boolean;\n    NotificationMessages: ({ ...props }) => JSX.Element;\n    platform: 'mt5' | 'dxtrade';\n    openAccountNeededModal: () => void;\n    residence: string;\n    residence_list: ResidenceList;\n    standpoint: TStandPoint;\n    toggleAccountsDialog: () => void;\n    toggleMT5TradeModal: () => void;\n    toggleShouldShowRealAccountsList: () => void;\n    upgradeable_landing_companies: unknown[];\n    is_reset_trading_password_modal_visible: boolean;\n    toggleResetTradingPasswordModal: () => void;\n    enableApp: () => void;\n    disableApp: () => void;\n    mt5_verification_code: object;\n    dxtrade_verification_code: object;\n    onMount: () => void;\n    onUnmount: () => void;\n    location: {\n        state: string;\n        pathname: string;\n        hash: string;\n    };\n    checkShouldOpenAccount: () => void;\n    setCFDPasswordResetModal: (value: boolean) => void;\n    disableCFDPasswordModal: () => void;\n    openPasswordModal: (account_type?: TOpenAccountTransferMeta) => void;\n    openTopUpModal: () => void;\n    setCurrentAccount: (data: DetailsOfEachMT5Loginid, meta: TOpenAccountTransferMeta) => void;\n    setAccountType: (account_type: TOpenAccountTransferMeta) => void;\n    mt5_status_server: TMt5StatusServer;\n    dxtrade_status_server: TDXTraderStatusServerType;\n    getRealSyntheticAccountsExistingData: (\n        getRealSyntheticAccountsExistingData: DetailsOfEachMT5Loginid[] | undefined\n    ) => void;\n    getRealFinancialAccountsExistingData: (\n        getRealSyntheticAccountsExistingData: DetailsOfEachMT5Loginid[] | undefined\n    ) => void;\n    openDerivRealAccountNeededModal: () => void;\n    setIsAcuityModalOpen: (value: boolean) => void;\n    refreshNotifications: () => void;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n    show_eu_related_content: boolean;\n    is_user_exception: boolean;\n};\n\nconst CFDDashboard = (props: TCFDDashboardProps) => {\n    const [is_demo_enabled, setIsDemoEnabled] = React.useState<boolean>(false);\n    const [is_real_enabled, setIsRealEnabled] = React.useState<boolean>(false);\n    const [active_index, setActiveIndex] = React.useState<number>(0);\n    const [is_demo_tab, setIsDemoTab] = React.useState<boolean>(false);\n    const [is_notification_loaded, setIsNotificationLoaded] = React.useState<boolean>(false);\n    const [password_manager, setPasswordManager] = React.useState<{\n        is_visible: boolean;\n        selected_login: string;\n        selected_account: string;\n        selected_account_type?: string;\n        selected_account_group?: string;\n        selected_server?: string;\n    }>({\n        is_visible: false,\n        selected_login: '',\n        selected_account: '',\n        selected_account_type: '',\n        selected_account_group: '',\n        selected_server: '',\n    });\n\n    const history = useHistory();\n\n    React.useEffect(() => {\n        if (window.location.href.includes(routes.mt5) || window.location.href.includes(routes.dxtrade)) {\n            history.push(routes.traders_hub);\n        }\n    }, [history]);\n\n    React.useEffect(() => {\n        updateActiveIndex(getIndexToSet());\n        openResetPassword();\n        props.refreshNotifications();\n        props.onMount();\n        return () => {\n            props.onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(() => {\n        props.checkShouldOpenAccount();\n\n        if (props.is_logged_in) {\n            ['demo', 'real'].forEach(account_type => {\n                const should_enable_tab =\n                    isDxtradeAllCardVisible(account_type) ||\n                    isSyntheticCardVisible(account_type) ||\n                    isFinancialCardVisible();\n\n                if (account_type === 'real' && is_real_enabled !== should_enable_tab) {\n                    setIsRealEnabled(should_enable_tab);\n                }\n\n                if (account_type === 'demo' && is_demo_enabled !== should_enable_tab) {\n                    setIsDemoEnabled(should_enable_tab);\n                }\n            });\n        }\n\n        if (!props.is_logged_in && (!is_real_enabled || !is_demo_enabled)) {\n            setIsRealEnabled(true);\n            setIsDemoEnabled(true);\n        }\n        if (props.location.hash === '#demo') {\n            setIsDemoEnabled(true);\n            setActiveIndex(1);\n        }\n    });\n\n    React.useEffect(() => {\n        if (props.location.hash === '#real') {\n            setActiveIndex(0);\n        }\n        if (props.location.hash === '#demo-all' || props.location.hash === '#demo') {\n            setActiveIndex(1);\n        }\n    }, [props.location.hash]);\n\n    const openResetPassword = () => {\n        if (!/reset-password/.test(props.location.hash)) {\n            return;\n        }\n\n        props.setCFDPasswordResetModal(true);\n    };\n\n    const getIndexToSet = () => {\n        if (is_real_enabled) {\n            return 0;\n        }\n        if (is_demo_enabled) {\n            return 1;\n        }\n\n        const hash = props.location.hash;\n        if (hash) {\n            return /demo/.test(props.location.hash) ? 1 : 0;\n        }\n        return undefined;\n    };\n\n    const stopNotificationLoading = () => {\n        setIsNotificationLoaded(true);\n    };\n\n    const updateActiveIndex = (index?: number) => {\n        if (index === undefined) return;\n        const updated_state: { is_demo_tab?: boolean; active_index?: number } = {};\n        // updateActiveIndex is called in componentDidUpdate causing tab_index to always revert back to 0\n        if (index === 1) updated_state.is_demo_tab = true;\n        else if (index === 0) updated_state.is_demo_tab = false;\n\n        if (active_index !== index) {\n            updated_state.active_index = index;\n        }\n\n        if (!isEmptyObject(updated_state)) {\n            setActiveIndex(updated_state.active_index as number);\n            setIsDemoTab(updated_state.is_demo_tab as boolean);\n        }\n    };\n\n    const openAccountTransfer = (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => {\n        if (meta.category === 'real') {\n            if (data) {\n                if ('platform' in data && data.platform === CFD_PLATFORMS.DXTRADE)\n                    sessionStorage.setItem('cfd_transfer_to_login_id', data.account_id || '');\n                else sessionStorage.setItem('cfd_transfer_to_login_id', data.login || '');\n\n                props.disableCFDPasswordModal();\n                props.history.push(routes.cashier_acc_transfer);\n            }\n        } else {\n            if ('sub_account_type' in data) props.setCurrentAccount(data, meta);\n            props.openTopUpModal();\n        }\n    };\n\n    const togglePasswordManagerModal = (\n        login?: string,\n        title?: string,\n        group?: string,\n        type?: string,\n        server?: string\n    ) => {\n        setPasswordManager(prev_state => ({\n            is_visible: !prev_state.is_visible,\n            selected_login: typeof login === 'string' ? login : '',\n            selected_account: typeof title === 'string' ? title : '',\n            selected_account_group: group,\n            selected_account_type: type,\n            selected_server: server,\n        }));\n    };\n\n    const openRealPasswordModal = (account_type: TOpenAccountTransferMeta) => {\n        props.setAccountType(account_type);\n        props.openPasswordModal();\n    };\n\n    const hasAccount = (category: string, type: string) => {\n        return Object.keys(current_list).some(key => key.startsWith(`${platform}.${category}.${type}`));\n    };\n\n    const isDxtradeAllCardVisible = (account_category: string) => {\n        const { platform, landing_companies } = props;\n\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        if (has_synthetic_account || has_financial_account) return false;\n\n        if (props.is_dxtrade_allowed && !props.is_logged_in) return true;\n\n        return isLandingCompanyEnabled({\n            landing_companies,\n            platform,\n            type: 'all',\n        });\n    };\n\n    const isSyntheticCardVisible = (account_category: string) => {\n        const { platform, is_eu, is_eu_country, landing_companies, is_logged_in } = props;\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        // Hiding card for logged out EU users\n        if (!is_logged_in && is_eu_country) return false;\n\n        if (is_eu && !has_synthetic_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) || !is_logged_in;\n    };\n\n    const isFinancialCardVisible = () => {\n        const { platform, landing_companies, is_logged_in } = props;\n\n        const has_synthetic_account = hasAccount('real', 'synthetic');\n        const has_financial_account = hasAccount('real', 'financial');\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'financial',\n            })\n        );\n    };\n\n    const isSwapFreeCardVisible = () => {\n        const { platform, landing_companies, is_logged_in } = props;\n\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'all',\n            })\n        );\n    };\n\n    const {\n        account_status,\n        beginRealSignupForMt5,\n        country,\n        createCFDAccount,\n        current_list,\n        dxtrade_tokens,\n        dxtrade_accounts_list_error,\n        isAccountOfTypeDisabled,\n        is_accounts_switcher_on,\n        is_dark_mode_on,\n        is_eu,\n        is_eu_country,\n        is_loading,\n        is_logged_in,\n        is_logging_in,\n        is_mt5_allowed,\n        is_mt5_trade_modal_visible,\n        is_dxtrade_allowed,\n        is_virtual,\n        landing_companies,\n        has_maltainvest_account,\n        has_mt5_real_account_error,\n        has_mt5_demo_account_error,\n        has_dxtrade_real_account_error,\n        has_dxtrade_demo_account_error,\n        mt5_disabled_signup_types,\n        dxtrade_disabled_signup_types,\n        has_real_account,\n        NotificationMessages,\n        platform,\n        openAccountNeededModal,\n        residence,\n        standpoint,\n        toggleAccountsDialog,\n        toggleMT5TradeModal,\n        toggleShouldShowRealAccountsList,\n        upgradeable_landing_companies,\n        is_reset_trading_password_modal_visible,\n        toggleResetTradingPasswordModal,\n        enableApp,\n        disableApp,\n        mt5_verification_code,\n        dxtrade_verification_code,\n        mt5_status_server,\n        dxtrade_status_server,\n        getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData,\n        openDerivRealAccountNeededModal,\n        setIsAcuityModalOpen,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n        show_eu_related_content,\n        is_user_exception,\n    } = props;\n\n    const should_show_missing_real_account =\n        is_logged_in && !has_real_account && upgradeable_landing_companies?.length > 0;\n    const should_enable_add_button = should_show_missing_real_account && CFD_PLATFORMS.MT5 && is_real_enabled;\n\n    if ((!country && is_logged_in) || is_logging_in) return <Loading />; // Wait for country name to be loaded before rendering\n\n    // all: 1 in mt5_status response means that server is suspended\n    const getIsSuspendedMt5Server = (type_server: TMt5StatusServer['demo' | 'real']) =>\n        type_server?.map((item: TMt5StatusServerType) => item.all).some((item: number) => item === 1);\n\n    const is_suspended_mt5_demo_server = getIsSuspendedMt5Server(mt5_status_server?.demo);\n    const is_suspended_mt5_real_server = getIsSuspendedMt5Server(mt5_status_server?.real);\n    const is_suspended_dxtrade_demo_server = !!dxtrade_status_server?.demo;\n    const is_suspended_dxtrade_real_server = !!dxtrade_status_server?.real;\n\n    const has_mt5_account_error = is_demo_tab\n        ? is_suspended_mt5_demo_server || has_mt5_demo_account_error || mt5_disabled_signup_types.demo\n        : is_suspended_mt5_real_server || has_mt5_real_account_error || mt5_disabled_signup_types.real;\n\n    const has_dxtrade_account_error = is_demo_tab\n        ? is_suspended_dxtrade_demo_server || has_dxtrade_demo_account_error || dxtrade_disabled_signup_types.demo\n        : is_suspended_dxtrade_real_server || has_dxtrade_real_account_error || dxtrade_disabled_signup_types.real;\n\n    const has_cfd_account_error = is_user_exception\n        ? !is_user_exception\n        : platform === CFD_PLATFORMS.MT5\n        ? has_mt5_account_error\n        : has_dxtrade_account_error || !!dxtrade_accounts_list_error;\n\n    const has_cfd_real_account_dxtrade_error =\n        is_suspended_dxtrade_real_server || dxtrade_disabled_signup_types.real || !!dxtrade_accounts_list_error;\n    const has_cfd_demo_account_dxtrade_error =\n        is_suspended_dxtrade_demo_server || dxtrade_disabled_signup_types.demo || !!dxtrade_accounts_list_error;\n    const has_cfd_real_account_mt5_error = is_suspended_mt5_real_server || mt5_disabled_signup_types.real;\n    const has_cfd_demo_account_mt5_error = is_suspended_mt5_demo_server || mt5_disabled_signup_types.demo;\n\n    const verification_code = platform === CFD_PLATFORMS.MT5 ? mt5_verification_code : dxtrade_verification_code;\n\n    if (platform === CFD_PLATFORMS.MT5 || platform === CFD_PLATFORMS.DXTRADE)\n        return <Redirect to={routes.traders_hub} />;\n    if (platform === CFD_PLATFORMS.DXTRADE && !is_dxtrade_allowed) return <Redirect to={routes.mt5} />;\n\n    if ((is_logged_in && !landing_companies) || is_loading) return <Loading />;\n\n    return (\n        <React.Fragment>\n            {is_mt5_allowed || platform === CFD_PLATFORMS.DXTRADE || !is_logged_in ? (\n                <div className='cfd-dashboard__container'>\n                    <NotificationMessages\n                        is_mt5\n                        is_notification_loaded={is_notification_loaded}\n                        stopNotificationLoading={stopNotificationLoading}\n                    />\n                    <div className='cfd-dashboard'>\n                        <div className='cfd-dashboard__welcome-message'>\n                            <h1 className='cfd-dashboard__welcome-message--heading'>\n                                {general_messages.getWelcomeHeader(is_logged_in, platform)}\n                            </h1>\n                        </div>\n                        {is_logged_in && has_cfd_account_error && (\n                            <div className='cfd-dashboard__accounts-error'>\n                                <Text\n                                    as='p'\n                                    className='cfd-dashboard__accounts-error-message'\n                                    line_height='l'\n                                    size='xxs'\n                                    color='prominent'\n                                    weight='normal'\n                                    align='center'\n                                >\n                                    <Localize\n                                        i18n_default_text='Due to an issue on our server, some of your {{platform}} accounts are unavailable at the moment. Please bear with us and thank you for your patience.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            </div>\n                        )}\n                        <div className='cfd-dashboard__accounts-display'>\n                            <CFDPasswordManagerModal\n                                is_visible={password_manager.is_visible}\n                                platform={platform}\n                                selected_login={password_manager.selected_login}\n                                selected_account={password_manager.selected_account}\n                                selected_account_group={password_manager.selected_account_group}\n                                selected_account_type={password_manager.selected_account_type}\n                                selected_server={password_manager.selected_server}\n                                toggleModal={togglePasswordManagerModal}\n                            />\n                            <LoadTab\n                                active_index={active_index}\n                                top\n                                center\n                                is_loading={is_loading}\n                                is_logged_in={is_logged_in}\n                                loading_component={LoadingCFDRealAccountDisplay}\n                                onTabItemClick={updateActiveIndex}\n                                should_update_hash\n                            >\n                                {is_real_enabled && (\n                                    <div label={localize('Real account')} data-hash='real'>\n                                        <React.Fragment>\n                                            {should_show_missing_real_account && (\n                                                <MissingRealAccount\n                                                    onClickSignup={() => {\n                                                        if (real_account_creation_unlock_date) {\n                                                            setShouldShowCooldownModal(true);\n                                                        } else {\n                                                            beginRealSignupForMt5();\n                                                        }\n                                                    }}\n                                                    platform={platform}\n                                                />\n                                            )}\n                                            <CFDRealAccountDisplay\n                                                is_accounts_switcher_on={is_accounts_switcher_on}\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    platform === CFD_PLATFORMS.MT5\n                                                        ? has_cfd_real_account_mt5_error\n                                                        : is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_real_account_dxtrade_error\n                                                }\n                                                current_list={current_list}\n                                                account_status={account_status}\n                                                onSelectAccount={createCFDAccount}\n                                                realSyntheticAccountsExistingData={getRealSyntheticAccountsExistingData}\n                                                realFinancialAccountsExistingData={getRealFinancialAccountsExistingData}\n                                                is_virtual={is_virtual}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isDxtradeAllCardVisible={isDxtradeAllCardVisible}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                                isAccountOfTypeDisabled={isAccountOfTypeDisabled}\n                                                has_real_account={has_real_account}\n                                                standpoint={standpoint}\n                                                toggleAccountsDialog={toggleAccountsDialog}\n                                                toggleMT5TradeModal={toggleMT5TradeModal}\n                                                toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n                                                residence={residence}\n                                                openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                                                should_enable_add_button={should_enable_add_button}\n                                                setIsAcuityModalOpen={setIsAcuityModalOpen}\n                                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        </React.Fragment>\n                                    </div>\n                                )}\n                                {is_demo_enabled && (\n                                    <div label={localize('Demo account')} data-hash='demo'>\n                                        {platform === CFD_PLATFORMS.DXTRADE && (\n                                            <CFDDxtradeDemoAccountDisplay\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_demo_account_dxtrade_error\n                                                }\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                            />\n                                        )}\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <CFDMT5DemoAccountDisplay\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_maltainvest_account={has_maltainvest_account}\n                                                has_cfd_account_error={has_cfd_demo_account_mt5_error}\n                                                openAccountNeededModal={openAccountNeededModal}\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isSwapFreeCardVisible={isSwapFreeCardVisible}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                toggleMT5TradeModal={toggleMT5TradeModal}\n                                                platform={platform}\n                                                residence={residence}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        )}\n                                    </div>\n                                )}\n                            </LoadTab>\n                            <CompareAccountsModal\n                                platform={platform}\n                                is_demo_tab={is_demo_tab}\n                                openPasswordModal={openRealPasswordModal}\n                                is_real_enabled={is_real_enabled}\n                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                has_unmerged_account={\n                                    hasAccount('real', 'synthetic') || hasAccount('real', 'financial')\n                                }\n                            />\n                            <SwitchToRealAccountModal />\n                            <JurisdictionModal openPasswordModal={openRealPasswordModal} />\n                            <MT5TradeModal\n                                current_list={current_list}\n                                is_open={is_mt5_trade_modal_visible}\n                                onPasswordManager={togglePasswordManagerModal}\n                                toggleModal={toggleMT5TradeModal}\n                                is_eu_user={(is_logged_in && is_eu) || (!is_logged_in && is_eu_country)}\n                                platform={platform}\n                            />\n                            <div className='cfd-dashboard__maintenance'>\n                                <Icon\n                                    icon='IcAlertWarning'\n                                    size={isMobile() ? 28 : 16}\n                                    className='cfd-dashboard__maintenance-icon'\n                                />\n                                <div className='cfd-dashboard__maintenance-text'>\n                                    {platform === CFD_PLATFORMS.DXTRADE && (\n                                        <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                                    )}\n                                    {platform === CFD_PLATFORMS.MT5 && (\n                                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <CFDDownloadContainer\n                            platform={platform}\n                            active_index={active_index}\n                            is_dark_mode_on={is_dark_mode_on}\n                            dxtrade_tokens={dxtrade_tokens}\n                        />\n                        <CFDTopUpDemoModal platform={platform} />\n                        <CFDPasswordModal platform={platform} has_suspended_account={has_cfd_account_error} />\n                        <CFDServerErrorDialog />\n                        {platform === CFD_PLATFORMS.MT5 && is_logged_in && (\n                            <CFDDbviOnboarding openPasswordModal={openRealPasswordModal} />\n                        )}\n                        <CFDResetPasswordModal platform={platform} />\n                        <ResetTradingPasswordModal\n                            platform={platform}\n                            enableApp={enableApp}\n                            disableApp={disableApp}\n                            toggleResetTradingPasswordModal={toggleResetTradingPasswordModal}\n                            is_visible={is_reset_trading_password_modal_visible}\n                            is_loading={is_loading}\n                            verification_code={verification_code}\n                        />\n                    </div>\n                </div>\n            ) : (\n                <PageError\n                    buttonSize={'medium'}\n                    header={\n                        <Localize\n                            i18n_default_text='{{platform_name_mt5}} is not available in {{country}}'\n                            values={{\n                                country,\n                                platform_name_mt5: getPlatformSettings('mt5').name,\n                            }}\n                            components={[<br key={0} />]}\n                        />\n                    }\n                    messages={[<Localize key={0} i18n_default_text='Please explore our other platforms.' />]}\n                    redirect_urls={[routes.trade, routes.bot]}\n                    redirect_labels={[\n                        <Localize\n                            key={0}\n                            i18n_default_text='Explore {{platform_name_trader}}'\n                            values={{ platform_name_trader: getPlatformSettings('trader').name }}\n                        />,\n                        <Localize\n                            key={1}\n                            i18n_default_text='Explore {{platform_name_dbot}}'\n                            values={{ platform_name_dbot: getPlatformSettings('dbot').name }}\n                        />,\n                    ]}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(\n    connect(({ client, modules, notifications, ui, traders_hub }: RootStore) => ({\n        beginRealSignupForMt5: modules.cfd.beginRealSignupForMt5,\n        checkShouldOpenAccount: modules.cfd.checkShouldOpenAccount,\n        country: client.account_settings.residence,\n        client_email: client.email_address,\n        context: { ui, modules },\n        createCFDAccount: modules.cfd.createCFDAccount,\n        current_list: modules.cfd.current_list,\n        dxtrade_tokens: modules.cfd.dxtrade_tokens,\n        landing_companies: client.landing_companies,\n        isAccountOfTypeDisabled: client.isAccountOfTypeDisabled,\n        is_logged_in: client.is_logged_in,\n        is_logging_in: client.is_logging_in,\n        is_eu: client.is_eu,\n        is_eu_country: client.is_eu_country,\n        is_virtual: client.is_virtual,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_dxtrade_allowed: client.is_dxtrade_allowed,\n        mt5_disabled_signup_types: client.mt5_disabled_signup_types,\n        dxtrade_disabled_signup_types: client.dxtrade_disabled_signup_types,\n        has_maltainvest_account: client.has_maltainvest_account,\n        can_upgrade_to: client.can_upgrade_to,\n        disableCFDPasswordModal: modules.cfd.disableCFDPasswordModal,\n        dxtrade_accounts_list_error: client.dxtrade_accounts_list_error,\n        is_compare_accounts_visible: modules.cfd.is_compare_accounts_visible,\n        is_mt5_trade_modal_visible: modules.cfd.is_mt5_trade_modal_visible,\n        is_fully_authenticated: client.is_fully_authenticated,\n        openPasswordModal: modules.cfd.enableCFDPasswordModal,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        getRealSyntheticAccountsExistingData: modules.cfd.getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData: modules.cfd.getRealFinancialAccountsExistingData,\n        is_loading: client.is_populating_mt5_account_list,\n        residence: client.residence,\n        has_mt5_real_account_error: client.has_account_error_in_mt5_real_list,\n        has_mt5_demo_account_error: client.has_account_error_in_mt5_demo_list,\n        has_dxtrade_real_account_error: client.has_account_error_in_dxtrade_real_list,\n        has_dxtrade_demo_account_error: client.has_account_error_in_dxtrade_demo_list,\n        has_real_account: client.has_active_real_account,\n        setAccountType: modules.cfd.setAccountType,\n        setCFDPasswordResetModal: ui.setCFDPasswordResetModal,\n        setCurrentAccount: modules.cfd.setCurrentAccount,\n        standpoint: client.standpoint,\n        toggleCompareAccounts: modules.cfd.toggleCompareAccountsModal,\n        toggleMT5TradeModal: modules.cfd.toggleMT5TradeModal,\n        is_accounts_switcher_on: ui.is_accounts_switcher_on,\n        openTopUpModal: ui.openTopUpModal,\n        NotificationMessages: ui.notification_messages_ui,\n        onMount: modules.cfd.onMount,\n        onUnmount: modules.cfd.onUnmount,\n        refreshNotifications: notifications.refreshNotifications,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleShouldShowRealAccountsList: ui.toggleShouldShowRealAccountsList,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        is_dark_mode_on: ui.is_dark_mode_on,\n        disableApp: ui.disableApp,\n        enableApp: ui.enableApp,\n        is_reset_trading_password_modal_visible: ui.is_reset_trading_password_modal_visible,\n        toggleResetTradingPasswordModal: ui.setResetTradingPasswordModalOpen,\n        mt5_verification_code: client.verification_code.trading_platform_mt5_password_reset,\n        dxtrade_verification_code: client.verification_code.trading_platform_dxtrade_password_reset,\n        mt5_status_server: client.website_status.mt5_status,\n        dxtrade_status_server: client.website_status.dxtrade_status,\n        openDerivRealAccountNeededModal: ui.openDerivRealAccountNeededModal,\n        setIsAcuityModalOpen: ui.setIsAcuityModalOpen,\n        setShouldShowCooldownModal: ui.setShouldShowCooldownModal,\n        real_account_creation_unlock_date: client.real_account_creation_unlock_date,\n        show_eu_related_content: traders_hub.show_eu_related_content,\n        is_user_exception: client.account_settings.dxtrade_user_exception,\n    }))(CFDDashboard)\n);\n","import CFDDashboard from './cfd-dashboard';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\n\nexport { CFDPasswordModal };\nexport { CFDServerErrorDialog };\nexport default CFDDashboard;\n","import React from 'react';\nimport CFD from '../Containers';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\n// Error Routes\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ '../Modules/Page404'));\n\n// Order matters\nconst initRoutesConfig = () => {\n    return [\n        {\n            path: routes.dxtrade,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='dxtrade' />,\n            getTitle: () => localize('Deriv X'),\n            is_authenticated: false,\n        },\n        {\n            path: routes.mt5,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='mt5' />,\n            getTitle: () => localize('MT5'),\n            is_authenticated: false,\n        },\n    ];\n};\n\nlet routesConfig;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default = { path: routes.error404, component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = () => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import { matchPath } from 'react-router';\nimport { routes } from '@deriv/shared';\n\nexport const normalizePath = path => (/^\\//.test(path) ? path : `/${path || ''}`); // Default to '/'\n\nexport const findRouteByPath = (path, routes_config) => {\n    let result;\n\n    routes_config.some(route_info => {\n        let match_path;\n        try {\n            match_path = matchPath(path, route_info);\n        } catch (e) {\n            if (/undefined/.test(e.message)) {\n                return undefined;\n            }\n        }\n\n        if (match_path) {\n            result = route_info;\n            return true;\n        } else if (route_info.routes) {\n            result = findRouteByPath(path, route_info.routes);\n            return result;\n        }\n        return false;\n    });\n\n    return result;\n};\n\nexport const isRouteVisible = (route, is_logged_in) => !(route && route.is_authenticated && !is_logged_in);\n\nexport const getPath = (route_path, params = {}) =>\n    Object.keys(params).reduce((p, name) => p.replace(`:${name}`, params[name]), route_path);\n\nexport const getContractPath = contract_id => getPath(routes.contract, { contract_id });\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport { findRouteByPath, normalizePath } from './helpers';\n\nconst BinaryLink = ({ active_class, to, children, ...props }) => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n    const path = normalizePath(to);\n    const route = findRouteByPath(path, getRoutesConfig({ is_dashboard }));\n\n    if (!route) {\n        throw new Error(`Route not found: ${to}`);\n    }\n\n    return to ? (\n        <NavLink to={path} activeClassName={active_class || 'active'} exact={route.exact} {...props}>\n            {children}\n        </NavLink>\n    ) : (\n        <a {...props}>{children}</a>\n    );\n};\n\nBinaryLink.propTypes = {\n    active_class: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),\n    to: PropTypes.string,\n};\n\nexport default BinaryLink;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\n\nconst RouteWithSubRoutes = route => {\n    const renderFactory = props => {\n        let result = null;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logged_in && !route.is_logging_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = (route.routes ?? []).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    ...cur.subroutes.find(subroute => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute.path} />}\n                    <route.component {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nconst BinaryRoutes = props => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n\n    return (\n        <React.Suspense\n            fallback={() => {\n                return (\n                    <div>\n                        <Localize i18n_default_text='Loading...' />\n                    </div>\n                );\n            }}\n        >\n            <Switch>\n                {getRoutesConfig({ is_dashboard }).map(route => (\n                    <RouteWithSubRoutes key={route.path} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link.jsx';\nimport BinaryRoutes from './binary-routes.jsx';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nexport { BinaryLink };\nexport default BinaryRoutes;\nexport * from './helpers';\nexport { RouteWithSubRoutes };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? message[(message, refresh_message)] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nErrorComponent.propTypes = {\n    header: PropTypes.string,\n    is_dialog: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    redirect_label: PropTypes.string,\n    redirectOnClick: PropTypes.func,\n    should_show_refresh: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default ErrorComponent;\n","import { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport BinaryRoutes from '../Components/Routes';\nimport { connect } from '../Stores/connect';\nimport ErrorComponent from '../Components/Errors/error-component.jsx';\n\nconst Routes = props => {\n    if (props.has_error) {\n        return <ErrorComponent {...props.error} />;\n    }\n\n    return (\n        <BinaryRoutes\n            is_logged_in={props.is_logged_in}\n            is_logging_in={props.is_logging_in}\n            passthrough={props.passthrough}\n        />\n    );\n};\n\nRoutes.propTypes = {\n    error: MobxPropTypes.objectOrObservableObject,\n    has_error: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_logging_in: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    passthrough: PropTypes.object,\n};\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(\n    connect(({ client, common }) => ({\n        is_logged_in: client.is_logged_in,\n        is_logging_in: client.is_logging_in,\n        error: common.error,\n        has_error: common.has_error,\n    }))(Routes)\n);\n","import CFDStore from './CFD/cfd-store';\n\nexport default class ModulesStore {\n    constructor(root_store) {\n        this.cfd = new CFDStore({ root_store });\n    }\n}\n","import ModulesStore from './Modules';\n\nexport default class RootStore {\n    constructor(core_store) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.rudderstack = core_store.rudderstack;\n        this.pushwoosh = core_store.pushwoosh;\n        this.notifications = core_store.notifications;\n        this.traders_hub = core_store.traders_hub;\n    }\n}\n","import { PromiseClass } from '../utility';\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nexport default ServerTime;\n","import { configure } from 'mobx';\nimport RootStore from './Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport Routes from './Containers/routes.jsx';\nimport { MobxContentProvider } from './Stores/connect';\nimport initStore from './init-store'; // eslint-disable-line import/extensions\n\ntype TAppProps = {\n    passthrough: {\n        root_store: any;\n        WS: any;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    const [root_store] = React.useState(initStore(passthrough.root_store, passthrough.WS));\n\n    return (\n        <MobxContentProvider store={root_store}>\n            <StoreProvider store={root_store}>\n                <React.Fragment>\n                    <Routes />\n                </React.Fragment>\n            </StoreProvider>\n        </MobxContentProvider>\n    );\n};\n\nApp.propTypes = {\n    passthrough: PropTypes.shape({\n        root_store: PropTypes.object,\n        WS: PropTypes.object,\n    }),\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import React, { PropsWithChildren } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }: PropsWithChildren<unknown>) => (\n    <QueryClientProvider client={queryClient}>\n        {children}\n        {/*Temporary disabled due to the problem on codecov, You can uncomment to use in development environment, DO NOT COMMIT THIS UNCOMMENTED*/}\n        {/*<ReactQueryDevtools />*/}\n    </QueryClientProvider>\n);\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useWS } from '@deriv/shared';\nimport type {\n    TSocketAcceptableProps,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [is_loading, setIsLoading] = useState(false);\n    const [is_subscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<unknown>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const WS = useWS();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onData = (response: any) => {\n                setData(response);\n                setIsLoading(false);\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onError = (response: any) => {\n                setError(response.error);\n                setIsLoading(false);\n            };\n\n            try {\n                subscriber.current = WS.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }).subscribe(\n                    onData,\n                    onError\n                );\n            } catch (e) {\n                setError(e);\n            }\n        },\n        [WS, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return { subscribe, unsubscribe, is_loading, is_subscribed, error, data };\n};\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n};\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    foo: false,\n    bar: false,\n    baz: false,\n    // Add your flag here 🚀\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <StoreContext.Provider value={memoizedValue}>\n            <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n        </StoreContext.Provider>\n    );\n};\n\nexport default StoreProvider;\n"],"names":["PlatformIcons","Derived","styles","props","viewBox","fill","xmlns","d","Financial","CFDs","SwapFree","icon","className","size","onClick","PlatformIcon","style","width","height","CFDAccountCopy","text","Clipboard","text_copy","info_message","isMobile","localize","success_message","popoverAlignment","Checkmark","Icon","custom_color","SuccessDialog","classNameMessage","has_cancel","has_submit","message","onCancel","onSubmit","heading","icon_size","text_submit","text_cancel","is_open","toggleModal","title","has_close_icon","is_medium_button","Modal","small","classNames","Text","as","weight","Localize","i18n_default_text","React","Button","has_effect","secondary","medium","large","primary","defaultProps","propTypes","PropTypes","icon_type","confirm_label","platform","onConfirm","context","initialValues","password","isSubmitting","handleSubmit","CFD_PLATFORMS","align","values","getCFDPlatformLabel","color","FormSubmitButton","is_center","label","cancel_label","is_loading","CFDDbviOnboarding","ui","account_status","client","account_type","disableApp","enableApp","fetchAccountSettings","has_created_account_for_selected_jurisdiction","has_submitted_cfd_personal_details","is_cfd_verification_modal_visible","is_virtual","jurisdiction_selected_shortcode","mt5_login_list","openPasswordModal","cfd","toggleCFDVerificationModal","updateAccountStatus","updateMT5Status","useState","showSubmittedModal","setShowSubmittedModal","getAccountStatusFromAPI","WS","get_account_status","response","getAuthenticationStatusInfo","poi_acknowledged_for_vanuatu_maltainvest","poi_acknowledged_for_bvi_labuan","poa_acknowledged","Jurisdiction","setIsLoading","getModalTitle","getModalContent","InputField","maxLength","name","optional","field","form","errors","touched","Input","type","required","autoComplete","error","validatePersonalDetails","residence_list","account_opening_reason","is_tin_required","tax_residence_obj","filter","res","tax_residence","tin_format","tin_regex","validations","citizen","v","map","i","includes","tax_identification_number","some","regex","match","value","place_of_birth","mappedKey","Object","entries","forEach","field_name","key","error_index","findIndex","changeable_fields","landing_company","index","form_error","config","tax_details_required","length","Loading","is_fullscreen","validateOnChange","validateOnBlur","validate","actions","idx","is_dirty","citizen_text","tax_residence_text","place_of_birth_text","item","findDefaultValuesInResidenceList","setSubmitting","submitForm","isDeepEqual","validateOnMount","handleChange","handleBlur","setFieldValue","isValid","citizenship_error","place_of_birth_error","tax_residence_error","account_opening_reason_error","is_citizenship_disabled","is_place_of_birth_disabled","is_tax_residence_disabled","is_account_opening_reason_disabled","handleItemSelection","_field","item_value","tin_field_label","find","AutoHeightWrapper","default_height","height_offset","isDesktop","setRef","ref","noValidate","Div100vhContainer","max_autoheight_offset","is_disabled","ThemedScrollbars","is_bypassed","DesktopWrapper","Autocomplete","id","disabled","list_items","onItemSelection","list_portal_id","MobileWrapper","SelectNative","placeholder","use_text","onChange","e","target","should_hide_disabled_options","onBlur","Dropdown","is_align_text_left","list","data_testid","has_separator","FormSubmitErrorMessage","keys","is_absolute","useStateCallback","poa_status","has_poi","form_state","document_upload","setDocumentUpload","hasPOAFailed","sethasPOAfailed","PoaStatusCodes","validLength","uploadables","setFormState","authorized","api_response","storage","onSave","useEffect","poa_failed_status","needs_poi","poi_status","refreshNotifications","isFormDisabled","address_line_1","address_city","address_state","address_postcode","is_form_visible","address_line_2","validateForm","onSubmitValues","is_ok","validAddress","validLetterSymbol","validation_errors","max","max_number","rules","onFileDrop","setFieldTouched","files","error_message","states_list","file_uploader_ref","df","document_file","notifications","app_routing_history","common","fetchResidenceList","is_switching","is_high_risk","is_withdrawal_lock","routeBackInApp","should_allow_authentication","account_settings","getChangeableFields","CFDPOI","poi_state","citizen_data","onStateChange","status","setPOIState","connect","setAccountSettings","setFormError","form_values","setFormValues","initiatePersonalDetails","get_settings_response","get_settings","transform","then","result","getPropertyValue","saveFormData","_index","updateValue","data","getPersonalDetailsForm","modules","addNotificationByKey","addNotificationMessageByKey","authentication_status","client_email","email","is_fully_authenticated","removeNotificationMessage","removeNotificationByKey","fetchStatesList","storeProofOfAddress","step","setStep","state_index","is_mounted","current","need_poi_for_vanuatu_maltainvest","need_poi_for_bvi_labuan","poi_config","body","form_value","forwarded_props","poa_config","CFDPOA","upload_file","personal_details_config","CFDPersonalDetailsContainer","should_show_poa","document_status","should_show_personal_details","verification_configs","items","setItems","unmount","onFinish","cloned_items","getCurrent","BodyComponent","passthrough","reduce","forwarded_prop","assign","ChangePassword","PasswordReset","account_group","onClickSendEmail","redirect_to","Number","password_reset_code","url_parameters","SendEmailTemplate","subtitle","lbl_no_receive","txt_resend","txt_resend_in","multi_step_ref","steps","component","goNextStep","goPrevStep","MultiStep","CFDPasswordSuccessMessage","is_investor","InvestorPasswordManager","error_message_investor","is_submit_success_investor","setPasswordType","validatePassword","initial_values","old_password","new_password","password_type","PasswordInput","PasswordMeter","input","has_error","custom_feedback_messages","getErrorMessages","password_warnings","has_warning","hint","tertiary","CountdownComponent","count_from","onTimeout","count","setCount","interval","setTimeout","clearTimeout","CFDPasswordReset","sendVerifyEmail","server","is_resend_verification_requested","setResendVerification","is_resend_verification_sent","setResendVerificationSent","localStorage","setItem","join","components","CFDPasswordManagerTabContentWrapper","lbl_previous","CFDPasswordManagerTabContent","selected_login","onChangeActiveTabIndex","active_tab_index","setActiveTabIndex","setErrorMessageInvestor","setSubmitSuccessInvestor","container_height","min","validPassword","toLowerCase","min_number","undefined","CFDStore","login","trading_password_manager","autohide","Tabs","active_index","onTabItemClick","top","is_eu","is_visible","selected_account_type","selected_account_group","selected_server","setIndex","fallback","UILoader","should_header_stick_body","PageOverlay","portal_id","header","onClickClose","account_title","should_set_trading_password","element","alignment","is_password_reset_error","ReviewMessageForMT5","manual_status","is_selected_mt5_verified","MALTA_INVEST","show_eu_related_content","traders_hub","window","error_type","CreatePassword","is_real_financial_stp","handlePasswordInputChange","submitPassword","useRef","CFDPasswordForm","closeModal","has_mt5_account","onForgotPassword","useMemo","cancel_button_label","handleCancel","has_cancel_button","button_label","showJuristiction","account","jurisdiction_shortcode","getFormattedJurisdictionCode","legal_entity_name","getLegalEntityName","disableCFDPasswordModal","getAccountStatus","has_cfd_error","landing_companies","is_eu_country","is_logged_in","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","is_dxtrade_allowed","setMt5Error","setError","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","cfd_new_account","new_account_response","mt5_trading_servers","withRouter","CFDPasswordModal","history","is_password_modal_exited","setPasswordModalExited","isArray","is_password_error","is_password_reset","is_sent_email_modal_open","setIsSentEmailModalOpen","poi_verified_for_bvi_labuan","poi_verified_for_vanuatu_maltainvest","poa_verified","getVerificationStatus","setIsSelectedMT5Verified","closeDialogs","should_show_password_modal","should_show_password","category","handleForgotPassword","password_modal","cfd_password_form","should_show_password_dialog","should_show_success","getSubmitText","category_label","type_label","getMtCompanies","deriv_x_type_label","getDxCompanies","jurisdiction_label","mt5_platform_label","success_modal_submit_label","should_show_sent_email_modal","ResetPasswordIntent","group","current_list","children","reset_password_intent","getItem","reset_password_type","test","split","pop","CFDResetPasswordModal","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","error_code","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","resetPassword","request","account_id","verification_code","code","getIsListFetched","is_invalid_investor_token","onMount","redirectToLogin","getLanguage","line_height","observer","useStore","clearCFDError","should_show_error","Dialog","confirm_button_text","UnhandledErrorModal","is_top_up_virtual_open","is_top_up_virtual_in_progress","is_top_up_virtual_success","closeTopUpModal","closeSuccessTopUpModal","current_account","dxtrade_companies","mt5_companies","topUpVirtual","getAccountTitle","platform_title","getTopUpConfig","minimum_amount","additional_amount","Money","amount","currency","show_currency","display_balance","has_sign","balance","getAccounts","is_uk","account_types_count","mt_gaming_company","financial","mt_financial_company","financial_stp","dxtrade_gaming_company","dxtrade_financial_company","Boolean","financial_eu_trading_instruments","attribute","mt5","synthetic","synthetic_eu","financial_au","financial_eu","footnote","dxtrade","CFDAttributeDescriber","counter","setIsVisible","compareAccountsData","is_eu_client","residence","is_australian","table","getFinancialObject","footnote_number","row","synthetic_object","financial_object","footnote_counter","filterAvailableAccounts","CFDCompareAccountHint","show_risk_message","cols","setCols","template_columns","updateColumnsStyle","financial_account_table_head_text","Table","fixed","isLandingCompanyEnabled","col","j","getEuFooterButtons","action","Row","pre_appstore_class","available_accounts_count","classname_for_demo_and_eu","is_pre_appstore_setting","content_flag","is_high_risk_for_mt5","CFDs_restricted_countries","is_preappstore_restricted_cr_demo_account","is_leverage_row","is_platform_row","is_instruments_row","getContentSize","synthetic_bvi","derivx","ContentFlag","financial_svg","rowKey","tooltip_msg","Array","options","should_show_asterick_at_end","Popover","classNameBubble","disable_message_icon","is_bubble_hover_enabled","zIndex","has_real_account","has_active_real_account","has_real_mt5_login","openSwitchToRealAccountModal","setAccountType","setJurisdictionSelectedShortcode","should_restrict_bvi_account_creation","should_restrict_vanuatu_account_creation","trading_platform_available_accounts","upgradeable_landing_companies","setAppstorePlatform","no_CR_account","is_eu_user","no_MF_account","is_demo_tab","is_preappstore_cr_demo_account","is_real_enabled","openDerivRealAccountNeededModal","real_account_creation_unlock_date","setShouldShowCooldownModal","should_show_derivx","toggleCompareAccounts","has_submitted_personal_details","setHasSubmittedPersonalDetails","mt5_platforms","market_type","shortcode","has_synthetic","available_accounts_keys","logged_out_available_accounts_count","synthetic_accounts_count","startsWith","financial_accounts_count","poi_or_poa_not_submitted","poa_pending","footer_button_data","modal_content","isMt5AccountAdded","market","current_account_type","landing_company_short","onButtonClick","should_show_missing_real_account","type_of_account","onSelectRealAccount","synthetic_svg","financial_maltainvest","paddingTop","padding","synthetic_vanuatu","financial_bvi","financial_vanuatu","financial_labuan","row_data","available_accounts_values","acc","content_data","col_num","sorted_values","el","rest","shouldShowPendingStatus","primary_light","getLoggedInTypesCount","dxtrade_all_company","prev","DxtradeCompareAccountContent","has_unmerged_account","is_compare_accounts_visible","is_populating_mt5_account_list","toggleCompareAccountsModal","selected_region","location","pathname","has_derivx","show_preappstore_eu_demo","is_dxtrade","cfd_account_button_label","getCFDModalTitle","getModalStyle","marginTop","exit_classname","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","header_classname","has_full_height","jurisdictionVerificationContents","short_description","required_verification_docs","document_number","selfie","identity_document","name_and_address","not_applicable","status_references","card_classname","is_card_selected","toggleCardFlip","verification_docs","verification_item","status_item","clickable_description","description_part","title_indicators","type_of_card","poi_pending_for_bvi_labuan","poi_resubmit_for_bvi_labuan","poi_pending_for_vanuatu_maltainvest","poi_resubmit_for_vanuatu_maltainvest","need_poa_resubmission","getVerificationIconVariant","verification_document","icon_variant","display_text_skin_color","display_text","concat","card_section_item","description","card_data","card_values","is_over_header_available","over_header","is_non_idv_design","is_synthetic","is_swapfree","svg","synthetic_contents","financial_contents","swapfree_contents","synthetic_verification_docs","financial_verification_docs","bvi","vanuatu","labuan","maltainvest","non_synthetic_card_data","is_card_flipped","setIsCardFlipped","event","stopPropagation","cardType","synthetic_available_accounts","financial_available_accounts","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","swapfree_available_accounts","disableCard","jurisdiction_cards_array","card","cardsToBeShown","class_name","is_checked","onCheck","dbvi_company_names","tnc_url","Checkbox","company","StaticUrl","href","defaultChecked","FooterNote","account_type_name","getMT5Title","is_jurisdiction_modal_visible","toggleJurisdictionModal","checked","setChecked","available_account","is_svg_selected","is_bvi_selected","is_vanuatu_selected","is_labuan_selected","is_maltainvest_selected","is_idv_country","elem","identity","services","idv","is_country_supported","has_idv_attempts","authentication","submissions_left","modal_title","SpecBox","is_bold","PasswordBox","relative_render","transparent","mt5_trade_account","onPasswordManager","getCompanyShortcode","getCFDAccountDisplay","sub_account_type","is_mt5_trade_modal","display_login","server_info","environment","getCFDAccountKey","getTitle","getMT5WebTerminalLink","loginid","server_name","rel","getPlatformMt5DownloadLink","src","getUrlBase","getPlatformSettings","DxtradeDesktopDownload","dxtrade_tokens","is_demo","getDXTradeWebTerminalLink","getHeadingTitle","trade_modal_title","getPlatformDXTradeDownloadLink","maxWidth","CFDTradeModal","OSDetect","token","url","all_config","leverage","short_title","synthetic_config","financial_config","demo","all","dxtrade_account_type","real","mt5_account_type","financial_stp_config","all_svg","financial_fx","financial_v","jurisdiction_code","formatted_label","toUpperCase","this","has","indexOf","push","prototype","hasOwnProperty","call","store","Error","error_count","rule","is_rule_string","rule_object","validator","func","getPreBuildDVRs","template","name1","name2","add","ruleObject","Validator","getRuleObject","condition","is_valid","addFailure","check","BaseStore","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","observable","retrieveFromStorage","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","defineProperty","enumerable","writable","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","p","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","JSON","stringify","getSnapshot","sessionStorage","local_storage_snapshot","parse","session_storage_snapshot","k","propertyName","messages","x","property","intercept","change","newValue","trigger","inputs","isPassed","get","listener","when","switch_broadcast","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","is_network_online","is_online","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","reactions","act","freeze","Symbol","is_cfd_personal_details_modal_visible","is_mt5_trade_modal_visible","map_type","is_mt5_financial_stp_modal_open","computed","is_high_risk_client_for_mt5","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","createCFDAccount","enableCFDPasswordModal","getName","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setCurrentAccount","setMT5TradeAccount","setCFDNewAccount","creatMT5Password","createCFDPassword","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleMT5TradeModal","disableMt5FinancialStpModal","setDxtradeToken","loadDxtradeTokens","dxtrade_accounts_list","getAccountListKey","is_cfd_page","set_password","post_signup","Promise","resolve","realCFDSignup","demoCFDSignup","first_name","type_request","getAccountTypeFields","country_code","phone","mainPassword","email_address","address","city","country","zipCode","sub_account_category","openRealAccountSignup","meta","obj","setStatus","reject","msg","is_btn_loading","upload","warning","is_mt5_password_not_set","is_dxtrade_password_not_set","resetForm","success","mt5_login_list_response","responseMt5LoginList","responseMT5TradingServers","mt5_new_account","trading_platform_accounts_list_response","responseTradingPlatformAccountsList","trading_platform_new_account","setTopUpInProgress","trading_platform_deposit","to_account","to_mt5","new_balance","runInAction","service_token","has_existing_account","every","MobxContent","MobxContentProvider","Provider","mobxStores","propsToSelectFn","Component","BaseComponent","own_props","ObservedComponent","isReactComponent","isClassComponent","useObserver","displayName","injectStorePropsToComponent","static_hash","PromiseClass","promise","module","exports","string","content","to_replace","replace","s","createElement","tag_name","attributes","document","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","onClickSignup","is_invisible","theme","invisible","from","inx","general_messages","mobileDownloadLink","MT5DesktopDownload","MobileDownload","classnames","QRCodeBox","is_switch_to_deriv_account_modal_visible","is_closed_on_confirm","account_icons","AddAccountButton","onSelectAccount","CFDAccountCardAction","handleClickSwitchAccount","is_accounts_switcher_on","is_button_primary","lbl_add_account","cta_label","CFDAccountCard","isEligibleForMoreDemoMt5Svg","isEligibleForMoreRealMt5","setIsAcuityModalOpen","commission_message","descriptor","existing_accounts_data","has_banner","has_cfd_account_error","onClickFund","specs","toggleAccountsDialog","toggleShouldShowRealAccountsList","existing_data","should_show_extra_add_account_button","platform_icon","has_popular_banner","has_demo_banner","has_server_banner","wrapper_ref","button_ref","getServerName","server_region","geolocation","region","sequence","is_web_terminal_unsupported","tbody_content","spec_attribute","all_svg_acc","charAt","slice","svg_acc","should_show_pending_button","getBannerStatus","selected_account_data","margin","mobileOSDetect","CSSTransition","in","timeout","unmountOnExit","real_synthetic_specs","real_financial_specs","real_all_specs","eu_real_financial_specs","real_financial_stp_specs","au_real_financial_specs","demo_financial_stp_specs","demo_all_specs","acc_type","standpoint","openAccountTransfer","openPasswordManager","current_list_index","malta","enabled","_acc","cur","specifications","has_maltainvest_account","openAccountNeededModal","isSyntheticCardVisible","isFinancialCardVisible","isSwapFreeCardVisible","openAccountTransferList","financial_specs","should_show_eu","iom","CFDRealAccountDisplay","isDxtradeAllCardVisible","realSyntheticAccountsExistingData","realFinancialAccountsExistingData","isAccountOfTypeDisabled","should_enable_add_button","onClickFundReal","isMT5AccountCardDisabled","account_key","list_item","Carousel","nav_position","show_bullet","item_per_window","is_mt5","loading_component","LoadingComponent","is_logging_in","is_mt5_allowed","mt5_disabled_signup_types","dxtrade_disabled_signup_types","can_upgrade_to","dxtrade_accounts_list_error","has_mt5_real_account_error","has_account_error_in_mt5_real_list","has_mt5_demo_account_error","has_dxtrade_real_account_error","has_dxtrade_demo_account_error","openTopUpModal","NotificationMessages","notification_messages_ui","is_reset_trading_password_modal_visible","toggleResetTradingPasswordModal","mt5_verification_code","dxtrade_verification_code","mt5_status_server","website_status","dxtrade_status_server","dxtrade_status","is_user_exception","CFDDashboard","is_notification_loaded","setIsNotificationLoaded","useHistory","password_manager","routes","openResetPassword","setIsRealEnabled","should_enable_tab","is_demo_enabled","setIsDemoEnabled","hash","setActiveIndex","updated_state","togglePasswordManagerModal","selected_account","hasAccount","account_category","has_financial_account","has_synthetic_account","getIsSuspendedMt5Server","type_server","is_suspended_mt5_demo_server","is_suspended_dxtrade_real_server","has_mt5_account_error","is_suspended_mt5_real_server","has_dxtrade_account_error","has_cfd_real_account_dxtrade_error","has_cfd_demo_account_dxtrade_error","is_suspended_dxtrade_demo_server","has_cfd_real_account_mt5_error","has_cfd_demo_account_mt5_error","DXTRADE","to","stopNotificationLoading","openRealPasswordModal","platform_name_trader","platform_name_dbot","routesConfig","Page404","route_default","path","is_authenticated","findRouteByPath","routes_config","route_info","match_path","matchPath","BinaryLink","active_class","is_dashboard","PlatformContext","normalizePath","route","getRoutesConfig","NavLink","activeClassName","exact","Route","render","Redirect","default_subroute","subroutes","subroute","has_default_subroute","removeBranchName","default_title","Switch","ErrorComponent","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","reload","PageErrorContainer","error_header","error_messages","redirect_urls","redirect_labels","buttonOnClick","Routes","MobxPropTypes","ModulesStore","common_store","clock_started","pending","RootStore","core_store","gtm","rudderstack","pushwoosh","init","server_time","clone","timePromise","configure","enforceActions","websocket","ServerTime","setWebsocket","App","initStore","createContext","QueryClient","is_subscribed","setSubscribed","setData","subscriber","useWS","subscribe","useCallback","prop","payload","unsubscribe","useContext","StoreContext","useSubscription","update","exchange_rates","base_currency","merge","onHydrationDone","makePersistable","Function","stopPersisting","ExchangeRatesStore","FLAGS","foo","bar","baz","FeatureFlagsStore","old","flag","memoizedValue","is_mock","feature_flags"],"sourceRoot":""}