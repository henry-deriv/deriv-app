{"version":3,"file":"cfd/js/CFDStore.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/_common/utility.js","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"mobx\"","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/./src/Utils/Validator/errors.js","webpack://@deriv/cfd/./src/Utils/Validator/validator.js","webpack://@deriv/cfd/./src/Utils/Validator/index.js","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\", \"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"], root[\"mobx\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__) => {\nreturn ","import { localize } from '@deriv/translations';\nimport { Jurisdiction } from '@deriv/shared';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean) => {\n    // TODO: Move this to the getDxCompanies for real release and when separating MT5 and DerivX components.\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: localize('Swap-Free'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? localize('CFDs') : localize('Financial'),\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","const template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[+index - 1]);\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","class Errors {\n    constructor() {\n        this.errors = {};\n    }\n\n    add(attribute, message) {\n        if (!this.has(attribute)) {\n            this.errors[attribute] = [];\n        }\n\n        if (this.errors[attribute].indexOf(message) === -1) {\n            this.errors[attribute].push(message);\n        }\n    }\n\n    all() {\n        return this.errors;\n    }\n\n    first(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute][0];\n        }\n        return null;\n    }\n\n    get(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute];\n        }\n\n        return [];\n    }\n\n    has(attribute) {\n        return Object.prototype.hasOwnProperty.call(this.errors, attribute);\n    }\n}\n\nexport default Errors;\n","import { template } from '_common/utility';\nimport { getPreBuildDVRs } from '@deriv/shared';\nimport Error from './errors';\n\nclass Validator {\n    constructor(input, rules, store = null) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Error();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute, rule, error_message) {\n        let message = error_message || rule.options.message || getPreBuildDVRs()[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max ? rule.options.min : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min]);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1, rule.options.name2]);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            this.rules[attribute].forEach(rule => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute],\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(this.input[attribute], ruleObject.options, this.store, this.input);\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object = {\n            name: is_rule_string ? rule : rule[0],\n            options: is_rule_string ? {} : rule[1] || {},\n        };\n\n        rule_object.validator = rule_object.name === 'custom' ? rule[1].func : getPreBuildDVRs()[rule_object.name].func;\n\n        return rule_object;\n    }\n}\n\nexport default Validator;\n","import Validator from './validator';\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\n\nimport Validator from '../Utils/Validator';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction, runInAction, makeObservable, override } from 'mobx';\nimport { getAccountListKey, getAccountTypeFields, CFD_PLATFORMS, WS, Jurisdiction } from '@deriv/shared';\nimport BaseStore from 'Stores/base-store';\nimport { getDxCompanies, getMtCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_compare_accounts_visible = false;\n    is_cfd_personal_details_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    is_mt5_trade_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n\n    account_type = {\n        category: undefined,\n        type: undefined,\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    is_cfd_verification_modal_visible = false;\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_cfd_personal_details_modal_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            current_account: observable,\n            is_cfd_verification_modal_visible: observable,\n            error_type: observable,\n            dxtrade_tokens: observable,\n            account_title: computed,\n            current_list: computed,\n            has_created_account_for_selected_jurisdiction: computed,\n            has_submitted_cfd_personal_details: computed,\n            is_high_risk_client_for_mt5: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            storeProofOfAddress: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            toggleCFDVerificationModal: action.bound,\n            setDxtradeToken: action.bound,\n            loadDxtradeTokens: action.bound,\n        });\n\n        reaction(\n            () => [this.root_store.client.dxtrade_accounts_list],\n            () => {\n                if (this.root_store.client.dxtrade_accounts_list.length > 0) {\n                    this.loadDxtradeTokens();\n                }\n            }\n        );\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content)[this.account_type.category][\n                  this.account_type.type\n              ].title\n            : '';\n    }\n\n    get has_submitted_cfd_personal_details() {\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            this.root_store.client.account_settings;\n        return !!(citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason);\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n    get has_created_account_for_selected_jurisdiction() {\n        switch (this.account_type.type) {\n            case 'synthetic':\n                return this.real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            case 'all':\n                return this.real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            default:\n                return this.real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n        }\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    getName() {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[this.account_type.category][this.account_type.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            ...(this.account_type.type === 'all' ? { sub_account_category: 'swap_free' } : {}),\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode ? { company: this.jurisdiction_selected_shortcode } : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: values.password,\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type: this.account_type.type === 'dxtrade' ? 'all' : this.account_type.type,\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    storeProofOfAddress(file_uploader_ref, values, { setStatus }) {\n        return new Promise((resolve, reject) => {\n            setStatus({ msg: '' });\n            this.setState({ is_btn_loading: true });\n\n            WS.setSettings(values).then(data => {\n                if (data.error) {\n                    setStatus({ msg: data.error.message });\n                    reject(data);\n                } else {\n                    this.root_store.fetchAccountSettings();\n                    // force request to update settings cache since settings have been updated\n                    file_uploader_ref.current.upload().then(api_response => {\n                        if (api_response.warning) {\n                            setStatus({ msg: api_response.message });\n                            reject(api_response);\n                        } else {\n                            WS.authorized.storage.getAccountStatus().then(({ error, get_account_status }) => {\n                                if (error) {\n                                    reject(error);\n                                }\n                                const { identity } = get_account_status.authentication;\n                                const has_poi = !(identity && identity.status === 'none');\n                                resolve({\n                                    identity,\n                                    has_poi,\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        const response = await this.openMT5Account(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n            const mt5_login_list_response = await WS.authorized.mt5LoginList();\n            this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            this.setCFDNewAccount(response.mt5_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        if (this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n            const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n            this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.setCFDNewAccount(response.trading_platform_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DXTRADE,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    toggleCFDVerificationModal() {\n        this.is_cfd_verification_modal_visible = !this.is_cfd_verification_modal_visible;\n    }\n\n    get is_high_risk_client_for_mt5() {\n        const { trading_platform_available_accounts } = this.root_store.client;\n        const financial_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'financial'\n        );\n\n        const synthetic_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'gaming'\n        );\n\n        return (\n            financial_available_accounts.length === 1 &&\n            financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n            synthetic_available_accounts.length === 1 &&\n            synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n        );\n    }\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_mobx__","getDxCompanies","all_config","account_type","leverage","short_title","localize","synthetic_config","financial_config","demo","all","dxtrade_account_type","title","synthetic","financial","real","dxtrade","mt5_account_type","getMtCompanies","is_eu","financial_stp_config","all_svg","synthetic_svg","financial_svg","financial_stp","synthetic_bvi","financial_bvi","financial_fx","financial_v","static_hash","PromiseClass","this","promise","Promise","resolve","reject","template","string","content","to_replace","Array","isArray","replace","s","index","createElement","tag_name","attributes","el","document","Object","keys","forEach","attr","value","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","split","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","errors","attribute","message","has","indexOf","push","input","rules","store","Error","error_count","rule","is_rule_string","rule_object","name","options","validator","func","getPreBuildDVRs","error_message","min","max","name1","name2","add","ruleObject","Validator","getRuleObject","condition","is_valid","is_ok","addFailure","check","i","BaseStore","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","observable","retrieveFromStorage","action","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","writable","length","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","reduce","result","p","assign","reaction","map","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","localStorage","setItem","sessionStorage","local_storage_snapshot","parse","getItem","session_storage_snapshot","k","propertyName","messages","filter","x","includes","concat","property","intercept","change","newValue","trigger","inputs","isPassed","error","listener","when","client","switch_broadcast","then","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","common","is_network_online","is_online","ui","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","reactions","act","freeze","Symbol","CFDStore","is_compare_accounts_visible","is_cfd_personal_details_modal_visible","is_jurisdiction_modal_visible","is_mt5_trade_modal_visible","jurisdiction_selected_shortcode","category","type","mt5_trade_account","new_account_response","map_type","has_cfd_error","is_cfd_success_dialog_enabled","is_mt5_financial_stp_modal_open","is_cfd_password_modal_enabled","current_account","error_type","is_cfd_verification_modal_visible","dxtrade_tokens","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","account_title","computed","current_list","has_created_account_for_selected_jurisdiction","has_submitted_cfd_personal_details","is_high_risk_client_for_mt5","onMount","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","clearCFDError","createCFDAccount","disableCFDPasswordModal","enableCFDPasswordModal","getName","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setAccountType","setCurrentAccount","setMT5TradeAccount","setError","setCFDNewAccount","setCFDSuccessDialog","storeProofOfAddress","getAccountStatus","creatMT5Password","submitMt5Password","createCFDPassword","submitCFDPassword","toggleCompareAccountsModal","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleJurisdictionModal","toggleMT5TradeModal","disableMt5FinancialStpModal","topUpVirtual","sendVerifyEmail","setJurisdictionSelectedShortcode","toggleCFDVerificationModal","setDxtradeToken","loadDxtradeTokens","dxtrade_accounts_list","traders_hub","show_eu_related_content","account_settings","citizen","place_of_birth","tax_residence","tax_identification_number","account_opening_reason","list","mt5_login_list","acc","landing_company_short","account","getAccountListKey","CFD_PLATFORMS","some","is_cfd_page","platform","set_password","removeItem","post_signup","realCFDSignup","demoCFDSignup","Jurisdiction","first_name","mt5_companies","join","values","type_request","getAccountTypeFields","address_line_1","address_line_2","address_postcode","address_city","address_state","country_code","phone","WS","mainPassword","password","email","email_address","address","city","country","state","zipCode","sub_account_category","server","company","market_type","openRealAccountSignup","fetchResidenceList","fetchStatesList","fetchAccountSettings","data","meta","code","cfd_new_account","file_uploader_ref","setStatus","msg","setState","is_btn_loading","current","upload","api_response","warning","get_account_status","identity","authentication","has_poi","status","is_mt5_password_not_set","is_dxtrade_password_not_set","actions","new_password","response","resetForm","setSubmitting","success","mt5_login_list_response","responseMt5LoginList","responseMT5TradingServers","mt5_new_account","trading_platform_accounts_list_response","responseTradingPlatformAccountsList","trading_platform_new_account","setTopUpInProgress","trading_platform_deposit","to_account","account_id","to_mt5","login","new_balance","find","item","balance","runInAction","is_top_up_virtual_open","is_top_up_virtual_success","service_token","token","has_existing_account","shortcode","trading_platform_available_accounts","financial_available_accounts","available_account","synthetic_available_accounts","every","old_password","password_type"],"sourceRoot":""}