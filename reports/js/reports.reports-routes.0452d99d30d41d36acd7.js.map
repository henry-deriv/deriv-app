{"version":3,"file":"reports/js/reports.reports-routes.0452d99d30d41d36acd7.js","mappings":"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","sources":["webpack://@deriv/reports/./src/Components/Elements/ContentLoader/reports-table-row.tsx","webpack://@deriv/reports/./src/Helpers/market-underlying.ts","webpack://@deriv/reports/./src/Components/empty-trade-history-message.tsx","webpack://@deriv/reports/./src/Containers/progress-slider-stream.tsx","webpack://@deriv/reports/./src/Helpers/profit-loss.ts","webpack://@deriv/reports/./src/Components/indicative-cell.tsx","webpack://@deriv/reports/./src/Components/market-symbol-icon-row.tsx","webpack://@deriv/reports/./src/Components/profit_loss_cell.tsx","webpack://@deriv/reports/./src/Components/currency-wrapper.tsx","webpack://@deriv/reports/./src/Constants/data-table-constants.tsx","webpack://@deriv/reports/./src/_common/components/loading.jsx","webpack://@deriv/reports/./src/Components/placeholder-component.jsx","webpack://@deriv/reports/./src/Containers/open-positions.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/composite-calendar-mobile.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/list-item.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/side-list.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/calendar-icon.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/composite-calendar.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/index.ts","webpack://@deriv/reports/./src/Components/reports-meta.tsx","webpack://@deriv/reports/./src/Containers/profit-table.tsx","webpack://@deriv/reports/./src/Components/account-statistics.tsx","webpack://@deriv/reports/./src/Components/filter-component.tsx","webpack://@deriv/reports/./src/Containers/statement.tsx","webpack://@deriv/reports/./src/Containers/reports.tsx","webpack://@deriv/reports/./src/Containers/index.ts"],"sourcesContent":["import ContentLoader from 'react-content-loader';\nimport React from 'react';\n\ntype TReportsTableRowLoader = {\n    speed?: number;\n};\n\nconst ReportsTableRowLoader = ({ speed }: TReportsTableRowLoader) => (\n    <ContentLoader\n        height={64}\n        width={992}\n        speed={speed}\n        backgroundColor={'var(--general-hover)'}\n        foregroundColor={'var(--general-active)'}\n    >\n        <rect x='16' y='16' rx='4' ry='4' width='32' height='32' />\n        <rect x='52' y='16' rx='4' ry='4' width='32' height='32' />\n        <rect x='132' y='28' rx='4' ry='4' width='101' height='8' />\n        <rect x='273' y='28' rx='4' ry='4' width='120' height='8' />\n        <rect x='460' y='28' rx='4' ry='4' width='46' height='8' />\n        <rect x='593' y='28' rx='4' ry='4' width='46' height='8' />\n        <rect x='726' y='28' rx='4' ry='4' width='64' height='8' />\n        <rect x='906' y='28' rx='4' ry='4' width='64' height='8' />\n    </ContentLoader>\n);\n\nexport { ReportsTableRowLoader };\n","import { getContractConfig, getMarketNamesMap } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\ntype TMarketInfo = {\n    category: string;\n    underlying: string;\n};\n\ntype TTradeConfig = {\n    name: JSX.Element;\n    position: string;\n};\n\n/**\n * Fetch market information from shortcode\n * @param shortcode: string\n * @returns {{underlying: string, category: string}}\n */\n\n// TODO: Combine with  extractInfoFromShortcode function in shared, both are currently used\nexport const getMarketInformation = (shortcode: string): TMarketInfo => {\n    const market_info: TMarketInfo = {\n        category: '',\n        underlying: '',\n    };\n\n    const pattern = new RegExp(\n        '^([A-Z]+)_((1HZ[0-9-V]+)|((CRASH|BOOM)[0-9\\\\d]+[A-Z]?)|(OTC_[A-Z0-9]+)|R_[\\\\d]{2,3}|[A-Z]+)'\n    );\n    const extracted = pattern.exec(shortcode);\n    if (extracted !== null) {\n        market_info.category = extracted[1].toLowerCase();\n        market_info.underlying = extracted[2];\n    }\n\n    return market_info;\n};\n\nexport const getMarketName = (underlying: string) =>\n    underlying ? getMarketNamesMap()[underlying.toUpperCase() as keyof typeof getMarketNamesMap] : null;\n\nexport const getTradeTypeName = (category: string, is_high_low = false) =>\n    category\n        ? (getContractConfig(is_high_low)[category.toUpperCase() as keyof typeof getContractConfig] as TTradeConfig)\n              .name\n        : null;\n\nexport const getContractDurationType = (longcode: string, shortcode: string): string => {\n    if (/^(MULTUP|MULTDOWN)/.test(shortcode)) return '';\n\n    const duration_pattern = new RegExp('ticks|tick|seconds|minutes|minute|hour|hours');\n    const extracted = duration_pattern.exec(longcode);\n    if (extracted !== null) {\n        const duration_type = extracted[0];\n        const duration_text = duration_type[0].toUpperCase() + duration_type.slice(1);\n        return duration_text.endsWith('s') ? duration_text : `${duration_text}s`;\n    }\n    return localize('Days');\n};\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TEmptyTradeHistoryMessage = {\n    component_icon: string;\n    has_selected_date: boolean;\n    localized_message: string;\n    localized_period_message: string;\n};\n\nconst EmptyTradeHistoryMessage = ({\n    has_selected_date,\n    component_icon,\n    localized_message,\n    localized_period_message,\n}: TEmptyTradeHistoryMessage) => (\n    <React.Fragment>\n        <div className='empty-trade-history'>\n            <Icon\n                data_testid='dt_empty_trade_history_icon'\n                icon={component_icon}\n                className='empty-trade-history__icon'\n                color='disabled'\n                size={96}\n            />\n            <Text size='xs' align='center' color='disabled' className='empty-trade-history__text'>\n                {!has_selected_date ? localized_message : localized_period_message}\n            </Text>\n        </div>\n    </React.Fragment>\n);\n\nexport default EmptyTradeHistoryMessage;\n","import React from 'react';\nimport { ProgressSlider } from '@deriv/components';\nimport { getCurrentTick, TContractInfo, getCardLabels } from '@deriv/shared';\nimport { connect } from 'Stores/connect';\nimport moment from 'moment';\nimport { TRootStore } from 'Stores/index';\n\ntype TProgressSliderStream = {\n    contract_info: Required<TContractInfo>;\n    is_loading: boolean;\n    server_time: moment.Moment;\n};\n\nconst ProgressSliderStream = ({ contract_info, is_loading, server_time }: TProgressSliderStream) => {\n    if (!contract_info) {\n        return <div />;\n    }\n    const current_tick = contract_info.tick_count && getCurrentTick(contract_info);\n\n    return (\n        <ProgressSlider\n            current_tick={current_tick}\n            expiry_time={contract_info.date_expiry}\n            getCardLabels={getCardLabels}\n            is_loading={is_loading}\n            server_time={server_time}\n            start_time={contract_info.date_start}\n            ticks_count={contract_info.tick_count}\n        />\n    );\n};\n\nexport default connect(({ common, portfolio }: TRootStore) => ({\n    is_loading: portfolio.is_loading,\n    server_time: common.server_time,\n}))(ProgressSliderStream);\n","export const getProfitOrLoss = (value: string) => (+value.replace(/,/g, '') >= 0 ? 'profit' : 'loss');\n","import React from 'react';\nimport { Icon, Money, DesktopWrapper, ContractCard } from '@deriv/components';\nimport { getCardLabels, TContractInfo } from '@deriv/shared';\nimport { connect } from 'Stores/connect';\nimport { TRootStore } from 'Stores/index';\n\ntype TIndicativeCell = {\n    amount: number;\n    contract_info: TContractInfo;\n    currency: string;\n    status: string;\n    is_footer: boolean;\n    is_sell_requested: boolean;\n    onClickSell: () => void;\n};\n\nconst IndicativeCell = ({\n    amount,\n    currency,\n    contract_info,\n    is_footer,\n    onClickSell,\n    is_sell_requested,\n}: TIndicativeCell) => {\n    const [movement, setMovement] = React.useState<string | null>(null);\n    const [amount_state, setAmountState] = React.useState(0);\n\n    React.useEffect(() => {\n        setMovement(() => {\n            return amount >= amount_state ? 'profit' : 'loss';\n        });\n        setAmountState(amount);\n    }, [amount, amount_state]);\n\n    return (\n        <div className='open-positions__indicative'>\n            <div className='open-positions__indicative--amount'>\n                <Money amount={Math.abs(amount)} currency={currency} />\n                {status !== 'no-resale' && amount !== 0 && (\n                    <React.Fragment>\n                        {movement === 'profit' && <Icon icon='IcProfit' />}\n                        {movement === 'loss' && <Icon icon='IcLoss' />}\n                    </React.Fragment>\n                )}\n            </div>\n            <DesktopWrapper>\n                {!is_footer && (\n                    <ContractCard.Sell\n                        contract_info={contract_info}\n                        is_sell_requested={is_sell_requested}\n                        getCardLabels={getCardLabels}\n                        onClickSell={onClickSell}\n                    />\n                )}\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nexport default connect(({ portfolio }: TRootStore) => ({\n    onClickSell: portfolio.onClickSell,\n}))(IndicativeCell);\n","import React from 'react';\nimport { extractInfoFromShortcode, isHighLow } from '@deriv/shared';\nimport { Icon, Popover, IconTradeTypes } from '@deriv/components';\nimport { getMarketName, getTradeTypeName } from '../Helpers/market-underlying';\nimport classNames from 'classnames';\n\ntype TMarketSymbolIconRow = {\n    icon?: string | null;\n    payload: {\n        shortcode: string;\n        display_name: string;\n        action_type: string;\n    };\n    show_description?: boolean;\n    should_show_multiplier?: boolean;\n    should_show_accumulator?: boolean;\n    is_vanilla?: boolean;\n};\n\nconst MarketSymbolIconRow = ({\n    icon,\n    payload,\n    show_description,\n    should_show_accumulator = true,\n    should_show_multiplier = true,\n    is_vanilla,\n}: TMarketSymbolIconRow) => {\n    const should_show_category_icon = typeof payload.shortcode === 'string';\n    const info_from_shortcode = extractInfoFromShortcode(payload.shortcode);\n    const is_high_low = isHighLow({ shortcode_info: info_from_shortcode });\n\n    // We need the condition to update the label for vanilla trade type since the label doesn't match with the trade type key unlike other contracts\n    const category_label = is_vanilla\n        ? (info_from_shortcode.category as string).replace('Vanillalong', '').charAt(0).toUpperCase() +\n          (info_from_shortcode.category as string).replace('Vanillalong', '').slice(1)\n        : info_from_shortcode.category;\n\n    if (should_show_category_icon && info_from_shortcode) {\n        return (\n            <div className={classNames('market-symbol-icon', { 'market-symbol-icon__vanilla': is_vanilla })}>\n                <div className='market-symbol-icon-name'>\n                    <Popover\n                        classNameTarget='market-symbol-icon__popover'\n                        classNameBubble='market-symbol-icon__popover-bubble'\n                        alignment='top'\n                        message={getMarketName(info_from_shortcode.underlying as string)}\n                        is_bubble_hover_enabled\n                        disable_target_icon\n                    >\n                        <Icon\n                            icon={\n                                info_from_shortcode.underlying\n                                    ? `IcUnderlying${info_from_shortcode.underlying}`\n                                    : 'IcUnknown'\n                            }\n                            size={32}\n                        />\n                    </Popover>\n                    {show_description && payload.display_name}\n                </div>\n\n                <div className='market-symbol-icon-category'>\n                    <Popover\n                        classNameTarget='category-type-icon__popover'\n                        classNameBubble='category-type-icon__popover-bubble'\n                        alignment='top'\n                        message={getTradeTypeName(info_from_shortcode.category as string, is_high_low)}\n                        is_bubble_hover_enabled\n                        disable_target_icon\n                    >\n                        <IconTradeTypes\n                            type={\n                                is_high_low\n                                    ? `${(info_from_shortcode.category as string).toLowerCase()}_barrier`\n                                    : (info_from_shortcode.category as string).toLowerCase()\n                            }\n                            color='brand'\n                        />\n                    </Popover>\n                    {show_description && category_label}\n                </div>\n                {should_show_multiplier && info_from_shortcode.multiplier && (\n                    <div className='market-symbol-icon__multiplier'>x{info_from_shortcode.multiplier}</div>\n                )}\n                {should_show_accumulator && info_from_shortcode.growth_rate && (\n                    <div className='market-symbol-icon__multiplier'>\n                        {(info_from_shortcode.growth_rate as number) * 100}%\n                    </div>\n                )}\n            </div>\n        );\n    } else if (['deposit', 'hold', 'release', 'withdrawal', 'transfer'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                {payload.action_type === 'deposit' && <Icon icon={icon || 'IcCashierDeposit'} size={32} />}\n                {payload.action_type === 'withdrawal' && <Icon icon='IcCashierWithdrawal' size={32} />}\n                {payload.action_type === 'transfer' && <Icon icon='IcAccountTransferColored' size={32} />}\n                {(payload.action_type === 'hold' || payload.action_type === 'release') && (\n                    <Icon icon='IcCashierDp2p' size={32} />\n                )}\n            </div>\n        );\n    } else if (['adjustment'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                <Icon icon='IcAdjustment' size={32} />\n            </div>\n        );\n    }\n\n    return (\n        <svg width='32' height='32' className='unknown-icon'>\n            <rect width='32' height='32' />\n        </svg>\n    );\n};\n\nexport default MarketSymbolIconRow;\n","import React from 'react';\nimport { getProfitOrLoss } from '../Helpers/profit-loss';\n\ntype TProfitLossCell = {\n    value: string;\n    children: React.ReactNode;\n};\n\nconst ProfitLossCell = ({ value, children }: TProfitLossCell) => {\n    const status = getProfitOrLoss(value);\n\n    return <span className={`amount--${status}`}>{children}</span>;\n};\n\nexport default ProfitLossCell;\n","import React from 'react';\nimport { Text } from '@deriv/components';\n\ntype TCurrencyWrapper = {\n    currency: string;\n};\n\nconst CurrencyWrapper = ({ currency }: TCurrencyWrapper) => (\n    <div className='currency__wrapper'>\n        <Text color='colored-background' weight='bold' size='xxxs'>\n            {currency}\n        </Text>\n    </div>\n);\n\nexport default CurrencyWrapper;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Label, Money, ContractCard, ContractCardSell, Popover } from '@deriv/components';\nimport {\n    isMobile,\n    getCurrencyDisplayCode,\n    getTotalProfit,\n    shouldShowCancellation,\n    getGrowthRatePercentage,\n    getCardLabels,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport ProgressSliderStream from '../Containers/progress-slider-stream';\nimport { TCellContentProps, THeaderProps } from 'Types';\nimport { getProfitOrLoss } from '../Helpers/profit-loss';\nimport IndicativeCell from '../Components/indicative-cell';\nimport MarketSymbolIconRow from '../Components/market-symbol-icon-row';\nimport ProfitLossCell from '../Components/profit_loss_cell';\nimport CurrencyWrapper from '../Components/currency-wrapper';\nimport { ITransformer } from 'mobx-utils';\n\nconst map = {\n    buy: 'success',\n    deposit: 'success',\n    hold: 'warn',\n    release: 'success',\n    sell: 'danger',\n    withdrawal: 'info',\n    default: 'default',\n    adjustment: 'adjustment',\n    transfer: 'transfer',\n} as const;\n\nexport type TKeys = keyof typeof map;\n\nconst getModeFromValue = (key: TKeys) => map[key] || map.default;\n\ntype TMultiplierOpenPositionstemplateProps = {\n    currency: string;\n    onClickCancel: () => void;\n    onClickSell: () => void;\n    getPositionById: (id: string) => ITransformer<any, any>;\n    server_time: moment.Moment;\n};\n\n/* eslint-disable react/display-name, react/prop-types */\nexport const getStatementTableColumnsTemplate = (currency: string) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'icon',\n        renderCellContent: ({ passthrough, row_obj }: TCellContentProps) => {\n            const icon = passthrough.isTopUp(row_obj) ? 'icCashierTopUp' : null;\n            return <MarketSymbolIconRow icon={icon} key={row_obj.transaction_id} payload={row_obj} />;\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'refid',\n        renderCellContent: ({ cell_value, row_obj }: TCellContentProps) => {\n            return (\n                <Popover\n                    alignment={'top'}\n                    message={localize('Transaction performed by (App ID: {{app_id}})', { app_id: row_obj.app_id })}\n                >\n                    {cell_value}\n                </Popover>\n            );\n        },\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: () => <CurrencyWrapper currency={getCurrencyDisplayCode(currency)} />,\n    },\n    {\n        title: localize('Transaction time'),\n        col_index: 'date',\n        renderCellContent: ({ cell_value }: TCellContentProps) => {\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        key: 'mode',\n        title: localize('Transaction'),\n        col_index: 'action_type',\n        renderCellContent: ({ cell_value, passthrough, row_obj }: TCellContentProps) => (\n            <Label mode={getModeFromValue(cell_value)}>\n                {(passthrough.isTopUp(row_obj) && localize('Top up')) || row_obj.action}\n            </Label>\n        ),\n    },\n    {\n        title: localize('Credit/Debit'),\n        col_index: 'amount',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <div className={`amount--${getProfitOrLoss(cell_value)}`}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </div>\n        ),\n    },\n    {\n        title: localize('Balance'),\n        col_index: 'balance',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <Money amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n        ),\n    },\n];\nexport const getProfitTableColumnsTemplate = (currency: string, items_count: number) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'action_type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return localize('Profit/loss on the last {{item_count}} contracts', { item_count: items_count });\n            }\n            return <MarketSymbolIconRow key={row_obj.transaction_id} payload={row_obj} />;\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'transaction_id',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ is_footer }: TCellContentProps) =>\n            is_footer ? '' : <CurrencyWrapper currency={getCurrencyDisplayCode(currency)} />,\n    },\n    {\n        title: localize('Buy time'),\n        col_index: 'purchase_time',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        title: localize('Buy price'),\n        col_index: 'buy_price',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    },\n    {\n        title: localize('Sell time'),\n        col_index: 'sell_time',\n        renderHeader: ({ title }: THeaderProps) => <span>{title}</span>,\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        title: localize('Sell price'),\n        col_index: 'sell_price',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    },\n    {\n        title: localize('Profit / Loss'),\n        col_index: 'profit_loss',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <ProfitLossCell value={cell_value}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </ProfitLossCell>\n        ),\n    },\n];\nexport const getOpenPositionsColumnsTemplate = (currency: string) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer, is_vanilla }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                    show_description={is_vanilla}\n                    is_vanilla={is_vanilla}\n                />\n            );\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'reference',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: localize('Buy price'),\n        col_index: 'purchase',\n        renderCellContent: ({ cell_value }: TCellContentProps) => <Money amount={cell_value} currency={currency} />,\n    },\n    {\n        title: localize('Payout limit'),\n        col_index: 'payout',\n        renderHeader: ({ title, is_vanilla }: THeaderProps) => <span>{is_vanilla ? localize('Strike') : title}</span>,\n        renderCellContent: ({ cell_value, row_obj, is_vanilla }: TCellContentProps) => {\n            const non_vanilla_payout = cell_value ? <Money amount={cell_value} currency={currency} /> : <span>-</span>;\n            return is_vanilla ? row_obj.barrier?.toFixed(2) : non_vanilla_payout;\n        },\n    },\n    {\n        title: localize('Indicative profit/loss'),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.profit_loss && (!row_obj.contract_info || !row_obj.contract_info.profit)) return;\n            const profit = row_obj.profit_loss || row_obj.contract_info.profit;\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': profit < 0,\n                        'open-positions__profit-loss--positive': profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Indicative price'),\n        col_index: 'indicative',\n        renderCellContent: ({ cell_value, row_obj, is_footer }: TCellContentProps) => (\n            <IndicativeCell\n                amount={+cell_value}\n                currency={currency}\n                contract_info={row_obj.contract_info}\n                is_sell_requested={row_obj.is_sell_requested}\n                is_footer={is_footer}\n            />\n        ),\n    },\n    {\n        title: localize('Remaining time'),\n        col_index: 'id',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <ProgressSliderStream contract_info={row_obj.contract_info} />\n        ),\n    },\n];\n\nexport const getMultiplierOpenPositionsColumnsTemplate = ({\n    currency,\n    onClickCancel,\n    onClickSell,\n    getPositionById,\n    server_time,\n}: TMultiplierOpenPositionstemplateProps) => [\n    {\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow key={row_obj.id} payload={row_obj.contract_info} should_show_multiplier={false} />\n            );\n        },\n    },\n    {\n        title: localize('Multiplier'),\n        col_index: 'multiplier',\n        renderCellContent: ({ row_obj }: TCellContentProps) =>\n            row_obj.contract_info && row_obj.contract_info.multiplier ? `x${row_obj.contract_info.multiplier}` : '',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: localize('Stake'),\n        col_index: 'buy_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (row_obj.contract_info) {\n                const { ask_price: cancellation_price = 0 } = row_obj.contract_info.cancellation || {};\n                return <Money amount={row_obj.contract_info.buy_price - cancellation_price} currency={currency} />;\n            }\n            return '';\n        },\n    },\n    {\n        title: localize('Deal cancel. fee'),\n        col_index: 'cancellation',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.underlying) return '-';\n\n            if (!shouldShowCancellation(row_obj.contract_info.underlying)) return localize('N/A');\n\n            if (row_obj.contract_info.cancellation) {\n                return <Money amount={row_obj.contract_info.cancellation.ask_price} currency={currency} />;\n            }\n            return '-';\n        },\n    },\n    {\n        title: isMobile() ? (\n            <Localize i18n_default_text='Total buy price' />\n        ) : (\n            <Localize i18n_default_text='Buy price' />\n        ),\n        col_index: 'purchase',\n        renderCellContent: ({ cell_value }: TCellContentProps) => <Money amount={cell_value} currency={currency} />,\n    },\n    {\n        title: <Localize i18n_default_text='Take profit<0 />Stop loss' components={[<br key={0} />]} />,\n        col_index: 'limit_order',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return '';\n            }\n\n            const { take_profit, stop_loss } = row_obj.contract_info?.limit_order || {};\n            return (\n                <React.Fragment>\n                    <div>\n                        {take_profit?.order_amount ? (\n                            <Money has_sign amount={take_profit.order_amount} currency={currency} />\n                        ) : (\n                            '-'\n                        )}\n                    </div>\n                    <div>\n                        {stop_loss?.order_amount ? (\n                            <Money has_sign amount={stop_loss.order_amount} currency={currency} />\n                        ) : (\n                            '-'\n                        )}\n                    </div>\n                </React.Fragment>\n            );\n        },\n    },\n    {\n        title: localize('Current stake'),\n        col_index: 'bid_price',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return '';\n            }\n\n            if (!row_obj.contract_info || !row_obj.contract_info.bid_price) return '-';\n\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            return (\n                <div\n                    className={classNames('open-positions__bid_price', {\n                        'open-positions__bid_price--negative': total_profit < 0,\n                        'open-positions__bid_price--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={row_obj.contract_info.bid_price} currency={currency} />\n                </div>\n            );\n        },\n    },\n    {\n        title: isMobile() ? (\n            <Localize i18n_default_text='Total profit/loss' />\n        ) : (\n            <Localize i18n_default_text='Total<0 />profit/loss' components={[<br key={0} />]} />\n        ),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return null;\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': total_profit < 0,\n                        'open-positions__profit-loss--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(total_profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {total_profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Action'),\n        col_index: 'action',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return <div className='open-positions__row-action' />;\n            }\n\n            const { contract_info } = row_obj;\n            const position = getPositionById(contract_info.contract_id);\n            const { is_sell_requested } = position || {};\n\n            return (\n                <div className='open-positions__row-action'>\n                    <ContractCard.MultiplierCloseActions\n                        contract_info={contract_info}\n                        getCardLabels={getCardLabels}\n                        is_sell_requested={is_sell_requested}\n                        onClickCancel={onClickCancel}\n                        onClickSell={onClickSell}\n                        server_time={server_time}\n                    />\n                </div>\n            );\n        },\n    },\n];\n\nexport const getAccumulatorOpenPositionsColumnsTemplate = ({\n    currency,\n    onClickSell,\n    getPositionById,\n}: TMultiplierOpenPositionstemplateProps) => [\n    {\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                    should_show_multiplier={false}\n                    should_show_accumulator={false}\n                />\n            );\n        },\n    },\n    {\n        title: localize('Growth rate'),\n        col_index: 'growth_rate',\n        renderCellContent: ({ row_obj }) =>\n            row_obj.contract_info && row_obj.contract_info.growth_rate\n                ? `${getGrowthRatePercentage(row_obj.contract_info.growth_rate)}%`\n                : '',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: isMobile() ? localize('Total stake') : localize('Initial stake'),\n        col_index: isMobile() ? 'purchase' : 'buy_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (row_obj.contract_info) {\n                return <Money amount={row_obj.contract_info.buy_price} currency={currency} />;\n            }\n            return '';\n        },\n    },\n    {\n        title: localize('Take profit'),\n        col_index: 'limit_order',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            const { take_profit } = row_obj.contract_info?.limit_order || {};\n            return (\n                <div>\n                    {take_profit?.order_amount ? (\n                        <Money has_sign amount={take_profit.order_amount} currency={currency} />\n                    ) : (\n                        '-'\n                    )}\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Current stake'),\n        col_index: 'bid_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.bid_price) return '-';\n\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            return (\n                <div\n                    className={classNames('open-positions__bid_price', {\n                        'open-positions__bid_price--negative': total_profit < 0,\n                        'open-positions__bid_price--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={row_obj.contract_info.bid_price} currency={currency} />\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Total profit/loss'),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return null;\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': total_profit < 0,\n                        'open-positions__profit-loss--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(total_profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {total_profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Action'),\n        col_index: 'action',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return <div className='open-positions__row-action' />;\n            }\n\n            const { contract_info } = row_obj;\n            const position = getPositionById(contract_info.contract_id);\n            const { is_sell_requested } = position || {};\n\n            return (\n                <div className='open-positions__row-action'>\n                    <ContractCardSell\n                        contract_info={contract_info}\n                        is_sell_requested={is_sell_requested}\n                        getCardLabels={getCardLabels}\n                        onClickSell={onClickSell}\n                    />\n                </div>\n            );\n        },\n    },\n];\n/* eslint-enable react/display-name, react/prop-types */\n","import classNames from 'classnames';\nimport React from 'react';\n\nconst Loading = ({ className, is_invisible, theme, id, data_testid }) => (\n    <div\n        id={id}\n        data-testid={data_testid}\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Loading from '_common/components/loading.jsx';\n\nconst PlaceholderComponent = props => {\n    const EmptyMessageComponent = props.empty_message_component;\n    return (\n        <React.Fragment>\n            {props.is_empty && (\n                <EmptyMessageComponent\n                    component_icon={props.component_icon}\n                    has_selected_date={props.has_selected_date}\n                    localized_message={props.localized_message}\n                    localized_period_message={props.localized_period_message}\n                />\n            )}\n            {props.is_loading && <Loading data_testid='dt_loading_component' />}\n        </React.Fragment>\n    );\n};\n\nPlaceholderComponent.propTypes = {\n    component_icon: PropTypes.string,\n    empty_message_component: PropTypes.func,\n    has_selected_date: PropTypes.bool,\n    is_empty: PropTypes.bool,\n    is_loading: PropTypes.bool,\n    localized_message: PropTypes.string,\n    localized_period_message: PropTypes.string,\n};\n\nexport default PlaceholderComponent;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    MobileWrapper,\n    ProgressBar,\n    ProgressSliderMobile,\n    DataList,\n    DataTable,\n    ContractCard,\n    usePrevious,\n    PositionsDrawerCard,\n    SelectNative,\n    Dropdown,\n} from '@deriv/components';\nimport {\n    isAccumulatorContract,\n    isMobile,\n    isMultiplierContract,\n    isVanillaContract,\n    getTimePercentage,\n    getUnsupportedContracts,\n    getTotalProfit,\n    getContractPath,\n    formatPortfolioPosition,\n    TContractInfo,\n    getCurrentTick,\n    getGrowthRatePercentage,\n    getCardLabels,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport { getContractDurationType } from '../Helpers/market-underlying';\n\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport {\n    getOpenPositionsColumnsTemplate,\n    getAccumulatorOpenPositionsColumnsTemplate,\n    getMultiplierOpenPositionsColumnsTemplate,\n} from 'Constants/data-table-constants';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport { connect } from 'Stores/connect';\nimport type { TRootStore } from 'Stores/index';\n\ntype TRangeFloatZeroToOne = React.ComponentProps<typeof ProgressBar>['value'];\ntype TFormatPortfolioPosition = ReturnType<typeof formatPortfolioPosition>;\ntype TGetMultiplierOpenPositionsColumnsTemplate = ReturnType<typeof getMultiplierOpenPositionsColumnsTemplate>;\ntype TGetOpenPositionsColumnsTemplate = ReturnType<typeof getOpenPositionsColumnsTemplate>;\ntype TColumnsMap = TGetMultiplierOpenPositionsColumnsTemplate | TGetOpenPositionsColumnsTemplate;\ntype TColumnsMapElement = TColumnsMap[number];\ntype TColIndex =\n    | 'type'\n    | 'reference'\n    | 'currency'\n    | 'purchase'\n    | 'payout'\n    | 'profit'\n    | 'indicative'\n    | 'id'\n    | 'multiplier'\n    | 'buy_price'\n    | 'cancellation'\n    | 'limit_order'\n    | 'bid_price'\n    | 'action';\n\ntype TEmptyPlaceholderWrapper = React.PropsWithChildren<{\n    is_empty: boolean;\n    component_icon: string;\n}>;\n\nconst EmptyPlaceholderWrapper = ({ is_empty, component_icon, children }: TEmptyPlaceholderWrapper) => (\n    <React.Fragment>\n        {is_empty ? (\n            <PlaceholderComponent\n                is_empty={is_empty}\n                empty_message_component={EmptyTradeHistoryMessage}\n                component_icon={component_icon}\n                localized_message={localize('You have no open positions yet.')}\n            />\n        ) : (\n            children\n        )}\n    </React.Fragment>\n);\n\ntype TMobileRowRenderer = {\n    row: TFormatPortfolioPosition & { is_sell_requested: boolean };\n    is_footer: boolean;\n    columns_map: Record<TColIndex, TColumnsMapElement>;\n    server_time: moment.Moment;\n    onClickCancel: () => void;\n    onClickSell: () => void;\n    measure: () => void;\n};\n\ntype TOpenPositionsTable = {\n    className: string;\n    columns: Record<string, any>[];\n    component_icon: string;\n    currency: string;\n    active_positions: TFormatPortfolioPosition[];\n    is_loading: boolean;\n    getRowAction: (row_obj: TRowObj) =>\n        | string\n        | {\n              component: JSX.Element;\n          };\n    mobileRowRenderer: (args: TMobileRowRenderer) => JSX.Element;\n    preloaderCheck: (item: { purchase: number }) => boolean;\n    row_size: number;\n    totals: TTotals;\n    is_empty: boolean;\n};\n\ntype TRowObj = {\n    is_unsupported: false;\n    id: number;\n};\n\ntype TTotals = {\n    contract_info?: {\n        profit?: number;\n        buy_price?: number;\n        bid_price?: number;\n        cancellation?: {\n            ask_price?: number;\n        };\n    };\n    indicative?: number;\n    purchase?: number;\n    profit_loss?: number;\n    payout?: number;\n};\n\ntype TAddToastProps = {\n    key: string;\n    content: string;\n    type: string;\n};\n\ntype TOpenPositions = {\n    active_positions: TFormatPortfolioPosition[];\n    component_icon: string;\n    currency: string;\n    error: string;\n    getPositionById: (id: number) => TFormatPortfolioPosition;\n    is_loading: boolean;\n    is_multiplier: boolean;\n    is_accumulator: boolean;\n    is_vanilla: boolean;\n    NotificationMessages: () => JSX.Element;\n    onClickCancel: () => void;\n    onClickSell: () => void;\n    onMount: () => void;\n    server_time: moment.Moment;\n    addToast: (obj: TAddToastProps) => void;\n    current_focus: string;\n    onClickRemove: () => void;\n    getContractById: (id: number) => TContractInfo;\n    is_mobile: boolean;\n    removeToast: () => void;\n    setCurrentFocus: () => void;\n    should_show_cancellation_warning: boolean;\n    toggleCancellationWarning: () => void;\n    toggleUnsupportedContractModal: () => void;\n};\n\nconst MobileRowRenderer = ({\n    row,\n    is_footer,\n    columns_map,\n    server_time,\n    onClickCancel,\n    onClickSell,\n    measure,\n    ...props\n}: TMobileRowRenderer) => {\n    React.useEffect(() => {\n        if (!is_footer) {\n            measure();\n        }\n    }, [row.contract_info?.underlying, measure, is_footer]);\n\n    if (is_footer) {\n        return (\n            <>\n                <div className='open-positions__data-list-footer--content'>\n                    <div>\n                        <DataList.Cell row={row} column={columns_map.purchase} />\n                        <DataList.Cell row={row} column={columns_map.payout} />\n                    </div>\n                    <div>\n                        <DataList.Cell\n                            className='data-list__row-cell--amount'\n                            row={row}\n                            column={columns_map.indicative}\n                        />\n                        <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.profit} />\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    const { contract_info, contract_update, type, is_sell_requested } = row;\n    const { currency, status, date_expiry, date_start, tick_count, purchase_time } = contract_info;\n    const current_tick = tick_count ? getCurrentTick(contract_info) : null;\n    const duration_type = getContractDurationType(contract_info.longcode);\n    const progress_value = (getTimePercentage(server_time, date_start ?? 0, date_expiry ?? 0) /\n        100) as TRangeFloatZeroToOne;\n\n    if (isMultiplierContract(type ?? '') || isAccumulatorContract(type ?? '')) {\n        return (\n            <PositionsDrawerCard\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency}\n                is_link_disabled\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n                status={status}\n                measure={measure}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.type} />\n                {isVanillaContract(type ?? '') ? (\n                    <ProgressSliderMobile\n                        current_tick={current_tick}\n                        className='data-list__row--vanilla'\n                        expiry_time={date_expiry}\n                        getCardLabels={getCardLabels}\n                        is_loading={false}\n                        server_time={server_time}\n                        start_time={purchase_time}\n                        ticks_count={tick_count}\n                    />\n                ) : (\n                    <ProgressBar label={duration_type} value={progress_value} />\n                )}\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.reference} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.purchase} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.indicative} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.payout} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.profit} />\n            </div>\n            <div className='data-list__row-divider' />\n            <div className='data-list__row'>\n                <ContractCard.Sell\n                    contract_info={contract_info}\n                    is_sell_requested={is_sell_requested}\n                    getCardLabels={getCardLabels}\n                    onClickSell={onClickSell}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const OpenPositionsTable = ({\n    className,\n    columns,\n    component_icon,\n    currency,\n    active_positions,\n    is_loading,\n    getRowAction,\n    mobileRowRenderer,\n    preloaderCheck,\n    row_size,\n    totals,\n    is_empty,\n}: TOpenPositionsTable) => (\n    <React.Fragment>\n        {is_loading ? (\n            <PlaceholderComponent\n                is_loading={is_loading}\n                empty_message_component={EmptyTradeHistoryMessage}\n                component_icon={component_icon}\n                localized_message={localize('You have no open positions yet.')}\n            />\n        ) : (\n            currency && (\n                <div className='reports__content'>\n                    <DesktopWrapper>\n                        <EmptyPlaceholderWrapper component_icon={component_icon} is_empty={is_empty}>\n                            <DataTable\n                                className={className}\n                                columns={columns}\n                                preloaderCheck={preloaderCheck}\n                                footer={totals}\n                                data_source={active_positions}\n                                getRowAction={getRowAction}\n                                getRowSize={() => row_size}\n                                content_loader={ReportsTableRowLoader}\n                            >\n                                <PlaceholderComponent is_loading={is_loading} />\n                            </DataTable>\n                        </EmptyPlaceholderWrapper>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <EmptyPlaceholderWrapper component_icon={component_icon} is_empty={is_empty}>\n                            <DataList\n                                className={className}\n                                data_source={active_positions}\n                                footer={totals}\n                                rowRenderer={mobileRowRenderer}\n                                getRowAction={getRowAction}\n                                row_gap={8}\n                                keyMapper={item => item?.id}\n                            >\n                                <PlaceholderComponent is_loading={is_loading} />\n                            </DataList>\n                        </EmptyPlaceholderWrapper>\n                    </MobileWrapper>\n                </div>\n            )\n        )}\n    </React.Fragment>\n);\n\nconst getRowAction = (row_obj: TRowObj) =>\n    row_obj.is_unsupported\n        ? {\n              component: (\n                  <Localize\n                      i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                      values={{\n                          trade_type_name: getUnsupportedContracts()[row_obj.type]?.name,\n                      }}\n                  />\n              ),\n          }\n        : getContractPath(row_obj.id);\n\n/*\n * After refactoring transactionHandler for creating positions,\n * purchase property in contract positions object is somehow NaN or undefined in the first few responses.\n * So we set it to true in these cases to show a preloader for the data-table-row until the correct value is set.\n */\nconst isPurchaseReceived = (item: { purchase: number }) => isNaN(item.purchase) || !item.purchase;\n\nconst getOpenPositionsTotals = (\n    active_positions_filtered: TFormatPortfolioPosition[],\n    is_multiplier_selected: boolean,\n    is_accumulator_selected: boolean\n) => {\n    let totals: TTotals;\n\n    if (is_multiplier_selected) {\n        let ask_price = 0;\n        let profit = 0;\n        let buy_price = 0;\n        let bid_price = 0;\n        let purchase = 0;\n\n        active_positions_filtered.forEach(portfolio_pos => {\n            buy_price += Number(portfolio_pos.contract_info.buy_price);\n            bid_price += Number(portfolio_pos.contract_info.bid_price);\n            purchase += Number(portfolio_pos.purchase);\n            if (portfolio_pos.contract_info) {\n                const prices = {\n                    bid_price: portfolio_pos.contract_info.bid_price ?? 0,\n                    buy_price: portfolio_pos.contract_info.buy_price ?? 0,\n                };\n                profit += getTotalProfit(prices);\n\n                if (portfolio_pos.contract_info.cancellation) {\n                    ask_price += portfolio_pos.contract_info.cancellation.ask_price || 0;\n                }\n            }\n        });\n        totals = {\n            contract_info: {\n                profit,\n                buy_price,\n                bid_price,\n            },\n            purchase,\n        };\n\n        if (ask_price > 0) {\n            if (totals.contract_info)\n                totals.contract_info.cancellation = {\n                    ask_price,\n                };\n        }\n    } else if (is_accumulator_selected) {\n        let buy_price = 0;\n        let bid_price = 0;\n        let take_profit = 0;\n        let profit = 0;\n\n        active_positions_filtered?.forEach(({ contract_info }) => {\n            buy_price += +contract_info.buy_price;\n            bid_price += +contract_info.bid_price;\n            take_profit += contract_info.limit_order?.take_profit?.order_amount;\n            if (contract_info) {\n                profit += getTotalProfit(contract_info);\n            }\n        });\n        totals = {\n            contract_info: {\n                buy_price,\n                bid_price,\n                profit,\n                limit_order: {\n                    take_profit: {\n                        order_amount: take_profit,\n                    },\n                },\n            },\n            purchase: buy_price,\n        };\n    } else {\n        let indicative = 0;\n        let purchase = 0;\n        let profit_loss = 0;\n        let payout = 0;\n\n        active_positions_filtered?.forEach(portfolio_pos => {\n            indicative += +portfolio_pos.indicative;\n            purchase += Number(portfolio_pos.purchase);\n            profit_loss += Number(portfolio_pos.profit_loss);\n            payout += Number(portfolio_pos.payout);\n        });\n        totals = {\n            indicative,\n            purchase,\n            profit_loss,\n            payout,\n        };\n    }\n    return totals;\n};\n\nconst OpenPositions = ({\n    active_positions,\n    component_icon,\n    currency,\n    error,\n    getPositionById,\n    is_accumulator,\n    is_loading,\n    is_multiplier,\n    is_vanilla,\n    NotificationMessages,\n    onClickCancel,\n    onClickSell,\n    onMount,\n    server_time,\n    ...props\n}: TOpenPositions) => {\n    const [has_accumulator_contract, setHasAccumulatorContract] = React.useState(false);\n    const [has_multiplier_contract, setHasMultiplierContract] = React.useState(false);\n    const previous_active_positions = usePrevious(active_positions);\n    const contract_types = [\n        { text: localize('Options'), is_default: !is_multiplier && !is_accumulator },\n        { text: localize('Multipliers'), is_default: is_multiplier },\n        { text: localize('Accumulators'), is_default: is_accumulator },\n    ];\n    const [contract_type_value, setContractTypeValue] = React.useState(\n        contract_types.find(type => type.is_default)?.text || localize('Options')\n    );\n    const accumulator_rates = [localize('All growth rates'), '1%', '2%', '3%', '4%', '5%'];\n    const [accumulator_rate, setAccumulatorRate] = React.useState(accumulator_rates[0]);\n    const is_accumulator_selected = contract_type_value === contract_types[2].text;\n    const is_multiplier_selected = contract_type_value === contract_types[1].text;\n    const contract_types_list = contract_types.map(({ text }) => ({ text, value: text }));\n    const accumulators_rates_list = accumulator_rates.map(value => ({ text: value, value }));\n    const active_positions_filtered = active_positions?.filter(({ contract_info }) => {\n        if (contract_info) {\n            if (is_multiplier_selected) return isMultiplierContract(contract_info.contract_type);\n            if (is_accumulator_selected)\n                return (\n                    isAccumulatorContract(contract_info.contract_type) &&\n                    (`${getGrowthRatePercentage(contract_info.growth_rate)}%` === accumulator_rate ||\n                        !accumulator_rate.includes('%'))\n                );\n            return (\n                !isMultiplierContract(contract_info.contract_type) &&\n                !isAccumulatorContract(contract_info.contract_type)\n            );\n        }\n        return true;\n    });\n    const active_positions_filtered_totals = getOpenPositionsTotals(\n        active_positions_filtered,\n        is_multiplier_selected,\n        is_accumulator_selected\n    );\n\n    React.useEffect(() => {\n        /*\n         * For mobile, we show portfolio stepper in header even for reports pages.\n         * `onMount` in portfolio store will be invoked from portfolio stepper component in `trade-header-extensions.jsx`\n         */\n\n        onMount();\n        checkForAccuAndMultContracts();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        checkForAccuAndMultContracts(previous_active_positions);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [previous_active_positions]);\n\n    const checkForAccuAndMultContracts = (prev_active_positions: TFormatPortfolioPosition[] = []) => {\n        if (active_positions === prev_active_positions) return;\n        if (!has_accumulator_contract) {\n            setHasAccumulatorContract(\n                active_positions.some(({ contract_info }) => isAccumulatorContract(contract_info?.contract_type))\n            );\n        }\n        if (!has_multiplier_contract) {\n            setHasMultiplierContract(\n                active_positions.some(({ contract_info }) => isMultiplierContract(contract_info?.contract_type))\n            );\n        }\n    };\n\n    if (error) return <p>{error}</p>;\n\n    const getColumns = () => {\n        if (is_multiplier_selected) {\n            return getMultiplierOpenPositionsColumnsTemplate({\n                currency,\n                onClickCancel,\n                onClickSell,\n                getPositionById,\n                server_time,\n            });\n        }\n        if (is_accumulator_selected) {\n            return getAccumulatorOpenPositionsColumnsTemplate({\n                currency,\n                onClickSell,\n                getPositionById,\n            });\n        }\n        return getOpenPositionsColumnsTemplate(currency);\n    };\n\n    const columns = getColumns();\n\n    const columns_map = {} as Record<string, TColumnsMapElement>;\n    columns.forEach(e => {\n        columns_map[e.col_index] = e;\n    });\n\n    const mobileRowRenderer = (args: TMobileRowRenderer) => (\n        <MobileRowRenderer\n            {...args}\n            columns_map={columns_map}\n            server_time={server_time}\n            onClickCancel={onClickCancel}\n            onClickSell={onClickSell}\n            {...props}\n        />\n    );\n\n    const shared_props = {\n        active_positions: active_positions_filtered,\n        component_icon,\n        currency,\n        is_loading,\n        mobileRowRenderer,\n        getRowAction,\n        preloaderCheck: isPurchaseReceived,\n        totals: active_positions_filtered_totals,\n    };\n\n    const getOpenPositionsTable = () => {\n        let classname = 'open-positions';\n        let row_size = isMobile() ? 5 : 63;\n\n        if (is_accumulator_selected) {\n            classname = 'open-positions-accumulator open-positions';\n            row_size = isMobile() ? 3 : 68;\n        } else if (is_multiplier_selected) {\n            classname = 'open-positions-multiplier open-positions';\n            row_size = isMobile() ? 3 : 68;\n        }\n\n        return (\n            <OpenPositionsTable\n                className={classname}\n                columns={columns}\n                is_empty={active_positions_filtered.length === 0}\n                row_size={row_size}\n                {...shared_props}\n            />\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <NotificationMessages />\n            {active_positions.length !== 0 && (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <div\n                            className={\n                                is_accumulator_selected\n                                    ? 'open-positions__accumulator-container'\n                                    : 'open-positions__contract-types-selector-container'\n                            }\n                        >\n                            <div className='open-positions__accumulator-container__contract-dropdown'>\n                                <Dropdown\n                                    is_align_text_left\n                                    name='contract_types'\n                                    list={contract_types_list}\n                                    value={contract_type_value}\n                                    onChange={e => setContractTypeValue(e.target.value)}\n                                />\n                            </div>\n                            {is_accumulator_selected && (\n                                <div className='open-positions__accumulator-container__rates-dropdown'>\n                                    <Dropdown\n                                        is_align_text_left\n                                        name='accumulator_rates'\n                                        list={accumulators_rates_list}\n                                        value={accumulator_rate}\n                                        onChange={e => setAccumulatorRate(e.target.value)}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <div\n                            className={\n                                is_accumulator_selected\n                                    ? 'open-positions__accumulator-container--mobile'\n                                    : 'open-positions__contract-types-selector-container--mobile'\n                            }\n                        >\n                            <SelectNative\n                                className='open-positions__accumulator-container-mobile__contract-dropdown'\n                                list_items={contract_types_list}\n                                value={contract_type_value}\n                                should_show_empty_option={false}\n                                onChange={e => setContractTypeValue(e.target.value)}\n                            />\n                            {is_accumulator_selected && (\n                                <SelectNative\n                                    className='open-positions__accumulator-container--mobile__rates-dropdown'\n                                    list_items={accumulators_rates_list}\n                                    value={accumulator_rate}\n                                    should_show_empty_option={false}\n                                    onChange={e => setAccumulatorRate(e.target.value)}\n                                />\n                            )}\n                        </div>\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n            {getOpenPositionsTable()}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(\n    connect(({ client, common, ui, portfolio, contract_trade }: TRootStore) => ({\n        active_positions: portfolio.active_positions,\n        currency: client.currency,\n        error: portfolio.error,\n        getPositionById: portfolio.getPositionById,\n        is_accumulator: portfolio.is_accumulator,\n        is_loading: portfolio.is_loading,\n        is_multiplier: portfolio.is_multiplier,\n        NotificationMessages: ui.notification_messages_ui,\n        onClickCancel: portfolio.onClickCancel,\n        onClickSell: portfolio.onClickSell,\n        onMount: portfolio.onMount,\n        server_time: common.server_time,\n        addToast: ui.addToast,\n        current_focus: ui.current_focus,\n        onClickRemove: portfolio.removePositionById,\n        getContractById: contract_trade.getContractById,\n        is_mobile: ui.is_mobile,\n        removeToast: ui.removeToast,\n        setCurrentFocus: ui.setCurrentFocus,\n        should_show_cancellation_warning: ui.should_show_cancellation_warning,\n        toggleCancellationWarning: ui.toggleCancellationWarning,\n        toggleUnsupportedContractModal: ui.toggleUnsupportedContractModal,\n    }))(OpenPositions)\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, DatePicker, Icon, InputField, MobileDialog, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\nimport { TInputDateRange } from 'Types';\n\ntype TRadioButton = {\n    id: string;\n    className?: string;\n    selected_value?: string;\n    value?: string;\n    label?: string;\n    onChange: (value: { label?: string; value?: string }) => void;\n};\n\nexport const RadioButton = ({ id, className, selected_value, value, label, onChange }: TRadioButton) => {\n    return (\n        <label\n            htmlFor={id}\n            className={classNames('composite-calendar-modal__radio', className, {\n                'composite-calendar-modal__radio--selected': selected_value === value,\n            })}\n            onClick={() => onChange({ label, value })}\n        >\n            <input className='composite-calendar-modal__radio-input' id={id} type='radio' value={value} />\n            <span\n                className={classNames('composite-calendar-modal__radio-circle', {\n                    'composite-calendar-modal__radio-circle--selected': selected_value === value,\n                })}\n            />\n            <Text\n                as='p'\n                color='prominent'\n                size='xs'\n                line_height='unset'\n                weight={selected_value === value ? 'bold' : 'normal'}\n            >\n                {label}\n            </Text>\n        </label>\n    );\n};\nconst CUSTOM_KEY = 'custom';\n\ntype TCompositeCalendarMobile = {\n    input_date_range: TInputDateRange;\n    current_focus: string;\n    duration_list: Array<TInputDateRange>;\n    onChange: (\n        value: { from?: moment.Moment; to?: moment.Moment; is_batch?: boolean },\n        extra_data?: { date_range: TInputDateRange }\n    ) => void;\n    setCurrentFocus: (focus: string) => void;\n    from: number;\n    to: number;\n};\n\nconst CompositeCalendarMobile = React.memo(\n    ({\n        input_date_range,\n        current_focus,\n        duration_list,\n        onChange,\n        setCurrentFocus,\n        from,\n        to,\n    }: TCompositeCalendarMobile) => {\n        const date_range = input_date_range || duration_list.find(range => range.value === 'all_time');\n\n        const [from_date, setFrom] = React.useState(from ? toMoment(from).format('YYYY-MM-DD') : undefined);\n        const [to_date, setTo] = React.useState(to ? toMoment(to).format('YYYY-MM-DD') : undefined);\n        const [is_open, setIsOpen] = React.useState(false);\n\n        const [applied_date_range, setAppliedDateRange] = React.useState(date_range);\n        const [selected_date_range, setSelectedDateRange] = React.useState(date_range);\n        const today = toMoment().format('YYYY-MM-DD');\n\n        const selectDateRange = (_selected_date_range: TInputDateRange, is_today?: boolean) => {\n            const new_from = _selected_date_range.duration;\n            onChange(\n                {\n                    from:\n                        is_today || new_from\n                            ? toMoment().startOf('day').subtract(new_from, 'day').add(1, 's')\n                            : undefined,\n                    to: toMoment().endOf('day'),\n                    is_batch: true,\n                },\n                {\n                    date_range: _selected_date_range,\n                }\n            );\n        };\n\n        const selectCustomDateRange = () => {\n            const new_from = from_date || to_date || today;\n            const new_to = to_date || today;\n\n            const new_date_range = Object.assign(selected_date_range, {\n                label: `${toMoment(new_from).format('DD MMM YYYY')} - ${toMoment(new_to).format('DD MMM YYYY')}`,\n            });\n\n            onChange(\n                {\n                    from: toMoment(new_from).startOf('day').add(1, 's'),\n                    to: toMoment(new_to).endOf('day'),\n                    is_batch: true,\n                },\n                {\n                    date_range: new_date_range,\n                }\n            );\n        };\n\n        const applyDateRange = () => {\n            if (selected_date_range.onClick) {\n                selectDateRange(selected_date_range);\n            } else if (selected_date_range.value === CUSTOM_KEY) {\n                selectCustomDateRange();\n            }\n            setAppliedDateRange(selected_date_range);\n            setIsOpen(false);\n        };\n\n        const selectToday = () => {\n            const new_date_range = {\n                duration: 0,\n                label: localize('Today'),\n            };\n            selectDateRange(new_date_range, true);\n            setAppliedDateRange(new_date_range);\n            setSelectedDateRange(new_date_range);\n            setIsOpen(false);\n        };\n\n        const selectDate = (e: React.ChangeEvent<HTMLInputElement>, key: string) => {\n            setSelectedDateRange({ value: CUSTOM_KEY });\n\n            if (key === 'from') setFrom(e.target?.value);\n            if (key === 'to') setTo(e.target?.value);\n        };\n\n        const getMobileFooter = () => {\n            return (\n                <div className='composite-calendar-modal__actions'>\n                    <Button\n                        className='composite-calendar-modal__actions__cancel'\n                        text={localize('Cancel')}\n                        onClick={() => setIsOpen(false)}\n                        has_effect\n                        secondary\n                        large\n                    />\n                    <Button\n                        className='composite-calendar-modal__actions__ok'\n                        text={localize('OK')}\n                        onClick={applyDateRange}\n                        has_effect\n                        primary\n                        large\n                    />\n                </div>\n            );\n        };\n\n        const onDateRangeChange = (_date_range: TInputDateRange) => {\n            setSelectedDateRange(\n                duration_list.find(range => _date_range && range.value === _date_range.value) || _date_range\n            );\n        };\n\n        const openDialog = () => {\n            setSelectedDateRange(applied_date_range);\n            setIsOpen(true);\n        };\n\n        return (\n            <React.Fragment>\n                <div className='composite-calendar__input-fields composite-calendar__input-fields--fill'>\n                    <InputField\n                        id='dt_calendar_input'\n                        current_focus={current_focus}\n                        is_read_only={true}\n                        icon={() => <Icon icon='IcCalendarDatefrom' className='inline-icon' />}\n                        onClick={openDialog}\n                        setCurrentFocus={setCurrentFocus}\n                        value={applied_date_range.label}\n                    />\n                </div>\n                <MobileDialog\n                    portal_element_id='modal_root'\n                    title={localize('Please select duration')}\n                    visible={is_open}\n                    has_content_scroll\n                    onClose={() => setIsOpen(false)}\n                    content_height_offset='94px'\n                    footer={getMobileFooter()}\n                >\n                    <div className='composite-calendar-modal'>\n                        <div className='composite-calendar-modal__radio-group'>\n                            {duration_list.map(duration => (\n                                <RadioButton\n                                    id={`composite-calendar-modal__radio__${duration.value}`}\n                                    key={duration.value}\n                                    value={duration.value}\n                                    label={duration.label}\n                                    selected_value={selected_date_range.value}\n                                    onChange={onDateRangeChange}\n                                />\n                            ))}\n                        </div>\n                        <div className='composite-calendar-modal__custom'>\n                            <RadioButton\n                                id={'composite-calendar-modal__custom-radio'}\n                                className='composite-calendar-modal__custom-radio'\n                                value={CUSTOM_KEY}\n                                label={localize('Custom')}\n                                selected_value={selected_date_range.value}\n                                onChange={onDateRangeChange}\n                            />\n\n                            <div className='composite-calendar-modal__custom-date-range'>\n                                <DatePicker\n                                    className='composite-calendar-modal__custom-date-range-start-date'\n                                    is_nativepicker={true}\n                                    placeholder={localize('Start date')}\n                                    value={from_date}\n                                    max_date={to_date || today}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => selectDate(e, 'from')}\n                                />\n                                <DatePicker\n                                    className='composite-calendar-modal__custom-date-range-end-date'\n                                    is_nativepicker={true}\n                                    placeholder={localize('End date')}\n                                    value={to_date}\n                                    max_date={today}\n                                    min_date={from_date}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => selectDate(e, 'to')}\n                                />\n                            </div>\n                        </div>\n                        <Button\n                            className='composite-calendar-modal__actions-today'\n                            text={localize('Back to today')}\n                            onClick={selectToday}\n                            has_effect\n                            tertiary\n                            large\n                        />\n                    </div>\n                </MobileDialog>\n            </React.Fragment>\n        );\n    }\n);\n\nCompositeCalendarMobile.displayName = 'CompositeCalendarMobile';\nexport default CompositeCalendarMobile;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TListItem = {\n    label: string | React.ReactElement | Array<string>;\n    is_active: boolean;\n    onClick: () => void;\n};\n\nconst ListItem = ({ onClick, is_active, label }: TListItem) => (\n    <li\n        className={classNames({\n            'composite-calendar__prepopulated-list--is-active': is_active,\n        })}\n        onClick={onClick}\n    >\n        {label}\n    </li>\n);\n\nexport default ListItem;\n","import React from 'react';\nimport { toMoment } from '@deriv/shared';\nimport ListItem from './list-item';\n\ntype TItem = {\n    value: string;\n    label: string;\n    onClick: () => void;\n    duration: number;\n};\n\ntype TSideList = {\n    from: number;\n    items: Array<TItem>;\n    to: number;\n};\n\nconst isActive = (from: number, to: number, flag: number) => {\n    if (flag === 0) {\n        return toMoment().endOf('day').unix() === to && from === null;\n    }\n    return Math.ceil(to / 86400) - Math.ceil(from / 86400) === flag;\n};\n\nconst SideList = ({ items, from, to }: TSideList) => (\n    <ul className='composite-calendar__prepopulated-list'>\n        {items.map(item => {\n            const { duration, label, onClick } = item;\n            const is_active = isActive(from, to, duration);\n            return <ListItem key={duration} is_active={is_active} label={label} onClick={onClick} />;\n        })}\n    </ul>\n);\n\nexport default SideList;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TCalendarIcon = {\n    onClick: () => void;\n};\n\nconst CalendarIcon = ({ onClick }: TCalendarIcon) => (\n    <Icon onClick={onClick} icon='IcCalendarDatefrom' className='inline-icon' />\n);\n\nexport default CalendarIcon;\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport { DesktopWrapper, InputField, MobileWrapper, useOnClickOutside } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { daysFromTodayTo, toMoment } from '@deriv/shared';\nimport { connect } from 'Stores/connect';\nimport type { TCoreStores } from '@deriv/stores/types';\nimport CompositeCalendarMobile from './composite-calendar-mobile';\nimport SideList from './side-list';\nimport CalendarIcon from './calendar-icon';\nimport TwoMonthPicker from './two-month-picker';\nimport moment from 'moment';\n\ntype TCompositeCalendar = {\n    current_focus: string;\n    onChange: (values: { to?: moment.Moment; from?: moment.Moment; is_batch?: boolean }) => void;\n    setCurrentFocus: () => void;\n    to: number;\n    from: number;\n};\n\ntype TTwoMonthPickerLoadable = {\n    onChange: (date: moment.Moment) => void;\n    isPeriodDisabled: (date: moment.Moment) => boolean;\n    value: number;\n};\n\nconst TwoMonthPickerLoadable = Loadable<TTwoMonthPickerLoadable, typeof TwoMonthPicker>({\n    loader: () => import(/* webpackChunkName: \"two-month-picker\" */ './two-month-picker'),\n    loading: () => null,\n    render(loaded, props) {\n        const Component = loaded.default;\n        return <Component {...props} />;\n    },\n});\n\nconst CompositeCalendar: React.FC<TCompositeCalendar> = props => {\n    const { current_focus, onChange, setCurrentFocus, to, from } = props;\n\n    const [show_to, setShowTo] = React.useState(false);\n    const [show_from, setShowFrom] = React.useState(false);\n    const [list] = React.useState([\n        {\n            value: 'all_time',\n            label: localize('All time'),\n            onClick: () => selectDateRange(),\n            duration: 0,\n        },\n        {\n            value: 'last_7_days',\n            label: localize('Last 7 days'),\n            onClick: () => selectDateRange(7),\n            duration: 7,\n        },\n        {\n            value: 'last_30_days',\n            label: localize('Last 30 days'),\n            onClick: () => selectDateRange(30),\n            duration: 30,\n        },\n        {\n            value: 'last_60_days',\n            label: localize('Last 60 days'),\n            onClick: () => selectDateRange(60),\n            duration: 60,\n        },\n        {\n            value: 'last_quarter',\n            label: localize('Last quarter'),\n            onClick: () => selectDateRange(90),\n            duration: 90,\n        },\n    ]);\n\n    const wrapper_ref = React.useRef<HTMLInputElement>(null);\n\n    const validateClickOutside = (event: MouseEvent) => !wrapper_ref.current?.contains(event.target as Node);\n\n    const selectDateRange = (new_from?: number) => {\n        hideCalendar();\n        onChange({\n            from: new_from ? toMoment().startOf('day').subtract(new_from, 'day').add(1, 's') : undefined,\n            to: toMoment().endOf('day'),\n            is_batch: true,\n        });\n    };\n\n    const getToDateLabel = () => {\n        const date = toMoment(to);\n        return daysFromTodayTo(date) === 0 ? localize('Today') : date.format('MMM, DD YYYY');\n    };\n\n    const getFromDateLabel = () => {\n        const date = toMoment(from);\n        return from ? date.format('MMM, DD YYYY') : '';\n    };\n\n    const hideCalendar = () => {\n        setShowFrom(false);\n        setShowTo(false);\n    };\n\n    const showCalendar = (e: string) => {\n        if (e === 'from') {\n            setShowFrom(true);\n        }\n        if (e === 'to') {\n            setShowTo(true);\n        }\n    };\n\n    useOnClickOutside(\n        wrapper_ref,\n        event => {\n            event?.stopPropagation();\n            event?.preventDefault();\n            hideCalendar();\n        },\n        validateClickOutside\n    );\n\n    const setToDate = (date: moment.Moment) => {\n        onChange({ to: toMoment(date).endOf('day') });\n    };\n\n    const setFromDate = (date: moment.Moment) => {\n        onChange({ from: toMoment(date) });\n        hideCalendar();\n    };\n\n    const isPeriodDisabledTo = (date: moment.Moment) => {\n        return date.unix() < from || date.unix() > toMoment().endOf('day').unix();\n    };\n\n    const isPeriodDisabledFrom = (date: moment.Moment) => date.unix() > to;\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>\n                <div id='dt_composite_calendar_inputs' className='composite-calendar__input-fields'>\n                    <InputField\n                        id='dt_calendar_input_from'\n                        current_focus={current_focus}\n                        is_read_only\n                        placeholder={localize('Date from')}\n                        icon={CalendarIcon}\n                        onClick={() => showCalendar('from')}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getFromDateLabel()}\n                    />\n                    <InputField\n                        id='dt_calendar_input_to'\n                        current_focus={current_focus}\n                        is_read_only\n                        placeholder={localize('Date to')}\n                        icon={CalendarIcon}\n                        onClick={() => showCalendar('to')}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getToDateLabel()}\n                    />\n                </div>\n                {show_to && (\n                    <div className='composite-calendar' ref={wrapper_ref}>\n                        <SideList from={from} to={to} items={list} />\n                        <TwoMonthPickerLoadable value={to} onChange={setToDate} isPeriodDisabled={isPeriodDisabledTo} />\n                    </div>\n                )}\n                {show_from && (\n                    <div className='composite-calendar' ref={wrapper_ref}>\n                        <SideList from={from} to={to} items={list} />\n                        <TwoMonthPickerLoadable\n                            value={from}\n                            onChange={setFromDate}\n                            isPeriodDisabled={isPeriodDisabledFrom}\n                        />\n                    </div>\n                )}\n            </DesktopWrapper>\n            <MobileWrapper>\n                <CompositeCalendarMobile duration_list={list} {...props} />\n            </MobileWrapper>\n        </React.Fragment>\n    );\n};\n\nCompositeCalendar.displayName = 'CompositeCalendar';\n\nexport default React.memo(\n    connect(({ ui }: TCoreStores) => ({\n        current_focus: ui.current_focus,\n        setCurrentFocus: ui.setCurrentFocus,\n    }))(CompositeCalendar)\n);\n","import CompositeCalendar from './composite-calendar';\n\nexport default CompositeCalendar;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TReportsMeta = {\n    filter_component: React.ReactNode;\n    optional_component?: React.ReactNode;\n    className?: string;\n    is_statement?: boolean;\n};\n\nconst ReportsMeta = ({ filter_component, className, optional_component, is_statement }: TReportsMeta) => {\n    return (\n        <div className={classNames('reports__meta', className)}>\n            {optional_component}\n            {filter_component && (\n                <div\n                    className={classNames('reports__meta-filter', {\n                        'reports__meta-filter--statement': is_statement,\n                    })}\n                >\n                    {filter_component}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { ReportsMeta };\n","import classNames from 'classnames';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { DesktopWrapper, MobileWrapper, DataList, DataTable } from '@deriv/components';\nimport {\n    extractInfoFromShortcode,\n    isForwardStarting,\n    getContractPath,\n    getSupportedContracts,\n    getUnsupportedContracts,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport CompositeCalendar from '../Components/Form/CompositeCalendar';\nimport {\n    TInputDateRange,\n    TColIndex,\n    TColumnTemplateType,\n    TSupportedContractType,\n    TUnsupportedContractType,\n} from 'Types';\n\nimport { connect } from 'Stores/connect';\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport { ReportsMeta } from '../Components/reports-meta';\nimport { getProfitTableColumnsTemplate } from 'Constants/data-table-constants';\nimport { TRootStore } from 'Stores/index';\nimport moment from 'moment/moment';\n\ntype TProfitTable = {\n    component_icon: string;\n    currency: string;\n    data: Array<{ [key: string]: string }>;\n    date_from: number;\n    date_to: number;\n    error: string;\n    filtered_date_range: TInputDateRange;\n    is_empty: boolean;\n    is_loading: boolean;\n    is_switching: boolean;\n    handleDateChange: (values: { [key: string]: moment.Moment }) => void;\n    handleScroll: (ev: React.UIEvent<HTMLElement>) => void;\n    has_selected_date: boolean;\n    onMount: VoidFunction;\n    onUnmount: VoidFunction;\n    totals: React.ReactNode;\n};\n\nconst getRowAction = (row_obj: { [key: string]: string }) => {\n    const contract_type = extractInfoFromShortcode(row_obj?.shortcode)?.category?.toString().toUpperCase();\n    return getSupportedContracts()[contract_type as TSupportedContractType] &&\n        !isForwardStarting(row_obj.shortcode, +row_obj.purchase_time_unix)\n        ? getContractPath(+row_obj.contract_id)\n        : {\n              component: (\n                  <Localize\n                      i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                      values={{\n                          trade_type_name: getUnsupportedContracts()[contract_type as TUnsupportedContractType]?.name,\n                      }}\n                  />\n              ),\n          };\n};\n\nconst ProfitTable = ({\n    component_icon,\n    currency,\n    data,\n    date_from,\n    date_to,\n    error,\n    filtered_date_range,\n    is_empty,\n    is_loading,\n    is_switching,\n    handleDateChange,\n    handleScroll,\n    has_selected_date,\n    onMount,\n    onUnmount,\n    totals,\n}: TProfitTable) => {\n    React.useEffect(() => {\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (error) return <p>{error}</p>;\n\n    const filter_component = (\n        <CompositeCalendar\n            input_date_range={filtered_date_range}\n            onChange={handleDateChange}\n            from={date_from}\n            to={date_to}\n        />\n    );\n\n    const columns = getProfitTableColumnsTemplate(currency, data.length);\n\n    const columns_map = Object.fromEntries(columns.map(column => [column.col_index, column])) as {\n        [key in TColIndex]: TColumnTemplateType;\n    };\n\n    const mobileRowRenderer = ({ row, is_footer }: { row: any; is_footer?: boolean }) => {\n        const duration_type = /^(MULTUP|MULTDOWN)/.test(row.shortcode) ? '' : row.duration_type;\n        const duration_classname = duration_type ? `duration-type__${duration_type.toLowerCase()}` : '';\n\n        if (is_footer) {\n            return (\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.action_type} is_footer={is_footer} />\n                    <DataList.Cell\n                        className='data-list__row-cell--amount'\n                        row={row}\n                        column={columns_map.profit_loss}\n                        is_footer={is_footer}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.action_type} />\n                    <div className={classNames('duration-type', duration_classname)}>\n                        <div className={classNames('duration-type__background', `${duration_classname}__background`)} />\n                        <span className={`${duration_classname}__label`}>{localize(duration_type)}</span>\n                    </div>\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.transaction_id} />\n                    <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.purchase_time} />\n                    <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.buy_price} />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.sell_time} />\n                    <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.sell_price} />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.profit_loss} />\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <ReportsMeta filter_component={filter_component} className='profit-table__filter' />\n            {is_switching ? (\n                <PlaceholderComponent is_loading />\n            ) : (\n                <React.Fragment>\n                    {data.length === 0 || is_empty ? (\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                            has_selected_date={has_selected_date}\n                            is_empty={is_empty}\n                            empty_message_component={EmptyTradeHistoryMessage}\n                            component_icon={component_icon}\n                            localized_message={localize('You have no trading activity yet.')}\n                            localized_period_message={localize(\n                                \"You've made no transactions of this type during this period.\"\n                            )}\n                        />\n                    ) : (\n                        <div className='reports__content'>\n                            <DesktopWrapper>\n                                <DataTable\n                                    className='profit-table'\n                                    data_source={data}\n                                    columns={columns}\n                                    onScroll={handleScroll}\n                                    footer={totals}\n                                    is_empty={is_empty}\n                                    getRowAction={getRowAction}\n                                    getRowSize={() => 63}\n                                    content_loader={ReportsTableRowLoader}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataTable>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <DataList\n                                    className='profit-table'\n                                    data_source={data}\n                                    rowRenderer={mobileRowRenderer}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    footer={totals}\n                                    row_gap={8}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataList>\n                            </MobileWrapper>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ modules, client }: TRootStore) => ({\n    currency: client.currency,\n    data: modules.profit_table.data,\n    date_from: modules.profit_table.date_from,\n    date_to: modules.profit_table.date_to,\n    error: modules.profit_table.error,\n    filtered_date_range: modules.profit_table.filtered_date_range,\n    is_empty: modules.profit_table.is_empty,\n    is_loading: modules.profit_table.is_loading,\n    is_switching: client.is_switching,\n    handleDateChange: modules.profit_table.handleDateChange,\n    handleScroll: modules.profit_table.handleScroll,\n    has_selected_date: modules.profit_table.has_selected_date,\n    onMount: modules.profit_table.onMount,\n    onUnmount: modules.profit_table.onUnmount,\n    totals: modules.profit_table.totals,\n}))(withRouter(ProfitTable));\n","import React from 'react';\nimport { MobileWrapper, Money, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\n\ntype TAccountStatistics = {\n    account_statistics: {\n        total_withdrawals: number;\n        total_deposits: number;\n    };\n    currency: string;\n};\n\nconst AccountStatistics = ({ account_statistics, currency }: TAccountStatistics) => {\n    return (\n        <div className='statement__account-statistics'>\n            <div className='statement__account-statistics-item'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Total deposits')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money amount={account_statistics.total_deposits} currency={currency} />\n                    </Text>\n                </div>\n            </div>\n            <div className='statement__account-statistics-item statement__account-statistics-total-withdrawal'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Total withdrawals')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money amount={account_statistics.total_withdrawals} currency={currency} />\n                    </Text>\n                </div>\n            </div>\n            <div className='statement__account-statistics-item'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Net deposits')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money\n                            amount={account_statistics.total_deposits - account_statistics.total_withdrawals}\n                            currency={currency}\n                        />\n                    </Text>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// TODO: implement reports store TRootStore in types.ts\nexport default connect(({ modules, client }: any) => ({\n    account_statistics: modules.statement.account_statistics,\n    currency: client.currency,\n}))(AccountStatistics);\n","import React from 'react';\nimport { FilterDropdown } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport CompositeCalendar from './Form/CompositeCalendar';\nimport { TRootStore } from 'Stores/index';\n\ntype TFilterComponent = {\n    action_type: string;\n    date_from: number;\n    date_to: number;\n    filtered_date_range: {\n        duration: number;\n        label: string;\n        onClick?: () => void;\n        value?: string;\n    };\n    handleDateChange: () => void;\n    handleFilterChange: () => void;\n    suffix_icon: string;\n};\n\nconst FilterComponent = ({\n    action_type,\n    date_from,\n    date_to,\n    handleFilterChange,\n    handleDateChange,\n    filtered_date_range,\n}: TFilterComponent) => {\n    const filter_list = [\n        {\n            text: localize('All transactions'),\n            value: 'all',\n        },\n        {\n            text: localize('Buy'),\n            value: 'buy',\n        },\n        {\n            text: localize('Sell'),\n            value: 'sell',\n        },\n        {\n            text: localize('Deposit'),\n            value: 'deposit',\n        },\n        {\n            text: localize('Withdrawal'),\n            value: 'withdrawal',\n        },\n        {\n            text: localize('Transfer'),\n            value: 'transfer',\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <CompositeCalendar\n                input_date_range={filtered_date_range}\n                onChange={handleDateChange}\n                from={date_from}\n                to={date_to}\n            />\n            <FilterDropdown\n                dropdown_display_className='dc-dropdown__display--has-suffix-icon'\n                filter_list={filter_list}\n                handleFilterChange={handleFilterChange}\n                initial_selected_filter={action_type}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ modules }: TRootStore) => ({\n    action_type: modules.statement.action_type,\n    data: modules.statement.data,\n    date_from: modules.statement.date_from,\n    date_to: modules.statement.date_to,\n    filtered_date_range: modules.statement.filtered_date_range,\n    handleDateChange: modules.statement.handleDateChange,\n    handleFilterChange: modules.statement.handleFilterChange,\n}))(FilterComponent);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DesktopWrapper, MobileWrapper, DataList, DataTable, Text, Clipboard } from '@deriv/components';\nimport {\n    extractInfoFromShortcode,\n    isForwardStarting,\n    getUnsupportedContracts,\n    getContractPath,\n    getSupportedContracts,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport { connect } from 'Stores/connect';\nimport { getStatementTableColumnsTemplate } from '../Constants/data-table-constants';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport AccountStatistics from '../Components/account-statistics';\nimport FilterComponent from '../Components/filter-component';\nimport { ReportsMeta } from '../Components/reports-meta';\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport { TRootStore } from 'Stores/index';\n\ntype TGetStatementTableColumnsTemplate = ReturnType<typeof getStatementTableColumnsTemplate>;\ntype TColIndex = 'icon' | 'refid' | 'currency' | 'date' | 'action_type' | 'amount' | 'balance';\n\ntype TFormatStatementTransaction = {\n    action: string;\n    date: string;\n    display_name: string;\n    refid: number;\n    payout: string;\n    amount: string;\n    balance: string;\n    desc: string;\n    id: number;\n    app_id: number;\n    shortcode: string;\n    action_type: string;\n    purchase_time: number;\n    transaction_time: number;\n    withdrawal_details: string;\n    longcode: string;\n};\n\ntype TAction =\n    | {\n          message?: string;\n          component?: React.ReactElement;\n      }\n    | string;\n\ntype TStatement = {\n    action_type: string;\n    account_statistics: React.ComponentProps<typeof AccountStatistics>['account_statistics'];\n    component_icon: string;\n    currency: string;\n    data: TFormatStatementTransaction[];\n    date_from: number | null;\n    date_to: number | null;\n    error: string;\n    filtered_date_range: React.ComponentProps<typeof FilterComponent>['filtered_date_range'];\n    handleDateChange: () => void;\n    handleFilterChange: () => void;\n    handleScroll: () => void;\n    has_selected_date: boolean;\n    is_empty: boolean;\n    is_loading: boolean;\n    is_mx_mlt: boolean;\n    is_switching: boolean;\n    is_virtual: boolean;\n    onMount: () => void;\n    onUnmount: () => void;\n};\n\ntype TDetailsComponent = {\n    message: string;\n    action_type: string;\n};\n\nconst DetailsComponent = ({ message = '', action_type = '' }: TDetailsComponent) => {\n    const address_hash_match = /:\\s([0-9a-zA-Z]+.{25,28})/gm.exec(message.split(/,\\s/)[0]);\n    const address_hash = address_hash_match?.[1];\n    const blockchain_hash_match = /:\\s([0-9a-zA-Z]+.{25,34})/gm.exec(message.split(/,\\s/)[1]);\n    const blockchain_hash = blockchain_hash_match?.[1];\n\n    let messages = [message];\n\n    if (address_hash || blockchain_hash) {\n        const lines = message.split(/,\\s/);\n        messages = lines.map((text, index) => {\n            if (index !== lines.length - 1) {\n                return `${text}, `;\n            }\n            return text;\n        });\n    }\n\n    return (\n        <Text as='div' size='xs' className='statement__row--detail-text' align='center'>\n            {messages.map((text, index) => {\n                return (\n                    <div key={text}>\n                        {text}\n                        {blockchain_hash && index === messages.length - 1 && (\n                            <Clipboard text_copy={blockchain_hash} popoverAlignment='top' />\n                        )}\n                        {address_hash && action_type === 'withdrawal' && index === messages.length - 1 && (\n                            <Clipboard text_copy={address_hash} popoverAlignment='top' />\n                        )}\n                    </div>\n                );\n            })}\n        </Text>\n    );\n};\n\nconst getRowAction = (row_obj: TFormatStatementTransaction) => {\n    let action: TAction = {};\n    if (row_obj.id && ['buy', 'sell'].includes(row_obj.action_type)) {\n        const contract_type = extractInfoFromShortcode(row_obj.shortcode).category.toUpperCase();\n        action =\n            getSupportedContracts()[contract_type] &&\n            !isForwardStarting(row_obj.shortcode, row_obj.purchase_time || row_obj.transaction_time)\n                ? getContractPath(row_obj.id)\n                : {\n                      message: '',\n                      component: (\n                          <Localize\n                              i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                              values={{\n                                  trade_type_name: getUnsupportedContracts()[contract_type]?.name,\n                              }}\n                          />\n                      ),\n                  };\n    } else if (row_obj.action_type === 'withdrawal') {\n        if (row_obj.withdrawal_details && row_obj.longcode) {\n            action = {\n                message: `${row_obj.withdrawal_details} ${row_obj.longcode}`,\n            };\n        } else {\n            action = {\n                message: row_obj.desc,\n            };\n        }\n    } else if (row_obj.desc && ['deposit', 'transfer', 'adjustment', 'hold', 'release'].includes(row_obj.action_type)) {\n        action = {\n            message: row_obj.desc,\n        };\n    }\n\n    // add typeof check because action can be object or string\n    if (typeof action === 'object' && action?.message) {\n        action.component = <DetailsComponent message={action.message} action_type={row_obj.action_type} />;\n    }\n\n    return action;\n};\n\nconst Statement = ({\n    account_statistics,\n    action_type,\n    component_icon,\n    currency,\n    data,\n    date_from,\n    date_to,\n    error,\n    filtered_date_range,\n    handleDateChange,\n    handleFilterChange,\n    handleScroll,\n    has_selected_date,\n    is_empty,\n    is_loading,\n    is_mx_mlt,\n    is_switching,\n    is_virtual,\n    onMount,\n    onUnmount,\n}: TStatement) => {\n    React.useEffect(() => {\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (error) return <p>{error}</p>;\n\n    const columns: TGetStatementTableColumnsTemplate = getStatementTableColumnsTemplate(currency);\n    const columns_map = columns.reduce((map, item) => {\n        map[item.col_index as TColIndex] = item;\n        return map;\n    }, {} as Record<TColIndex, typeof columns[number]>);\n\n    // TODO: Export type instead of any from 'DataList' component when it migrates to tsx\n    const mobileRowRenderer = ({ row, passthrough }: any) => (\n        <React.Fragment>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.icon} passthrough={passthrough} />\n                <DataList.Cell row={row} column={columns_map.action_type} passthrough={passthrough} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.refid} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.date} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.amount} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.balance} />\n            </div>\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <ReportsMeta\n                className={is_mx_mlt ? undefined : 'reports__meta--statement'}\n                filter_component={\n                    <FilterComponent\n                        action_type={action_type}\n                        date_from={date_from}\n                        date_to={date_to}\n                        handleDateChange={handleDateChange}\n                        handleFilterChange={handleFilterChange}\n                        filtered_date_range={filtered_date_range}\n                    />\n                }\n                is_statement\n                optional_component={\n                    !is_switching &&\n                    is_mx_mlt && <AccountStatistics account_statistics={account_statistics} currency={currency} />\n                }\n            />\n            {is_switching ? (\n                <PlaceholderComponent is_loading />\n            ) : (\n                <React.Fragment>\n                    {data.length === 0 || is_empty ? (\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                            has_selected_date={has_selected_date}\n                            is_empty={is_empty}\n                            empty_message_component={EmptyTradeHistoryMessage}\n                            component_icon={component_icon}\n                            localized_message={localize('You have no transactions yet.')}\n                            localized_period_message={localize(\n                                \"You've made no transactions of this type during this period.\"\n                            )}\n                        />\n                    ) : (\n                        <div className='reports__content'>\n                            <DesktopWrapper>\n                                <DataTable\n                                    className='statement'\n                                    columns={columns}\n                                    content_loader={ReportsTableRowLoader}\n                                    data_source={data}\n                                    getRowAction={row => getRowAction(row)}\n                                    onScroll={handleScroll}\n                                    passthrough={{\n                                        isTopUp: (item: TFormatStatementTransaction) =>\n                                            is_virtual && item.action === 'Deposit',\n                                    }}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataTable>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <DataList\n                                    className='statement'\n                                    data_source={data}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    rowRenderer={mobileRowRenderer}\n                                    row_gap={8}\n                                    passthrough={{\n                                        isTopUp: (item: TFormatStatementTransaction) =>\n                                            is_virtual && item.action === 'Deposit',\n                                    }}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataList>\n                            </MobileWrapper>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(\n    connect(({ modules, client }: TRootStore) => ({\n        action_type: modules.statement.action_type,\n        account_statistics: modules.statement.account_statistics,\n        currency: client.currency,\n        data: modules.statement.data,\n        date_from: modules.statement.date_from,\n        date_to: modules.statement.date_to,\n        error: modules.statement.error,\n        filtered_date_range: modules.statement.filtered_date_range,\n        handleDateChange: modules.statement.handleDateChange,\n        handleFilterChange: modules.statement.handleFilterChange,\n        handleScroll: modules.statement.handleScroll,\n        has_selected_date: modules.statement.has_selected_date,\n        is_empty: modules.statement.is_empty,\n        is_loading: modules.statement.is_loading,\n        is_mx_mlt: client.standpoint.iom || client.standpoint.malta,\n        is_switching: client.is_switching,\n        is_virtual: client.is_virtual,\n        onMount: modules.statement.onMount,\n        onUnmount: modules.statement.onUnmount,\n    }))(Statement)\n);\n","import React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    Div100vhContainer,\n    FadeWrapper,\n    Loading,\n    MobileWrapper,\n    PageOverlay,\n    SelectNative,\n    VerticalTab,\n} from '@deriv/components';\nimport { getSelectedRoute } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { TRoute } from 'Types';\nimport 'Sass/app/modules/reports.scss';\n\ntype TList = {\n    value: React.ComponentType | typeof Redirect;\n    default?: boolean;\n    label: string;\n    icon?: string;\n    path?: string;\n};\n\ntype TReports = {\n    history: RouteComponentProps['history'];\n    location: RouteComponentProps['location'];\n    routes: TRoute[];\n};\n\nconst Reports = observer(({ history, location, routes }: TReports) => {\n    const { client, common, ui } = useStore();\n\n    const { is_logged_in, is_logging_in, setVisibilityRealityCheck } = client;\n    const { is_from_derivgo, routeBackInApp } = common;\n    const { is_reports_visible, setReportsTabIndex, reports_route_tab_index, toggleReports } = ui;\n\n    React.useEffect(() => {\n        toggleReports(true);\n        return () => {\n            setVisibilityRealityCheck(1);\n            toggleReports(false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickClose = () => routeBackInApp(history);\n\n    const handleRouteChange = (e: React.ChangeEvent<HTMLSelectElement>) => history.push(e.target.value);\n\n    const menu_options = () => {\n        const options: TList[] = [];\n\n        routes.forEach(route => {\n            options.push({\n                default: route.default,\n                icon: route.icon_component,\n                label: route.getTitle(),\n                value: route.component,\n                path: route.path,\n            });\n        });\n\n        return options;\n    };\n\n    const selected_route = getSelectedRoute({ routes, pathname: location.pathname });\n\n    if (!is_logged_in && is_logging_in) {\n        return <Loading is_fullscreen />;\n    }\n    return (\n        <FadeWrapper is_visible={is_reports_visible} className='reports-page-wrapper' keyname='reports-page-wrapper'>\n            <div className='reports'>\n                <PageOverlay header={localize('Reports')} onClickClose={onClickClose} is_from_app={is_from_derivgo}>\n                    <DesktopWrapper>\n                        <VerticalTab\n                            is_floating\n                            current_path={location.pathname}\n                            is_routed\n                            is_full_width\n                            setVerticalTabIndex={setReportsTabIndex}\n                            vertical_tab_index={selected_route.default ? 0 : reports_route_tab_index}\n                            list={menu_options()}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='reports__mobile-wrapper' height_offset='80px'>\n                            <SelectNative\n                                className='reports__route-selection'\n                                list_items={menu_options().map(option => ({\n                                    text: option.label,\n                                    value: option.path ?? '',\n                                }))}\n                                value={selected_route.path ?? ''}\n                                should_show_empty_option={false}\n                                onChange={handleRouteChange}\n                                label={''}\n                                hide_top_placeholder={false}\n                            />\n                            {selected_route?.component && (\n                                <selected_route.component icon_component={selected_route.icon_component} />\n                            )}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </PageOverlay>\n            </div>\n        </FadeWrapper>\n    );\n});\n\nexport default Reports;\n","import OpenPositions from './open-positions';\nimport ProfitTable from './profit-table';\nimport Statement from './statement';\nimport Reports from './reports';\n\nexport default {\n    OpenPositions,\n    ProfitTable,\n    Statement,\n    Reports,\n};\n"],"names":["ReportsTableRowLoader","speed","height","width","backgroundColor","foregroundColor","x","y","rx","ry","getTradeTypeName","category","is_high_low","getContractConfig","toUpperCase","name","has_selected_date","component_icon","localized_message","localized_period_message","className","Icon","data_testid","icon","color","size","Text","align","connect","common","is_loading","portfolio","server_time","contract_info","current_tick","tick_count","getCurrentTick","ProgressSlider","expiry_time","date_expiry","getCardLabels","start_time","date_start","ticks_count","getProfitOrLoss","value","replace","onClickSell","amount","currency","is_footer","is_sell_requested","React","movement","setMovement","amount_state","setAmountState","Money","Math","abs","status","DesktopWrapper","ContractCard","underlying","payload","show_description","should_show_accumulator","should_show_multiplier","is_vanilla","should_show_category_icon","shortcode","info_from_shortcode","extractInfoFromShortcode","isHighLow","shortcode_info","category_label","charAt","slice","classNames","Popover","classNameTarget","classNameBubble","alignment","message","getMarketNamesMap","is_bubble_hover_enabled","disable_target_icon","display_name","IconTradeTypes","type","toLowerCase","multiplier","growth_rate","includes","action_type","children","weight","map","buy","deposit","hold","release","sell","withdrawal","default","adjustment","transfer","is_invisible","theme","id","invisible","Array","from","inx","key","PlaceholderComponent","props","EmptyMessageComponent","empty_message_component","is_empty","propTypes","PropTypes","EmptyPlaceholderWrapper","EmptyTradeHistoryMessage","localize","MobileRowRenderer","row","columns_map","onClickCancel","measure","DataList","column","purchase","payout","indicative","profit","contract_update","purchase_time","duration_type","longcode","test","extracted","RegExp","exec","duration_text","endsWith","getContractDurationType","progress_value","getTimePercentage","isMultiplierContract","isAccumulatorContract","PositionsDrawerCard","is_link_disabled","isVanillaContract","ProgressSliderMobile","ProgressBar","label","reference","OpenPositionsTable","columns","active_positions","getRowAction","mobileRowRenderer","preloaderCheck","row_size","totals","DataTable","footer","data_source","getRowSize","content_loader","MobileWrapper","rowRenderer","row_gap","keyMapper","item","row_obj","is_unsupported","component","Localize","i18n_default_text","values","trade_type_name","getUnsupportedContracts","getContractPath","isPurchaseReceived","isNaN","withRouter","client","ui","contract_trade","error","getPositionById","is_accumulator","is_multiplier","NotificationMessages","notification_messages_ui","onMount","addToast","current_focus","onClickRemove","removePositionById","getContractById","is_mobile","removeToast","setCurrentFocus","should_show_cancellation_warning","toggleCancellationWarning","toggleUnsupportedContractModal","has_accumulator_contract","setHasAccumulatorContract","has_multiplier_contract","setHasMultiplierContract","previous_active_positions","usePrevious","contract_types","text","is_default","find","contract_type_value","setContractTypeValue","accumulator_rates","accumulator_rate","setAccumulatorRate","is_accumulator_selected","is_multiplier_selected","contract_types_list","accumulators_rates_list","active_positions_filtered","filter","contract_type","getGrowthRatePercentage","active_positions_filtered_totals","ask_price","buy_price","bid_price","forEach","portfolio_pos","Number","prices","getTotalProfit","cancellation","take_profit","limit_order","order_amount","profit_loss","getOpenPositionsTotals","checkForAccuAndMultContracts","some","title","isMobile","col_index","renderCellContent","getCurrencyDisplayCode","cancellation_price","shouldShowCancellation","cell_value","components","stop_loss","has_sign","total_profit","contract_id","getMultiplierOpenPositionsColumnsTemplate","ContractCardSell","getAccumulatorOpenPositionsColumnsTemplate","renderHeader","non_vanilla_payout","barrier","toFixed","getOpenPositionsColumnsTemplate","e","classname","shared_props","args","length","Dropdown","is_align_text_left","list","onChange","target","SelectNative","list_items","should_show_empty_option","RadioButton","selected_value","htmlFor","onClick","as","line_height","CUSTOM_KEY","CompositeCalendarMobile","input_date_range","duration_list","to","date_range","range","toMoment","format","undefined","from_date","setFrom","to_date","setTo","is_open","setIsOpen","applied_date_range","setAppliedDateRange","selected_date_range","setSelectedDateRange","today","selectDateRange","_selected_date_range","is_today","new_from","duration","startOf","subtract","add","endOf","is_batch","applyDateRange","new_to","new_date_range","Object","assign","selectDate","onDateRangeChange","_date_range","InputField","is_read_only","MobileDialog","portal_element_id","visible","has_content_scroll","onClose","content_height_offset","Button","has_effect","secondary","large","primary","DatePicker","is_nativepicker","placeholder","max_date","min_date","tertiary","displayName","is_active","items","flag","unix","ceil","isActive","TwoMonthPickerLoadable","Loadable","loader","loading","render","loaded","Component","CompositeCalendar","show_to","setShowTo","show_from","setShowFrom","wrapper_ref","hideCalendar","showCalendar","useOnClickOutside","event","stopPropagation","preventDefault","current","contains","date","CalendarIcon","daysFromTodayTo","getToDateLabel","ref","isPeriodDisabled","ReportsMeta","filter_component","optional_component","is_statement","toString","getSupportedContracts","isForwardStarting","purchase_time_unix","modules","data","profit_table","date_from","date_to","filtered_date_range","is_switching","handleDateChange","handleScroll","onUnmount","items_count","item_count","transaction_id","getProfitTableColumnsTemplate","fromEntries","onScroll","duration_classname","sell_time","sell_price","account_statistics","statement","total_deposits","total_withdrawals","handleFilterChange","filter_list","FilterDropdown","dropdown_display_className","initial_selected_filter","DetailsComponent","address_hash_match","split","address_hash","blockchain_hash_match","blockchain_hash","messages","lines","index","Clipboard","text_copy","popoverAlignment","action","transaction_time","withdrawal_details","desc","is_mx_mlt","standpoint","iom","malta","is_virtual","passthrough","isTopUp","app_id","Label","mode","getStatementTableColumnsTemplate","reduce","refid","balance","OpenPositions","ProfitTable","Statement","Reports","observer","history","location","routes","useStore","is_logged_in","is_logging_in","setVisibilityRealityCheck","is_from_derivgo","routeBackInApp","is_reports_visible","setReportsTabIndex","reports_route_tab_index","toggleReports","menu_options","options","route","push","icon_component","getTitle","path","selected_route","getSelectedRoute","pathname","Loading","is_fullscreen","FadeWrapper","is_visible","keyname","PageOverlay","header","onClickClose","is_from_app","VerticalTab","is_floating","current_path","is_routed","is_full_width","setVerticalTabIndex","vertical_tab_index","Div100vhContainer","height_offset","option","hide_top_placeholder"],"sourceRoot":""}